{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1728477952011},{"_id":"source/.DS_Store","hash":"69245cc38a64f15b1bcdbaa4b946001a298b9992","modified":1582188772627},{"_id":"themes/hexo-theme-next/.DS_Store","hash":"2be55a5ccf8dede27a741c3b5d2b4894df0c6c7f","modified":1534652098000},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1527257399000},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1527257399000},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1527257399000},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1527257399000},{"_id":"themes/hexo-theme-next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1527257399000},{"_id":"themes/hexo-theme-next/.stickler.yml","hash":"b7939095038cbdc4883fc10950e163a60a643b43","modified":1527257399000},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1527257399000},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1527257399000},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1527257399000},{"_id":"themes/hexo-theme-next/_config.yml","hash":"fd36ebf07d4203f98157eecf9368abd02b729fc3","modified":1617175055231},{"_id":"themes/hexo-theme-next/README.md","hash":"807c28ad6473b221101251d244aa08e2a61b0d60","modified":1527257399000},{"_id":"themes/hexo-theme-next/bower.json","hash":"a8c832da6aad5245052aed7ff26c246f85d68c6c","modified":1527257399000},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1527257399000},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1527257399000},{"_id":"themes/hexo-theme-next/package.json","hash":"11a0b27f92da8abf1efbea6e7a0af4271d7bff9e","modified":1527257399000},{"_id":"source/categories/index.md","hash":"353b16e1e8d105d340b502b33b7688e7d3b6d611","modified":1534662416000},{"_id":"source/categories/.DS_Store","hash":"c835778e6cc2c308178d11984a55db12aaaf2081","modified":1543841960000},{"_id":"source/tags/index.md","hash":"3b94ab7bb3220ea3ce332d2d6bbe3aa748dbd7f7","modified":1534662496000},{"_id":"source/_posts/Promise的基础实现.md","hash":"cc49f07a58c65f1a8b837fc2914d534a0c74a900","modified":1651841532767},{"_id":"source/_posts/.DS_Store","hash":"0d6d58562f5c38ced27ff6d6ddf20c2339f83f64","modified":1582188643420},{"_id":"source/_posts/Typescript笔记.md","hash":"87c32333b96dbead68a320e87654d4470e48b92c","modified":1631671991252},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1544874643000},{"_id":"source/_posts/generator函数并发操作.md","hash":"0aba793d427042a0d74f526d3273a65eb8f4bafd","modified":1567663945024},{"_id":"source/_posts/generator生成器函数笔记.md","hash":"7c4b69fd8de1488f9fd48bf9fa4ba8fb3b8dbc26","modified":1560225081721},{"_id":"source/_posts/git常用命令.md","hash":"647022d9bb4301f4310b2f8b9b10b454070ad0f5","modified":1631761963855},{"_id":"source/_posts/generator函数执行管理.md","hash":"0c1dc526c221328bd9924e1ff42701a5d6bce07d","modified":1558418243457},{"_id":"source/_posts/javascript技巧1.md","hash":"45d03fadcaed21ad766a489bde02c13060c81344","modified":1557311708855},{"_id":"source/_posts/react-router4-history模式.md","hash":"eb4f57e41cf5186b06ec0bf34c90127456c482f3","modified":1575713705228},{"_id":"source/_posts/node-redis.md","hash":"c67c56a7a16921956dadaf25376d920101adf6ee","modified":1558078474544},{"_id":"source/_posts/react笔记.md","hash":"f076561d32f87681a5eaf444d56251d2621d2bf9","modified":1586337756603},{"_id":"source/_posts/vue项目代码规范和格式化神器.md","hash":"a2b641a172c1b833e6c93981002e50ff2ebf6f24","modified":1558074514426},{"_id":"source/_posts/两种遍历算法.md","hash":"bf2449b34bca274b1c6febb2992260865c67ece4","modified":1564569062738},{"_id":"source/_posts/this指向.md","hash":"3c9a76d98b78376f304fa8918418389aa99d71b7","modified":1558074266044},{"_id":"source/_posts/函数绑定和函数柯里化.md","hash":"63987b077b8340fcef0f9e6a321a022f7567c68f","modified":1558074329211},{"_id":"source/_posts/基本的排序算法.md","hash":"2e151642920d43a25576c790ee69b92f8bfd634a","modified":1582188756350},{"_id":"source/_posts/加州旅馆.md","hash":"b650d27e900fb75927cd38850d51b9e289b21a45","modified":1628347311311},{"_id":"source/_posts/夏.md","hash":"f8f2ee42ec247391dfd530f7d8db9dc9f2645d9b","modified":1628347328031},{"_id":"source/_posts/常用css.md","hash":"ba398c85b2fe9fb65a4b821ce0343679851c1d71","modified":1629084660661},{"_id":"source/_posts/常用命令.md","hash":"7798cca93c6fa37351a51b65a77db63edf2a2fb9","modified":1590043222270},{"_id":"source/_posts/拷贝.md","hash":"97f8968c8a35f89c66995ee919de57704e0df636","modified":1589188519165},{"_id":"source/_posts/常用js.md","hash":"a34edf373d5e2ca2544c33ebb5becfbcae483691","modified":1644145381144},{"_id":"source/_posts/防抖和节流.md","hash":"57aff0eb24dafedad7a5c7dbc9e60d9dea48996e","modified":1608000548387},{"_id":"source/_posts/知识点总结.md","hash":"450a441dd5035160575ebed668a5287732fe485f","modified":1663850241977},{"_id":"source/_posts/风声.md","hash":"a87485f0f9e82ce902ca90ca898a01f15c111dec","modified":1645193911471},{"_id":"source/_posts/风是月.md","hash":"ba7e95d5c5d4fb94155a803ba67aa404a29dc2aa","modified":1645194075173},{"_id":"themes/hexo-theme-next/.git/FETCH_HEAD","hash":"c7407cc0f8192a6554479f31c2c300e12fde8462","modified":1554347479000},{"_id":"themes/hexo-theme-next/.git/config","hash":"167559d3912dc1dfd6f77f753565aa4adac0de05","modified":1527257398000},{"_id":"themes/hexo-theme-next/.git/ORIG_HEAD","hash":"35ef56b48346d32c3e02bdaa3f15f06ef9af7ce6","modified":1554347479000},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527257398000},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527257358000},{"_id":"themes/hexo-theme-next/.git/index","hash":"4b15609ae269870d2c7d5d03f6e8fef050982ff2","modified":1728480271912},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"e277289607b97219cf350f6a9de7e6cbb9c9e510","modified":1527257398000},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1527257399000},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"f846118d7fc68c053df47b24e1f661241645373f","modified":1527257399000},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1527257399000},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1527257399000},{"_id":"themes/hexo-theme-next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1527257399000},{"_id":"themes/hexo-theme-next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"5f8e54c666393d1ca2e257f6b1e3b4116f6657d8","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1527257399000},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"6be107eab841d2b894f72ea042e39543548e95ac","modified":1554347575000},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"53300ca42c00cba050bc98b0a3f2d888d71829b1","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1527257399000},{"_id":"themes/hexo-theme-next/scripts/helpers.js","hash":"392cda207757d4c055b53492a98f81386379fc4f","modified":1527257399000},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1527257399000},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"e7458f896ac33086d9427979f0f963475b43338e","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1554341043000},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1527257399000},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1527257399000},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527257399000},{"_id":"source/_posts/git常用命令/.DS_Store","hash":"0168d6b291ab3e21b9a32b1e21acba3793d22ff3","modified":1544873305000},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1527257358000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1527257358000},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527257358000},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527257358000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1527257358000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527257358000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1527257358000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1527257358000},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"e3ce9f7826f77c15325fd128ac35636893af9a71","modified":1527257398000},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1527257358000},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1527257358000},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1527257358000},{"_id":"themes/hexo-theme-next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"712d9a9a557c54dd6638adfb0e1d2bb345b60756","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1527257399000},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"84d349fda6b9973c81a9ad4677db9d9ee1828506","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"05e67c50a4f3a20fad879ed61b890de8ca6ba4ea","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"686e60ede86547bdd7bc34c3629e4c9dbd134a21","modified":1554347948000},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"1ae77b6a369f83c9986408f2ab448090e37cd2dc","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1527257399000},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1527257399000},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"db70a841e7c1708f95ca97b44413b526b267fa9b","modified":1527257399000},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1527257399000},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"a98fc19a90924f2368e1982f8c449cbc09df8439","modified":1527257399000},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"1b97b1b5364945b8ab3e50813bef84273055234f","modified":1527257399000},{"_id":"themes/hexo-theme-next/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1527257399000},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1527257399000},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1527257399000},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1527257399000},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527257399000},{"_id":"source/_posts/git常用命令/assets/wechat.jpg","hash":"a8c089e733d306f57794fd14ca1eea8d8affbe4e","modified":1527086803000},{"_id":"source/_posts/git常用命令/assets/author.jpg","hash":"b402ba2668149de1a9f710cce148c62c567dd97a","modified":1527086803000},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"35ef56b48346d32c3e02bdaa3f15f06ef9af7ce6","modified":1527257398000},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.swig","hash":"a7d3f463e46d6833ca59fb80a796c283167ace23","modified":1554347235000},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"68b6859fb48fe8358e567fc324f218cecfc3a533","modified":1554348952000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"cfb03ec629f13883509eac66e561e9dba562333f","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1554348180000},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/README.md","hash":"33b87ed998d59f117dc329f999a4ffc744b41e79","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1527257399000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-9829b0de980dc403efcab0fab027fd96c783804d.idx","hash":"118683259e5b358ac99d3441dedb260235a098dc","modified":1527257398000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-1ae595043558bd7c3b0cbfd9dc811a51ea6c5b66.idx","hash":"db197031424a2e23aa04ce9727712c37c5926cb4","modified":1554347478000},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1527257399000},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"e3ce9f7826f77c15325fd128ac35636893af9a71","modified":1527257398000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/master","hash":"b10714c9a553f2bca2b4861425e55e9f339cdfb4","modified":1554347479000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1527257398000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1527257399000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/pace/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/config","hash":"46d590e05dc25560a69d5cc71b337adad9654443","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1554347271000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/index","hash":"d5987a6e93cec6c3e17f0472b7d9df465742be3c","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/packed-refs","hash":"a04f762b5ecb138fde3c5f6107d05494d8e4c905","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1527257399000},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/master","hash":"83202d206981ae220f8dc3e1c27cec10db75521a","modified":1554347479000},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"e3ce9f7826f77c15325fd128ac35636893af9a71","modified":1527257398000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1554347271000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1554347271000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1554347271000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1554347271000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1554347271000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1554347271000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1554347271000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1554347271000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1554347271000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1554347271000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/logs/HEAD","hash":"404bc3ed2c86299136f071032f2fc42e9c4c704a","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1554347271000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1527257399000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/refs/heads/master","hash":"2cf353bc3f5e2816a3a0e05d3f154a777200f091","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/00/13175fe71888324d9142744034e8296501174a","hash":"0ad0e50f7fe91fe14491924aa4b1e2e8f060a5cd","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/41/28e69301ad36a283c0fc523f3aef89644d2467","hash":"d8b985cf431fbdc5b4fa3be89e27db7a3437c920","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/61/fcbe3a99ad371eacdf3a3703883f8e95e072c8","hash":"480b60d684f9a077ade5dda0acfc75bcd9597aff","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/60/0378418401f2b0e7c58407a7bbc5a5196cfa51","hash":"20489d796247dda758599f40cbfcf14d194ef64a","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/84/a17ac7b4fe9cea559de91f00af88f810bff7f1","hash":"b41b6d3cbccd75b711f0523bba1c26bf19b0a862","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/aa/813c5a6398600e01b740696cd889eb3becad84","hash":"c62a1513ca820dc59fe1cd6d9ec16c92e0e2fbf0","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/da/79363b808519d44a7eda67d7bc81e1587a06e8","hash":"0dc5dc27991da9a09d705e488bc3f1fe5a4d4728","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/de/79ab6539ac3702aaac64b879d95e6575f4eefa","hash":"0046fefd52ed4679e0fee757cc91ced94e3ddc12","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/logs/refs/heads/master","hash":"404bc3ed2c86299136f071032f2fc42e9c4c704a","modified":1554347273000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"404bc3ed2c86299136f071032f2fc42e9c4c704a","modified":1554347273000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-9829b0de980dc403efcab0fab027fd96c783804d.pack","hash":"9e1759de63e19531772b171ae72c0b4bb3787630","modified":1527257398000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-1ae595043558bd7c3b0cbfd9dc811a51ea6c5b66.pack","hash":"df7789fc101f09703ed3ba93da2541cc0d429edf","modified":1554347478000},{"_id":"public/content.json","hash":"6d2993e6761a1c67b4ec6bc64cfd4b25ce5e6854","modified":1728480428654},{"_id":"public/categories/index.html","hash":"2ae83a788004d8e1e90a58e7a8f8da071c598b38","modified":1728480428965},{"_id":"public/tags/index.html","hash":"2144bb7e45b74aed8b068a0771873c14ca7123e7","modified":1728480428967},{"_id":"public/categories/文学/index.html","hash":"5fe2387a9aa54aac584f04db976d22f26261cefd","modified":1728480428967},{"_id":"public/categories/前端/index.html","hash":"d01e5e622c9137aa518047f0d69306eba26a8958","modified":1728480428967},{"_id":"public/categories/心情/index.html","hash":"f66a635318b478a5cbf1b6aa63a782ae6a47dcac","modified":1728480428967},{"_id":"public/tags/前端/page/2/index.html","hash":"54bedbd43467fd3893a99cd50d1d2540cbc5933a","modified":1728480428967},{"_id":"public/tags/git/index.html","hash":"653dc30ac584c480a6f15c2b981e3574e71035a0","modified":1728480428968},{"_id":"public/tags/node/index.html","hash":"38660072b6a65dee716c1d32ff2a712f508e221e","modified":1728480428968},{"_id":"public/tags/工具/index.html","hash":"23f8c83a37758f13d2214fb821122693c3d6d2ef","modified":1728480428969},{"_id":"public/tags/算法/index.html","hash":"b5017ee8ae0e9d0a25b5980e446c2db2033e143b","modified":1728480428969},{"_id":"public/tags/技术/index.html","hash":"18476423e36f8bd7808bcef9c4d9f7297dd4cb2f","modified":1728480428969},{"_id":"public/archives/2018/05/index.html","hash":"c1feece327b84cbfcd956a0284f33f0430d4b9f3","modified":1728480428969},{"_id":"public/archives/2018/06/index.html","hash":"ceb3eb542c646fb0ae1fa7426392c816d513002e","modified":1728480428969},{"_id":"public/archives/2018/08/index.html","hash":"9fbd197009a1a737f9b41a9dacef0f00685d6fc3","modified":1728480428970},{"_id":"public/archives/2018/12/index.html","hash":"3ab9c3456eb19f8ae9609f7058741ac8b5e80ade","modified":1728480428970},{"_id":"public/archives/2019/03/index.html","hash":"326f41bbc3069e524bb46acca3dcd17c933bc51b","modified":1728480428971},{"_id":"public/archives/2019/04/index.html","hash":"d58e81175ba6ab8ef0ba5de17861c87af795b299","modified":1728480428971},{"_id":"public/archives/2019/06/index.html","hash":"e5bd99e55aa90f71da44c0b50d5ad1aaf64a1e75","modified":1728480428974},{"_id":"public/archives/2019/07/index.html","hash":"606fedaa5735b56114a83d89837f1eba53f58438","modified":1728480428974},{"_id":"public/archives/2019/09/index.html","hash":"afc09f4c750a0a1bf98425fc7215e1da46309eff","modified":1728480428974},{"_id":"public/archives/2019/10/index.html","hash":"cc4978c440ecefb4a56ea9bf3ed1256609d1a84e","modified":1728480428975},{"_id":"public/archives/2019/12/index.html","hash":"d0914388a46da89b8ce0d823e2c3a9d04fad6ee7","modified":1728480428975},{"_id":"public/archives/2020/index.html","hash":"e87b3ca40ef6010bfb5f80c8922bda1ec9e42336","modified":1728480428975},{"_id":"public/archives/2020/02/index.html","hash":"842bf31cb4463675c200ec5c68b88b585a28ed8f","modified":1728480428975},{"_id":"public/archives/2020/04/index.html","hash":"68e15f6dbff907cde9904ef2d308e5a165841697","modified":1728480428975},{"_id":"public/archives/2020/07/index.html","hash":"70f740e07c45a24f6d727536d20b77701b0b68ed","modified":1728480428975},{"_id":"public/archives/2021/index.html","hash":"061f6da90dfbe4cca19f1d1e00e3d4bd9001265a","modified":1728480428975},{"_id":"public/archives/2021/08/index.html","hash":"07fe4f6f9433809b56f6f99f0da25e346b015ac1","modified":1728480428975},{"_id":"public/2022/02/18/风是月/index.html","hash":"08ee05c5b9530c1fedbc59e725d0891e47ecd7d0","modified":1728480428975},{"_id":"public/2021/08/07/加州旅馆/index.html","hash":"6f4b18e55840ed50045acdbc7ae066ad102c9133","modified":1728480428975},{"_id":"public/2021/08/02/常用js/index.html","hash":"cd260e8a5462a8a674d7c1465485c70322653fd9","modified":1728480428976},{"_id":"public/2020/07/26/知识点总结/index.html","hash":"5b01bec7a4ed7a8565adad5cfd7be774abca8659","modified":1728480428976},{"_id":"public/2020/05/21/常用css/index.html","hash":"2c6723f5da666e68ef90e0129b582a2b33755483","modified":1728480428976},{"_id":"public/2020/04/08/react笔记/index.html","hash":"dab4ce13f2844f538495c26dac0a91cfc6c37fce","modified":1728480428976},{"_id":"public/2020/02/15/Promise的基础实现/index.html","hash":"92152258d43f01e7d08f0b7dd355a8a053ce3533","modified":1728480428976},{"_id":"public/2019/12/07/react-router4-history模式/index.html","hash":"6bb2f51c461129d7f6791dd7cdea4548184f3e5d","modified":1728480428976},{"_id":"public/2019/10/10/常用命令/index.html","hash":"f71334dbd933083a329577ed8f5c4bec1d00dc9b","modified":1728480428976},{"_id":"public/2019/09/19/夏/index.html","hash":"d6ed566b84e769acbf553d8408a7fa8b36ff3552","modified":1728480428976},{"_id":"public/2019/09/05/generator函数并发操作/index.html","hash":"ce259ba3b5be7b7405490795a99e8fcb2e6341f3","modified":1728480428977},{"_id":"public/2019/07/31/两种遍历算法/index.html","hash":"5504a5e5e334c6d7de461dbe6ca4564290664a40","modified":1728480428977},{"_id":"public/2019/06/11/generator生成器函数笔记/index.html","hash":"784570a808048d49d519c84b859565055b7e3b7e","modified":1728480428977},{"_id":"public/2019/04/26/javascript技巧1/index.html","hash":"e23eb7178d8fe5179b20c5258bce6a9a33ab76d0","modified":1728480428977},{"_id":"public/2019/04/04/Typescript笔记/index.html","hash":"0d6a25675511b7f08c2e60193546519ae7db9b3d","modified":1728480428977},{"_id":"public/2019/03/11/generator函数执行管理/index.html","hash":"31721720bf4502bde63e28d588c4597443767ce2","modified":1728480428977},{"_id":"public/2018/12/15/vue项目代码规范和格式化神器/index.html","hash":"6e710caf6e04df41380a5fa76b1b931add60aecc","modified":1728480428977},{"_id":"public/2018/12/03/风声/index.html","hash":"8740d4d108a0725f9f892d5651374b3a5abcf78c","modified":1728480428978},{"_id":"public/2018/08/18/基本的排序算法/index.html","hash":"5903a2b35baf97234d3f5b60bded04b106413fc0","modified":1728480428978},{"_id":"public/2018/06/20/this指向/index.html","hash":"2231aeeb556bfc79ba877231c94c7a89b624d4da","modified":1728480428980},{"_id":"public/2018/06/30/函数绑定和函数柯里化/index.html","hash":"232052fb78b2d3ba7de1fbe11d7bae1648a44c3b","modified":1728480428981},{"_id":"public/2018/06/13/node-redis/index.html","hash":"42d210e351b40a4775e5e5dbf3b00a1ec5757e61","modified":1728480428981},{"_id":"public/2018/06/11/拷贝/index.html","hash":"8fa47a0d7d4d0147f0a00abee5b5e7d7add0b5f3","modified":1728480428981},{"_id":"public/2018/05/26/防抖和节流/index.html","hash":"133c3ed13691a568bbe3dd73cc32d09caf69641a","modified":1728480428981},{"_id":"public/2018/05/21/git常用命令/index.html","hash":"a7243940a996473613058c1c36d5530893d5236e","modified":1728480428981},{"_id":"public/categories/技术/index.html","hash":"b9f89945352743c16e1053bf4af41c2a50a7d192","modified":1728480428981},{"_id":"public/index.html","hash":"6e5afa66e6f5443eb2053210bd83c369945ac11e","modified":1728480428981},{"_id":"public/page/2/index.html","hash":"ca9e42eb091d6cb70220f5d03a5a5a9a80323170","modified":1728480428981},{"_id":"public/page/3/index.html","hash":"470689971d2086b0b9aabfc77c40c86203cec673","modified":1728480428982},{"_id":"public/tags/前端/index.html","hash":"4b9b2e131c62b7076b0f1b21f48eb563f1f3d3a2","modified":1728480428982},{"_id":"public/archives/index.html","hash":"25020bca35853995560274d3958e6b36f906c95f","modified":1728480428982},{"_id":"public/archives/page/3/index.html","hash":"dd09f981cd7f6bae3034aca632f74076f521c360","modified":1728480428982},{"_id":"public/archives/2018/index.html","hash":"b44105482a38322f9a32ad4431ac453927669830","modified":1728480428982},{"_id":"public/archives/2019/index.html","hash":"69d66325998db8ee3b4fa3180236e533ab090ec4","modified":1728480428982},{"_id":"public/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1728480428982},{"_id":"public/archives/2022/index.html","hash":"3c476e23e1d97c779987d6a5ff852fb8032fb08e","modified":1728480428995},{"_id":"public/archives/2022/02/index.html","hash":"9319a687e90d7e4a8e307e2232affed83a282fc6","modified":1728480428995},{"_id":"public/archives/2020/05/index.html","hash":"78c871036fb1a463384d7015afd28181dea7d1cc","modified":1728480428995},{"_id":"public/categories/技术/page/2/index.html","hash":"ddf4058091f3102d6284551c81b98961ee18deb3","modified":1728480428996},{"_id":"public/archives/page/2/index.html","hash":"709d9d4b40014899b797b3b4395e5628d739f193","modified":1728480428996},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1728480428996},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1728480428996},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1728480428996},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1728480428996},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1728480428996},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1728480428996},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1728480428996},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1728480428996},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1728480428997},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1728480428997},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1728480428997},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1728480428997},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1728480428997},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1728480428997},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1728480428997},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1728480428998},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1728480428998},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1728480428998},{"_id":"public/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1728480428998},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1728480428998},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1728480428998},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1728480429922},{"_id":"public/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1728480429936},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1728480429936},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1728480429936},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1728480429936},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1728480429936},{"_id":"public/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1728480429936},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1728480429936},{"_id":"public/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1728480429936},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1728480429937},{"_id":"public/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1728480429937},{"_id":"public/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1728480429937},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1728480429937},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1728480429937},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1728480429937},{"_id":"public/lib/pace/README.html","hash":"58f2105ada5cc52dff5aabcecb92569ee84493a0","modified":1728480429937},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1728480429937},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1728480429937},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1728480429937},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1728480429937},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1728480429937},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1728480429938},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1728480429938},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1728480429938},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1728480429938},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1728480429938},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1728480429938},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1728480429938},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1728480429938},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1728480429938},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1728480429938},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1728480429939},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1728480429939},{"_id":"public/css/main.css","hash":"7780c51cde3728f6f1337e3dd052acda06deb62e","modified":1728480429939},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1728480429939},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1728480429939},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1728480429939},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1728480429939},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1728480429940},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1728480429940},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1728480429940},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1728480429941}],"Category":[{"name":"技术","_id":"cm21wm62500048hsp5ij6yfcy"},{"name":"文学","_id":"cm21wm63w00178hspf9i4pgwh"},{"name":"前端","_id":"cm21wm64i001v8hsp8458rzmj"},{"name":"心情","_id":"cm21wm64n00218hsputkuc8l7"}],"Data":[],"Page":[{"title":"categories","date":"2018-08-19T04:18:57.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-08-19 12:18:57\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-08-19T07:06:56.000Z","path":"categories/index.html","layout":"page","_id":"cm21wm5s100008hsprkk07nxd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-08-19T04:22:41.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-08-19 12:22:41\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-08-19T07:08:16.000Z","path":"tags/index.html","layout":"page","_id":"cm21wm61y00028hsp0refrfvw","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Promise的基础实现","date":"2020-02-15T03:21:38.000Z","_content":"\n实现基础的 Promise：\n\n<!--more-->\n\n```typescript\ntype MyPromiseCb = (resolve?: Function, reject?: Function) => any;\n\nclass MyPromise {\n  private status: \"pending\" | \"fullfilled\" | \"rejected\" = \"pending\";\n  private value: any = \"\"; // 保存resolve或者reject的值\n  private handlers: Function[] = [];\n  private errorHandlers: Function[] = [];\n\n  constructor(func: MyPromiseCb) {\n    func.call(this, this.resolve.bind(this), this.reject.bind(this));\n  }\n\n  resolve(...args) {\n    this.value = args;\n    let handler: Function;\n    while ((handler = this.handlers.shift())) {\n      handler(...args);\n    }\n\n    this.status = \"fullfilled\";\n  }\n\n  reject(...args) {\n    this.value = args;\n    let handler: Function;\n    while ((handler = this.errorHandlers.shift())) {\n      handler(...args);\n    }\n    this.status = \"rejected\";\n  }\n\n  then(onFulfilled?: any, onRejected?: any) {\n    const t = this;\n\n    return new MyPromise(function(onFulfilledNext, onRejectedNext) {\n      let fulfilled = val => {\n        try {\n          if (typeof onFulfilled !== \"function\") {\n            onFulfilledNext(val);\n          } else {\n            let res = onFulfilled(val);\n\n            if (res instanceof MyPromise) {\n              // 如果回调函数返回MyPromise对象，则由它来执行下一个回调\n              res.then(onFulfilledNext, onRejectedNext);\n            } else {\n              // 否则会将返回结果直接作为参数，传入新Promise的resolve函数\n              onFulfilledNext(res);\n            }\n          }\n        } catch (err) {\n          onRejectedNext(err); // 传入的回调发生错误，则新promise失败\n        }\n      };\n\n      let rejected = err => {\n        try {\n          if (typeof onRejected !== \"function\") {\n            onRejectedNext(err);\n          } else {\n            let res = onRejected(err);\n\n            if (res instanceof MyPromise) {\n              res.then(onFulfilledNext, onRejectedNext);\n            } else {\n              // 捕获错误后将返回结果传入新Promise的resolve函数\n              onFulfilledNext(res);\n            }\n          }\n        } catch (err) {\n          onRejectedNext(err);\n        }\n      };\n\n      switch (t.status) {\n        case \"pending\":\n          t.handlers.push(fulfilled);\n          t.errorHandlers.push(rejected);\n\n          break;\n\n        case \"fullfilled\":\n          onFulfilled(...t.value);\n          break;\n\n        case \"rejected\":\n          onRejected(...t.value);\n          break;\n      }\n    });\n  }\n\n  catch(onRejected?: any) {\n    return this.then(undefined, onRejected);\n  }\n\n  finally(callback?: any) {\n    return this.then(\n      value => {\n        callback();\n        return value; // 和es6的Promise一样，返回resolve的参数\n      },\n      reason => {\n        callback();\n        throw reason; // 抛出错误，让catch可以捕获\n      }\n    );\n  }\n\n  static race(promises: MyPromise[]) {\n    return new MyPromise((resolve, reject) => {\n      promises.forEach(promise => {\n        promise.then(resolve, reject).catch(err => reject(err));\n      });\n    });\n  }\n\n  static all(promises: MyPromise[]) {\n    return new MyPromise((resolve, reject) => {\n      let len = promises.length;\n      let res = [];\n      let index = 0;\n      promises.forEach((p, i) => {\n        p.then(r => {\n          res[i] = r;\n          index++\n          if (index === len) {\n            resolve(res);\n          }\n        }, reject).catch(err => reject(err));\n      });\n    });\n  }\n}\n\n// 测试：\nconst p1 = new MyPromise(resolve => setTimeout(resolve.bind(null, \"resolved\"), 2000));\np1.then(res => res + \" then\").then((...args) => console.log(\"second\", ...args));\n// second resolved then\n\n// then返回MyPromise\nconst p1_p = new MyPromise(resolve => setTimeout(resolve.bind(null, \"resolved\"), 2000));\np1_p.then(res => new MyPromise((resolve) => {\n    resolve(res + \" then\")\n})).then((...args) => console.log(\"p1_p second\", ...args));\n// p1_p second resolved then\n\nconst p2 = new MyPromise((resolve, reject) => setTimeout(reject.bind(null, \"rejected\"), 2000));\np2.then(res => res + \" then\")\n  .catch((...args) => {\n    console.log(\"fail\", ...args);\n    return \"fail\";\n  })\n  .then(res => console.log(res + \" then2\"));\n// fail rejected\n// fail then2\n\nconst p3 = new MyPromise(resolve => {\n  setTimeout(resolve.bind(null, \"p3\"), 1000);\n});\nconst p4 = new MyPromise(resolve => {\n  setTimeout(resolve.bind(null, \"p4\"), 3000);\n});\nMyPromise.race([p3, p4]).then(res => {\n  console.log(\"promise race:\", res);\n});\n// promise race: p3\n\nconst p5 = new MyPromise(resolve => {\n  setTimeout(resolve.bind(null, \"p5\"), 1000);\n});\nconst p6 = new MyPromise(resolve => {\n  setTimeout(resolve.bind(null, \"p6\"), 3000);\n});\nMyPromise.all([p5, p6])\n  .then(res => {\n    console.log(\"promise all:\", res);\n  })\n  .catch(err => console.log(\"promise all error:\", err));\n// promise all: [\"p5\", \"p6\"]\n\nconst p7 = new MyPromise((resolve, reject) => {\n  setTimeout(resolve.bind(null, \"p7\"), 1000);\n});\np7.finally(() => {\n  console.log(\"p7-finally\"); // p7-finally\n}).then(res => {\n  console.log(res);\n});\n// p7-finally\n// p7\n\nconst p8 = new MyPromise((resolve, reject) => {\n  setTimeout(reject.bind(null, \"p8-err\"), 1000);\n});\np8.finally(() => {\n  console.log(\"p8-finally\");\n}).catch(res => {\n  console.log(res);\n});\n// p8-finally\n// p8-err\n\n// 这里实现的能捕获到，但原生的不能捕获到，会吃掉错误，所以原生的promise要写catch\ntry {\n    new MyPromise((resolve, reject) => {\n        throw new Error('err')\n    })\n} catch (e) {\n    console.error('捕获到了:',e) // 捕获到了: Error: err\n}\n\ntry {\n    new Promise((resolve, reject) => {\n        throw new Error('err') // 报错：Uncaught (in promise)\n    })\n} catch (e) {\n    console.error('捕获到了:',e)\n}\n```\n","source":"_posts/Promise的基础实现.md","raw":"---\ntitle: Promise的基础实现\ndate: 2020-02-15 11:21:38\ncategories: 技术\ntags: 前端\n---\n\n实现基础的 Promise：\n\n<!--more-->\n\n```typescript\ntype MyPromiseCb = (resolve?: Function, reject?: Function) => any;\n\nclass MyPromise {\n  private status: \"pending\" | \"fullfilled\" | \"rejected\" = \"pending\";\n  private value: any = \"\"; // 保存resolve或者reject的值\n  private handlers: Function[] = [];\n  private errorHandlers: Function[] = [];\n\n  constructor(func: MyPromiseCb) {\n    func.call(this, this.resolve.bind(this), this.reject.bind(this));\n  }\n\n  resolve(...args) {\n    this.value = args;\n    let handler: Function;\n    while ((handler = this.handlers.shift())) {\n      handler(...args);\n    }\n\n    this.status = \"fullfilled\";\n  }\n\n  reject(...args) {\n    this.value = args;\n    let handler: Function;\n    while ((handler = this.errorHandlers.shift())) {\n      handler(...args);\n    }\n    this.status = \"rejected\";\n  }\n\n  then(onFulfilled?: any, onRejected?: any) {\n    const t = this;\n\n    return new MyPromise(function(onFulfilledNext, onRejectedNext) {\n      let fulfilled = val => {\n        try {\n          if (typeof onFulfilled !== \"function\") {\n            onFulfilledNext(val);\n          } else {\n            let res = onFulfilled(val);\n\n            if (res instanceof MyPromise) {\n              // 如果回调函数返回MyPromise对象，则由它来执行下一个回调\n              res.then(onFulfilledNext, onRejectedNext);\n            } else {\n              // 否则会将返回结果直接作为参数，传入新Promise的resolve函数\n              onFulfilledNext(res);\n            }\n          }\n        } catch (err) {\n          onRejectedNext(err); // 传入的回调发生错误，则新promise失败\n        }\n      };\n\n      let rejected = err => {\n        try {\n          if (typeof onRejected !== \"function\") {\n            onRejectedNext(err);\n          } else {\n            let res = onRejected(err);\n\n            if (res instanceof MyPromise) {\n              res.then(onFulfilledNext, onRejectedNext);\n            } else {\n              // 捕获错误后将返回结果传入新Promise的resolve函数\n              onFulfilledNext(res);\n            }\n          }\n        } catch (err) {\n          onRejectedNext(err);\n        }\n      };\n\n      switch (t.status) {\n        case \"pending\":\n          t.handlers.push(fulfilled);\n          t.errorHandlers.push(rejected);\n\n          break;\n\n        case \"fullfilled\":\n          onFulfilled(...t.value);\n          break;\n\n        case \"rejected\":\n          onRejected(...t.value);\n          break;\n      }\n    });\n  }\n\n  catch(onRejected?: any) {\n    return this.then(undefined, onRejected);\n  }\n\n  finally(callback?: any) {\n    return this.then(\n      value => {\n        callback();\n        return value; // 和es6的Promise一样，返回resolve的参数\n      },\n      reason => {\n        callback();\n        throw reason; // 抛出错误，让catch可以捕获\n      }\n    );\n  }\n\n  static race(promises: MyPromise[]) {\n    return new MyPromise((resolve, reject) => {\n      promises.forEach(promise => {\n        promise.then(resolve, reject).catch(err => reject(err));\n      });\n    });\n  }\n\n  static all(promises: MyPromise[]) {\n    return new MyPromise((resolve, reject) => {\n      let len = promises.length;\n      let res = [];\n      let index = 0;\n      promises.forEach((p, i) => {\n        p.then(r => {\n          res[i] = r;\n          index++\n          if (index === len) {\n            resolve(res);\n          }\n        }, reject).catch(err => reject(err));\n      });\n    });\n  }\n}\n\n// 测试：\nconst p1 = new MyPromise(resolve => setTimeout(resolve.bind(null, \"resolved\"), 2000));\np1.then(res => res + \" then\").then((...args) => console.log(\"second\", ...args));\n// second resolved then\n\n// then返回MyPromise\nconst p1_p = new MyPromise(resolve => setTimeout(resolve.bind(null, \"resolved\"), 2000));\np1_p.then(res => new MyPromise((resolve) => {\n    resolve(res + \" then\")\n})).then((...args) => console.log(\"p1_p second\", ...args));\n// p1_p second resolved then\n\nconst p2 = new MyPromise((resolve, reject) => setTimeout(reject.bind(null, \"rejected\"), 2000));\np2.then(res => res + \" then\")\n  .catch((...args) => {\n    console.log(\"fail\", ...args);\n    return \"fail\";\n  })\n  .then(res => console.log(res + \" then2\"));\n// fail rejected\n// fail then2\n\nconst p3 = new MyPromise(resolve => {\n  setTimeout(resolve.bind(null, \"p3\"), 1000);\n});\nconst p4 = new MyPromise(resolve => {\n  setTimeout(resolve.bind(null, \"p4\"), 3000);\n});\nMyPromise.race([p3, p4]).then(res => {\n  console.log(\"promise race:\", res);\n});\n// promise race: p3\n\nconst p5 = new MyPromise(resolve => {\n  setTimeout(resolve.bind(null, \"p5\"), 1000);\n});\nconst p6 = new MyPromise(resolve => {\n  setTimeout(resolve.bind(null, \"p6\"), 3000);\n});\nMyPromise.all([p5, p6])\n  .then(res => {\n    console.log(\"promise all:\", res);\n  })\n  .catch(err => console.log(\"promise all error:\", err));\n// promise all: [\"p5\", \"p6\"]\n\nconst p7 = new MyPromise((resolve, reject) => {\n  setTimeout(resolve.bind(null, \"p7\"), 1000);\n});\np7.finally(() => {\n  console.log(\"p7-finally\"); // p7-finally\n}).then(res => {\n  console.log(res);\n});\n// p7-finally\n// p7\n\nconst p8 = new MyPromise((resolve, reject) => {\n  setTimeout(reject.bind(null, \"p8-err\"), 1000);\n});\np8.finally(() => {\n  console.log(\"p8-finally\");\n}).catch(res => {\n  console.log(res);\n});\n// p8-finally\n// p8-err\n\n// 这里实现的能捕获到，但原生的不能捕获到，会吃掉错误，所以原生的promise要写catch\ntry {\n    new MyPromise((resolve, reject) => {\n        throw new Error('err')\n    })\n} catch (e) {\n    console.error('捕获到了:',e) // 捕获到了: Error: err\n}\n\ntry {\n    new Promise((resolve, reject) => {\n        throw new Error('err') // 报错：Uncaught (in promise)\n    })\n} catch (e) {\n    console.error('捕获到了:',e)\n}\n```\n","slug":"Promise的基础实现","published":1,"updated":"2022-05-06T12:52:12.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm61q00018hspo796gj2b","content":"<p>实现基础的 Promise：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyPromiseCb = <span class=\"function\">(<span class=\"params\">resolve?: <span class=\"built_in\">Function</span>, reject?: <span class=\"built_in\">Function</span></span>) =&gt;</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> MyPromise &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> status: <span class=\"string\">\"pending\"</span> | <span class=\"string\">\"fullfilled\"</span> | <span class=\"string\">\"rejected\"</span> = <span class=\"string\">\"pending\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> value: <span class=\"built_in\">any</span> = <span class=\"string\">\"\"</span>; <span class=\"comment\">// 保存resolve或者reject的值</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> handlers: <span class=\"built_in\">Function</span>[] = [];</span><br><span class=\"line\">  <span class=\"keyword\">private</span> errorHandlers: <span class=\"built_in\">Function</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">func: MyPromiseCb</span>) &#123;</span><br><span class=\"line\">    func.call(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  resolve(...args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = args;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handler: <span class=\"built_in\">Function</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((handler = <span class=\"keyword\">this</span>.handlers.shift())) &#123;</span><br><span class=\"line\">      handler(...args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = <span class=\"string\">\"fullfilled\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  reject(...args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = args;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handler: <span class=\"built_in\">Function</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((handler = <span class=\"keyword\">this</span>.errorHandlers.shift())) &#123;</span><br><span class=\"line\">      handler(...args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = <span class=\"string\">\"rejected\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  then(onFulfilled?: <span class=\"built_in\">any</span>, onRejected?: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> t = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onFulfilledNext, onRejectedNext</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> fulfilled = <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onFulfilled !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">            onFulfilledNext(val);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> res = onFulfilled(val);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 如果回调函数返回MyPromise对象，则由它来执行下一个回调</span></span><br><span class=\"line\">              res.then(onFulfilledNext, onRejectedNext);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 否则会将返回结果直接作为参数，传入新Promise的resolve函数</span></span><br><span class=\"line\">              onFulfilledNext(res);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          onRejectedNext(err); <span class=\"comment\">// 传入的回调发生错误，则新promise失败</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> rejected = <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onRejected !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">            onRejectedNext(err);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> res = onRejected(err);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">              res.then(onFulfilledNext, onRejectedNext);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 捕获错误后将返回结果传入新Promise的resolve函数</span></span><br><span class=\"line\">              onFulfilledNext(res);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          onRejectedNext(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (t.status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"pending\"</span>:</span><br><span class=\"line\">          t.handlers.push(fulfilled);</span><br><span class=\"line\">          t.errorHandlers.push(rejected);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"fullfilled\"</span>:</span><br><span class=\"line\">          onFulfilled(...t.value);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"rejected\"</span>:</span><br><span class=\"line\">          onRejected(...t.value);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(onRejected?: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">undefined</span>, onRejected);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">finally</span>(callback?: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(</span><br><span class=\"line\">      value =&gt; &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value; <span class=\"comment\">// 和es6的Promise一样，返回resolve的参数</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      reason =&gt; &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> reason; <span class=\"comment\">// 抛出错误，让catch可以捕获</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> race(promises: MyPromise[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      promises.forEach(<span class=\"function\"><span class=\"params\">promise</span> =&gt;</span> &#123;</span><br><span class=\"line\">        promise.then(resolve, reject).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> reject(err));</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> all(promises: MyPromise[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> len = promises.length;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">      promises.forEach(<span class=\"function\">(<span class=\"params\">p, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        p.then(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> &#123;</span><br><span class=\"line\">          res[i] = r;</span><br><span class=\"line\">          index++</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (index === len) &#123;</span><br><span class=\"line\">            resolve(res);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, reject).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> reject(err));</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(resolve.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"resolved\"</span>), <span class=\"number\">2000</span>));</span><br><span class=\"line\">p1.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res + <span class=\"string\">\" then\"</span>).then(<span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"second\"</span>, ...args));</span><br><span class=\"line\"><span class=\"comment\">// second resolved then</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// then返回MyPromise</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1_p = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(resolve.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"resolved\"</span>), <span class=\"number\">2000</span>));</span><br><span class=\"line\">p1_p.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(res + <span class=\"string\">\" then\"</span>)</span><br><span class=\"line\">&#125;)).then(<span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"p1_p second\"</span>, ...args));</span><br><span class=\"line\"><span class=\"comment\">// p1_p second resolved then</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> setTimeout(reject.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"rejected\"</span>), <span class=\"number\">2000</span>));</span><br><span class=\"line\">p2.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res + <span class=\"string\">\" then\"</span>)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fail\"</span>, ...args);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"fail\"</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res + <span class=\"string\">\" then2\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// fail rejected</span></span><br><span class=\"line\"><span class=\"comment\">// fail then2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p3 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(resolve.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"p3\"</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p4 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(resolve.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"p4\"</span>), <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">MyPromise.race([p3, p4]).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise race:\"</span>, res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// promise race: p3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p5 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(resolve.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"p5\"</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p6 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(resolve.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"p6\"</span>), <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">MyPromise.all([p5, p6])</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise all:\"</span>, res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise all error:\"</span>, err));</span><br><span class=\"line\"><span class=\"comment\">// promise all: [\"p5\", \"p6\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p7 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(resolve.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"p7\"</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p7.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"p7-finally\"</span>); <span class=\"comment\">// p7-finally</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// p7-finally</span></span><br><span class=\"line\"><span class=\"comment\">// p7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p8 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(reject.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"p8-err\"</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p8.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"p8-finally\"</span>);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// p8-finally</span></span><br><span class=\"line\"><span class=\"comment\">// p8-err</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里实现的能捕获到，但原生的不能捕获到，会吃掉错误，所以原生的promise要写catch</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'err'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">'捕获到了:'</span>,e) <span class=\"comment\">// 捕获到了: Error: err</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'err'</span>) <span class=\"comment\">// 报错：Uncaught (in promise)</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">'捕获到了:'</span>,e)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>实现基础的 Promise：</p>","more":"<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyPromiseCb = <span class=\"function\">(<span class=\"params\">resolve?: <span class=\"built_in\">Function</span>, reject?: <span class=\"built_in\">Function</span></span>) =&gt;</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> MyPromise &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> status: <span class=\"string\">\"pending\"</span> | <span class=\"string\">\"fullfilled\"</span> | <span class=\"string\">\"rejected\"</span> = <span class=\"string\">\"pending\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> value: <span class=\"built_in\">any</span> = <span class=\"string\">\"\"</span>; <span class=\"comment\">// 保存resolve或者reject的值</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> handlers: <span class=\"built_in\">Function</span>[] = [];</span><br><span class=\"line\">  <span class=\"keyword\">private</span> errorHandlers: <span class=\"built_in\">Function</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">func: MyPromiseCb</span>) &#123;</span><br><span class=\"line\">    func.call(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  resolve(...args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = args;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handler: <span class=\"built_in\">Function</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((handler = <span class=\"keyword\">this</span>.handlers.shift())) &#123;</span><br><span class=\"line\">      handler(...args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = <span class=\"string\">\"fullfilled\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  reject(...args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = args;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handler: <span class=\"built_in\">Function</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((handler = <span class=\"keyword\">this</span>.errorHandlers.shift())) &#123;</span><br><span class=\"line\">      handler(...args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = <span class=\"string\">\"rejected\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  then(onFulfilled?: <span class=\"built_in\">any</span>, onRejected?: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> t = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onFulfilledNext, onRejectedNext</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> fulfilled = <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onFulfilled !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">            onFulfilledNext(val);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> res = onFulfilled(val);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 如果回调函数返回MyPromise对象，则由它来执行下一个回调</span></span><br><span class=\"line\">              res.then(onFulfilledNext, onRejectedNext);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 否则会将返回结果直接作为参数，传入新Promise的resolve函数</span></span><br><span class=\"line\">              onFulfilledNext(res);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          onRejectedNext(err); <span class=\"comment\">// 传入的回调发生错误，则新promise失败</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> rejected = <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onRejected !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">            onRejectedNext(err);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> res = onRejected(err);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">              res.then(onFulfilledNext, onRejectedNext);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 捕获错误后将返回结果传入新Promise的resolve函数</span></span><br><span class=\"line\">              onFulfilledNext(res);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          onRejectedNext(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (t.status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"pending\"</span>:</span><br><span class=\"line\">          t.handlers.push(fulfilled);</span><br><span class=\"line\">          t.errorHandlers.push(rejected);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"fullfilled\"</span>:</span><br><span class=\"line\">          onFulfilled(...t.value);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"rejected\"</span>:</span><br><span class=\"line\">          onRejected(...t.value);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(onRejected?: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">undefined</span>, onRejected);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">finally</span>(callback?: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(</span><br><span class=\"line\">      value =&gt; &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value; <span class=\"comment\">// 和es6的Promise一样，返回resolve的参数</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      reason =&gt; &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> reason; <span class=\"comment\">// 抛出错误，让catch可以捕获</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> race(promises: MyPromise[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      promises.forEach(<span class=\"function\"><span class=\"params\">promise</span> =&gt;</span> &#123;</span><br><span class=\"line\">        promise.then(resolve, reject).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> reject(err));</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> all(promises: MyPromise[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> len = promises.length;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">      promises.forEach(<span class=\"function\">(<span class=\"params\">p, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        p.then(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> &#123;</span><br><span class=\"line\">          res[i] = r;</span><br><span class=\"line\">          index++</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (index === len) &#123;</span><br><span class=\"line\">            resolve(res);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, reject).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> reject(err));</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(resolve.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"resolved\"</span>), <span class=\"number\">2000</span>));</span><br><span class=\"line\">p1.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res + <span class=\"string\">\" then\"</span>).then(<span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"second\"</span>, ...args));</span><br><span class=\"line\"><span class=\"comment\">// second resolved then</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// then返回MyPromise</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1_p = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(resolve.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"resolved\"</span>), <span class=\"number\">2000</span>));</span><br><span class=\"line\">p1_p.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(res + <span class=\"string\">\" then\"</span>)</span><br><span class=\"line\">&#125;)).then(<span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"p1_p second\"</span>, ...args));</span><br><span class=\"line\"><span class=\"comment\">// p1_p second resolved then</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> setTimeout(reject.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"rejected\"</span>), <span class=\"number\">2000</span>));</span><br><span class=\"line\">p2.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res + <span class=\"string\">\" then\"</span>)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fail\"</span>, ...args);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"fail\"</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res + <span class=\"string\">\" then2\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// fail rejected</span></span><br><span class=\"line\"><span class=\"comment\">// fail then2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p3 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(resolve.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"p3\"</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p4 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(resolve.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"p4\"</span>), <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">MyPromise.race([p3, p4]).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise race:\"</span>, res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// promise race: p3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p5 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(resolve.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"p5\"</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p6 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(resolve.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"p6\"</span>), <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">MyPromise.all([p5, p6])</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise all:\"</span>, res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise all error:\"</span>, err));</span><br><span class=\"line\"><span class=\"comment\">// promise all: [\"p5\", \"p6\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p7 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(resolve.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"p7\"</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p7.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"p7-finally\"</span>); <span class=\"comment\">// p7-finally</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// p7-finally</span></span><br><span class=\"line\"><span class=\"comment\">// p7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p8 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(reject.bind(<span class=\"literal\">null</span>, <span class=\"string\">\"p8-err\"</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p8.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"p8-finally\"</span>);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// p8-finally</span></span><br><span class=\"line\"><span class=\"comment\">// p8-err</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里实现的能捕获到，但原生的不能捕获到，会吃掉错误，所以原生的promise要写catch</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'err'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">'捕获到了:'</span>,e) <span class=\"comment\">// 捕获到了: Error: err</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'err'</span>) <span class=\"comment\">// 报错：Uncaught (in promise)</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">'捕获到了:'</span>,e)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Typescript笔记","date":"2019-04-04T02:26:52.000Z","_content":"\n#### Typescript 常用的映射类型：\n\n-   ##### Recode(内置)\n\n根据 K 中的所有可能值来设置 key 以及 value 的类型\n\n```typescript\ntype RecodeProps = Record<\"prop1\" | \"prop2\" | \"prop3\", string>;\nlet per1: RecodeProps = {\n    prop1: \"abc\",\n    prop2: \"abc\",\n    prop3: \"bcd\"\n};\n```\n\n<!--more-->\n\n它的定义:\n\n```typescript\ntype Record<K extends string, T> = { [P in K]: T };\n```\n\n-   ##### Pick(内置)\n\n把某个类型中的子属性挑选出来\n\n```typescript\ninterface Person2 {\n    name: string;\n    age: number;\n}\n```\n\n```typescript\n//定义\ntype Pick<T, K extends keyof T> = { [P in K]: T[P] };\ntype PickPerson = Pick<Person2, \"name\">; // { name: string; }\nlet per2: PickPerson = { name: \"123\" };\n```\n\n-   ##### Readonly(内置)\n\n每个属性成为 readonly 类型\n\n```typescript\n//定义\ntype Readonly<T> = { readonly [P in keyof T]: T[P] };\ntype ReadonlyPerson = Readonly<Person2>;\nlet per3: ReadonlyPerson = {\n    name: \"22\",\n    age: 123\n};\n\n//拓展，设置子元素也成为 readonly 类型\ntype DeepReadonly<T> = { readonly [P in keyof T]: DeepReadonly<T[P]> };\n```\n\n-   ##### Partial(内置)\n\n每个属性成为可选\n\n```typescript\n//定义\ntype Partial<T> = { [P in keyof T]?: T[P] };\ntype PartialPerson = Partial<Person2>;\nlet per4: PartialPerson = {\n    name: \"fff\" //name和age属性都可以不写\n};\n```\n\n-   ##### 其他(摘自官网)\n\n```\nExclude<T, U> -- 从T中剔除可以赋值给U的类型。\nExtract<T, U> -- 提取T中可以赋值给U的类型。\nReturnType<T> -- 获取函数返回值类型。\nInstanceType<T> -- 获取构造函数类型的实例类型。\nNonNullable<T> -- 从T中剔除null和undefined。\n```\n\n示例：\n\n```typescript\ntype T00 = Exclude<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">; // \"b\" | \"d\"\ntype T01 = Extract<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">; // \"a\" | \"c\"\n\ntype T02 = Exclude<string | number | (() => void), Function>; // string | number\ntype T03 = Extract<string | number | (() => void), Function>; // () => void\n\ntype T04 = NonNullable<string | number | undefined>; // string | number\ntype T05 = NonNullable<(() => string) | string[] | null | undefined>; // (() => string) | string[]\n\nfunction f1(s: string) {\n    return { a: 1, b: s };\n}\n\nclass C {\n    x = 0;\n    y = 0;\n}\n\ntype T10 = ReturnType<() => string>; // string\ntype T11 = ReturnType<(s: string) => void>; // void\ntype T12 = ReturnType<<T>() => T>; // {}\ntype T13 = ReturnType<<T extends U, U extends number[]>() => T>; // number[]\ntype T14 = ReturnType<typeof f1>; // { a: number, b: string }\ntype T15 = ReturnType<any>; // any\ntype T16 = ReturnType<never>; // any\ntype T17 = ReturnType<string>; // Error\ntype T18 = ReturnType<Function>; // Error\n\ntype T20 = InstanceType<typeof C>; // C\ntype T21 = InstanceType<any>; // any\ntype T22 = InstanceType<never>; // any\ntype T23 = InstanceType<string>; // Error\ntype T24 = InstanceType<Function>; // Error\n```\n\n-   ##### 还有几个拓展的映射类型\n\n```typescript\ntype Omit<T, U> = Pick<T, Exclude<keyof T, U>>;\ntype Overwrite<T, U> = Pick<T, Exclude<keyof T, keyof U>> & U;\n\n////示例\ntype Item1 = { a: string; b: number; c: boolean };\ntype Item2 = { a: number; d: number };\n\ntype T2 = Omit<Item1, \"a\">; // { b: number, c: boolean };\ntype T3 = Overwrite<Item1, Item2>; // { a: number, b: number, c: boolean, d: number };\n\nlet t3: T3 = {\n    a: 123,\n    b: 123,\n    c: true,\n    d: 123\n};\n\n//获取类本身的类型\ntype ClassOf<T> = new (...args: any[]): T;\n\n//示例\nclass Person{}\n\nlet per: Person = new Person()\n\nlet per2: InstanceType<typeof Person> = new Person()\n\n//Person是类实例的类型，ClassOf<Person>才是类本身的类型，或者可以写成typeof Person\nlet setPerson = function (Per: ClassOf<Person>): Person {\n    return new Per()\n}\n```\n\n#### 装饰器(decorator)\n\n-   ##### 类装饰器\n\n```typescript\nfunction classDecorator<T extends { new(...args: any[]): {} }>(target: T) {\n    return class extends target {\n        hello = \"override\";\n    }\n}\n\n@classDecorator\nclass Greeter {\n    property = \"property\";\n    hello: string;\n    constructor(m: string) {\n        this.hello = m;\n    }\n}\nconsole.log(new Greeter(\"world\").hello); // override\n```\n\n-   ##### 方法装饰器\n\n```typescript\nfunction enumerable(value: boolean) {\n    /**\n     * @param {any}                target      [装饰的属性所属的类的原型，如Greeter2.prototype]\n     * @param {string}             propertyKey [装饰的属性的key]\n     * @param {PropertyDescriptor} descriptor  [装饰的属性的对象的描述符对象即descriptor，表示可枚举可写等的对象]\n     */\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        const fun = descriptor.value //即是装饰的属性的值\n        descriptor.value = function(str: string){\n            console.log('我在前面加上了这句')\n            const res = fun.call(this, str) //执行原来的方法，注意有可能不是方法而是属性，这里设定是方法\n            return res + ' china'\n        }\n        //可以返回一个新的描述符用来修改原描述符，如return {enumerable: false}\n    };\n}\nclass Greeter2 {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    @enumerable(false)\n    greet(str) {\n        return \"Hello, \" + this.greeting + str;\n    }\n}\nlet greet2 = new Greeter2('green')\nconsole.log(greet2.greet(', welcome to'))\n// 我在前面加上了这句\n// Hello, green, welcome to china\n```\n\n#### 常用技巧\n\n-   ##### 根据属性获取对象的某个值\n\n```typescript\nfunction getProperty<T, K extends keyof T>(o: T, name: K): T[K] {\n    return o[name]; // o[name] is of type T[K]\n}\nvar aa3 = { a: 1, b: 2 };\ngetProperty(aa3, \"a\");\n```\n\n-   ##### 限制传入特定的参数\n\n```typescript\ninterface API {\n    baidu: string;\n    google: string;\n}\n\nfunction get<URL extends keyof API>(url: URL): API[URL] {\n    return \"https://www.\" + url + \".com\";\n}\n\nget(\"baidu\");\n```\n\n-   ##### Record 设置类型相同的类型\n\n```typescript\nenum AnimalType {\n    CAT = \"cat\",\n    DOG = \"dog\",\n    FROG = \"frog\"\n}\n\ntype Maps = Record<AnimalType, Function>;\n\nlet animal: Maps = {\n    cat() {},\n    dog() {},\n    frog() {}\n};\n```\n\n-   ##### `$('button')`是个 DOM 元素选择器，可是返回值的类型是运行时才能确定的，除了返回 any ，还可以\n\n```typescript\nfunction $<T extends HTMLElement>(id: string): T {\n    return document.getElementById(id);\n}\n\n$<HTMLInputElement>(\"input\").value;\n```\n\n-   ##### 在 window 对象上显式设置属性\n\n```typescript\n// 1\n(window as any).MyNamespace = {};\n\n// 2\ndeclare interface Window {\n  MyNamespace: any;\n}\nwindow.MyNamespace = window.MyNamespace\n```\n\n##### 常用\n```typescript\n// 导出从别的模块导入的类型\nexport type { AuditMessage } from '@/types/voice'\n\n// 遍历enum\nexport enum MotifIntervention {\n    Intrusion,\n    Identification,\n    AbsenceTest,\n    Autre\n}\n// 1:\nfor (let item in MotifIntervention) {\n    if (isNaN(Number(item))) {\n        console.log(item);\n    }\n}\n// 2:\nObject.keys(MotifIntervention).filter(key => !isNaN(Number(MotifIntervention[key])));\n```\n","source":"_posts/Typescript笔记.md","raw":"---\ntitle: Typescript笔记\ndate: 2019-04-04 10:26:52\ncategories: 技术\ntags: [前端]\n---\n\n#### Typescript 常用的映射类型：\n\n-   ##### Recode(内置)\n\n根据 K 中的所有可能值来设置 key 以及 value 的类型\n\n```typescript\ntype RecodeProps = Record<\"prop1\" | \"prop2\" | \"prop3\", string>;\nlet per1: RecodeProps = {\n    prop1: \"abc\",\n    prop2: \"abc\",\n    prop3: \"bcd\"\n};\n```\n\n<!--more-->\n\n它的定义:\n\n```typescript\ntype Record<K extends string, T> = { [P in K]: T };\n```\n\n-   ##### Pick(内置)\n\n把某个类型中的子属性挑选出来\n\n```typescript\ninterface Person2 {\n    name: string;\n    age: number;\n}\n```\n\n```typescript\n//定义\ntype Pick<T, K extends keyof T> = { [P in K]: T[P] };\ntype PickPerson = Pick<Person2, \"name\">; // { name: string; }\nlet per2: PickPerson = { name: \"123\" };\n```\n\n-   ##### Readonly(内置)\n\n每个属性成为 readonly 类型\n\n```typescript\n//定义\ntype Readonly<T> = { readonly [P in keyof T]: T[P] };\ntype ReadonlyPerson = Readonly<Person2>;\nlet per3: ReadonlyPerson = {\n    name: \"22\",\n    age: 123\n};\n\n//拓展，设置子元素也成为 readonly 类型\ntype DeepReadonly<T> = { readonly [P in keyof T]: DeepReadonly<T[P]> };\n```\n\n-   ##### Partial(内置)\n\n每个属性成为可选\n\n```typescript\n//定义\ntype Partial<T> = { [P in keyof T]?: T[P] };\ntype PartialPerson = Partial<Person2>;\nlet per4: PartialPerson = {\n    name: \"fff\" //name和age属性都可以不写\n};\n```\n\n-   ##### 其他(摘自官网)\n\n```\nExclude<T, U> -- 从T中剔除可以赋值给U的类型。\nExtract<T, U> -- 提取T中可以赋值给U的类型。\nReturnType<T> -- 获取函数返回值类型。\nInstanceType<T> -- 获取构造函数类型的实例类型。\nNonNullable<T> -- 从T中剔除null和undefined。\n```\n\n示例：\n\n```typescript\ntype T00 = Exclude<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">; // \"b\" | \"d\"\ntype T01 = Extract<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">; // \"a\" | \"c\"\n\ntype T02 = Exclude<string | number | (() => void), Function>; // string | number\ntype T03 = Extract<string | number | (() => void), Function>; // () => void\n\ntype T04 = NonNullable<string | number | undefined>; // string | number\ntype T05 = NonNullable<(() => string) | string[] | null | undefined>; // (() => string) | string[]\n\nfunction f1(s: string) {\n    return { a: 1, b: s };\n}\n\nclass C {\n    x = 0;\n    y = 0;\n}\n\ntype T10 = ReturnType<() => string>; // string\ntype T11 = ReturnType<(s: string) => void>; // void\ntype T12 = ReturnType<<T>() => T>; // {}\ntype T13 = ReturnType<<T extends U, U extends number[]>() => T>; // number[]\ntype T14 = ReturnType<typeof f1>; // { a: number, b: string }\ntype T15 = ReturnType<any>; // any\ntype T16 = ReturnType<never>; // any\ntype T17 = ReturnType<string>; // Error\ntype T18 = ReturnType<Function>; // Error\n\ntype T20 = InstanceType<typeof C>; // C\ntype T21 = InstanceType<any>; // any\ntype T22 = InstanceType<never>; // any\ntype T23 = InstanceType<string>; // Error\ntype T24 = InstanceType<Function>; // Error\n```\n\n-   ##### 还有几个拓展的映射类型\n\n```typescript\ntype Omit<T, U> = Pick<T, Exclude<keyof T, U>>;\ntype Overwrite<T, U> = Pick<T, Exclude<keyof T, keyof U>> & U;\n\n////示例\ntype Item1 = { a: string; b: number; c: boolean };\ntype Item2 = { a: number; d: number };\n\ntype T2 = Omit<Item1, \"a\">; // { b: number, c: boolean };\ntype T3 = Overwrite<Item1, Item2>; // { a: number, b: number, c: boolean, d: number };\n\nlet t3: T3 = {\n    a: 123,\n    b: 123,\n    c: true,\n    d: 123\n};\n\n//获取类本身的类型\ntype ClassOf<T> = new (...args: any[]): T;\n\n//示例\nclass Person{}\n\nlet per: Person = new Person()\n\nlet per2: InstanceType<typeof Person> = new Person()\n\n//Person是类实例的类型，ClassOf<Person>才是类本身的类型，或者可以写成typeof Person\nlet setPerson = function (Per: ClassOf<Person>): Person {\n    return new Per()\n}\n```\n\n#### 装饰器(decorator)\n\n-   ##### 类装饰器\n\n```typescript\nfunction classDecorator<T extends { new(...args: any[]): {} }>(target: T) {\n    return class extends target {\n        hello = \"override\";\n    }\n}\n\n@classDecorator\nclass Greeter {\n    property = \"property\";\n    hello: string;\n    constructor(m: string) {\n        this.hello = m;\n    }\n}\nconsole.log(new Greeter(\"world\").hello); // override\n```\n\n-   ##### 方法装饰器\n\n```typescript\nfunction enumerable(value: boolean) {\n    /**\n     * @param {any}                target      [装饰的属性所属的类的原型，如Greeter2.prototype]\n     * @param {string}             propertyKey [装饰的属性的key]\n     * @param {PropertyDescriptor} descriptor  [装饰的属性的对象的描述符对象即descriptor，表示可枚举可写等的对象]\n     */\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        const fun = descriptor.value //即是装饰的属性的值\n        descriptor.value = function(str: string){\n            console.log('我在前面加上了这句')\n            const res = fun.call(this, str) //执行原来的方法，注意有可能不是方法而是属性，这里设定是方法\n            return res + ' china'\n        }\n        //可以返回一个新的描述符用来修改原描述符，如return {enumerable: false}\n    };\n}\nclass Greeter2 {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    @enumerable(false)\n    greet(str) {\n        return \"Hello, \" + this.greeting + str;\n    }\n}\nlet greet2 = new Greeter2('green')\nconsole.log(greet2.greet(', welcome to'))\n// 我在前面加上了这句\n// Hello, green, welcome to china\n```\n\n#### 常用技巧\n\n-   ##### 根据属性获取对象的某个值\n\n```typescript\nfunction getProperty<T, K extends keyof T>(o: T, name: K): T[K] {\n    return o[name]; // o[name] is of type T[K]\n}\nvar aa3 = { a: 1, b: 2 };\ngetProperty(aa3, \"a\");\n```\n\n-   ##### 限制传入特定的参数\n\n```typescript\ninterface API {\n    baidu: string;\n    google: string;\n}\n\nfunction get<URL extends keyof API>(url: URL): API[URL] {\n    return \"https://www.\" + url + \".com\";\n}\n\nget(\"baidu\");\n```\n\n-   ##### Record 设置类型相同的类型\n\n```typescript\nenum AnimalType {\n    CAT = \"cat\",\n    DOG = \"dog\",\n    FROG = \"frog\"\n}\n\ntype Maps = Record<AnimalType, Function>;\n\nlet animal: Maps = {\n    cat() {},\n    dog() {},\n    frog() {}\n};\n```\n\n-   ##### `$('button')`是个 DOM 元素选择器，可是返回值的类型是运行时才能确定的，除了返回 any ，还可以\n\n```typescript\nfunction $<T extends HTMLElement>(id: string): T {\n    return document.getElementById(id);\n}\n\n$<HTMLInputElement>(\"input\").value;\n```\n\n-   ##### 在 window 对象上显式设置属性\n\n```typescript\n// 1\n(window as any).MyNamespace = {};\n\n// 2\ndeclare interface Window {\n  MyNamespace: any;\n}\nwindow.MyNamespace = window.MyNamespace\n```\n\n##### 常用\n```typescript\n// 导出从别的模块导入的类型\nexport type { AuditMessage } from '@/types/voice'\n\n// 遍历enum\nexport enum MotifIntervention {\n    Intrusion,\n    Identification,\n    AbsenceTest,\n    Autre\n}\n// 1:\nfor (let item in MotifIntervention) {\n    if (isNaN(Number(item))) {\n        console.log(item);\n    }\n}\n// 2:\nObject.keys(MotifIntervention).filter(key => !isNaN(Number(MotifIntervention[key])));\n```\n","slug":"Typescript笔记","published":1,"updated":"2021-09-15T02:13:11.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm62000038hspc4wnk73n","content":"<h4 id=\"Typescript-常用的映射类型：\"><a href=\"#Typescript-常用的映射类型：\" class=\"headerlink\" title=\"Typescript 常用的映射类型：\"></a>Typescript 常用的映射类型：</h4><ul>\n<li><h5 id=\"Recode-内置\"><a href=\"#Recode-内置\" class=\"headerlink\" title=\"Recode(内置)\"></a>Recode(内置)</h5></li>\n</ul>\n<p>根据 K 中的所有可能值来设置 key 以及 value 的类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> RecodeProps = Record&lt;<span class=\"string\">\"prop1\"</span> | <span class=\"string\">\"prop2\"</span> | <span class=\"string\">\"prop3\"</span>, <span class=\"built_in\">string</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> per1: RecodeProps = &#123;</span><br><span class=\"line\">    prop1: <span class=\"string\">\"abc\"</span>,</span><br><span class=\"line\">    prop2: <span class=\"string\">\"abc\"</span>,</span><br><span class=\"line\">    prop3: <span class=\"string\">\"bcd\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>它的定义:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Record&lt;K <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>, T&gt; = &#123; [P <span class=\"keyword\">in</span> K]: T &#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"Pick-内置\"><a href=\"#Pick-内置\" class=\"headerlink\" title=\"Pick(内置)\"></a>Pick(内置)</h5></li>\n</ul>\n<p>把某个类型中的子属性挑选出来</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Person2 &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    age: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Pick&lt;T, K <span class=\"keyword\">extends</span> keyof T&gt; = &#123; [P <span class=\"keyword\">in</span> K]: T[P] &#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> PickPerson = Pick&lt;Person2, <span class=\"string\">\"name\"</span>&gt;; <span class=\"comment\">// &#123; name: string; &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> per2: PickPerson = &#123; name: <span class=\"string\">\"123\"</span> &#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"Readonly-内置\"><a href=\"#Readonly-内置\" class=\"headerlink\" title=\"Readonly(内置)\"></a>Readonly(内置)</h5></li>\n</ul>\n<p>每个属性成为 readonly 类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Readonly&lt;T&gt; = &#123; readonly [P <span class=\"keyword\">in</span> keyof T]: T[P] &#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> ReadonlyPerson = Readonly&lt;Person2&gt;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> per3: ReadonlyPerson = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"22\"</span>,</span><br><span class=\"line\">    age: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拓展，设置子元素也成为 readonly 类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> DeepReadonly&lt;T&gt; = &#123; readonly [P <span class=\"keyword\">in</span> keyof T]: DeepReadonly&lt;T[P]&gt; &#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"Partial-内置\"><a href=\"#Partial-内置\" class=\"headerlink\" title=\"Partial(内置)\"></a>Partial(内置)</h5></li>\n</ul>\n<p>每个属性成为可选</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Partial&lt;T&gt; = &#123; [P <span class=\"keyword\">in</span> keyof T]?: T[P] &#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> PartialPerson = Partial&lt;Person2&gt;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> per4: PartialPerson = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"fff\"</span> <span class=\"comment\">//name和age属性都可以不写</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"其他-摘自官网\"><a href=\"#其他-摘自官网\" class=\"headerlink\" title=\"其他(摘自官网)\"></a>其他(摘自官网)</h5></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exclude&lt;T, U&gt; -- 从T中剔除可以赋值给U的类型。</span><br><span class=\"line\">Extract&lt;T, U&gt; -- 提取T中可以赋值给U的类型。</span><br><span class=\"line\">ReturnType&lt;T&gt; -- 获取函数返回值类型。</span><br><span class=\"line\">InstanceType&lt;T&gt; -- 获取构造函数类型的实例类型。</span><br><span class=\"line\">NonNullable&lt;T&gt; -- 从T中剔除null和undefined。</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> T00 = Exclude&lt;<span class=\"string\">\"a\"</span> | <span class=\"string\">\"b\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"d\"</span>, <span class=\"string\">\"a\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"f\"</span>&gt;; <span class=\"comment\">// \"b\" | \"d\"</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T01 = Extract&lt;<span class=\"string\">\"a\"</span> | <span class=\"string\">\"b\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"d\"</span>, <span class=\"string\">\"a\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"f\"</span>&gt;; <span class=\"comment\">// \"a\" | \"c\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T02 = Exclude&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"function\">(<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">void</span></span>), <span class=\"params\">Function</span>&gt;; // <span class=\"params\">string</span> | <span class=\"params\">number</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T03</span> = <span class=\"params\">Extract</span>&lt;<span class=\"params\">string</span> | <span class=\"params\">number</span> | (<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">void</span></span>), <span class=\"params\">Function</span>&gt;; // <span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T04 = NonNullable&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"literal\">undefined</span>&gt;; <span class=\"comment\">// string | number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T05 = NonNullable&lt;<span class=\"function\">(<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">string</span></span>) | <span class=\"params\">string</span>[] | <span class=\"params\">null</span> | <span class=\"params\">undefined</span>&gt;; // (<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">string</span></span>) | <span class=\"params\">string</span>[]</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">function</span> <span class=\"params\">f1</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) &#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"params\">return</span> &#123; <span class=\"params\">a</span>: 1, <span class=\"params\">b</span>: <span class=\"params\">s</span> &#125;;</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">class</span> <span class=\"params\">C</span> &#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"params\">x</span> = 0;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"params\">y</span> = 0;</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T10</span> = <span class=\"params\">ReturnType</span>&lt;<span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">string</span>&gt;; <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T11 = ReturnType&lt;<span class=\"function\">(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;; <span class=\"comment\">// void</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T12 = ReturnType&lt;&lt;T&gt;<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> T&gt;; <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T13 = ReturnType&lt;&lt;T <span class=\"keyword\">extends</span> U, U <span class=\"keyword\">extends</span> <span class=\"built_in\">number</span>[]&gt;<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> T&gt;; <span class=\"comment\">// number[]</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T14 = ReturnType&lt;<span class=\"keyword\">typeof</span> f1&gt;; <span class=\"comment\">// &#123; a: number, b: string &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T15 = ReturnType&lt;<span class=\"built_in\">any</span>&gt;; <span class=\"comment\">// any</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T16 = ReturnType&lt;never&gt;; <span class=\"comment\">// any</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T17 = ReturnType&lt;<span class=\"built_in\">string</span>&gt;; <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T18 = ReturnType&lt;<span class=\"built_in\">Function</span>&gt;; <span class=\"comment\">// Error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T20 = InstanceType&lt;<span class=\"keyword\">typeof</span> C&gt;; <span class=\"comment\">// C</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T21 = InstanceType&lt;<span class=\"built_in\">any</span>&gt;; <span class=\"comment\">// any</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T22 = InstanceType&lt;never&gt;; <span class=\"comment\">// any</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T23 = InstanceType&lt;<span class=\"built_in\">string</span>&gt;; <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T24 = InstanceType&lt;<span class=\"built_in\">Function</span>&gt;; <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"还有几个拓展的映射类型\"><a href=\"#还有几个拓展的映射类型\" class=\"headerlink\" title=\"还有几个拓展的映射类型\"></a>还有几个拓展的映射类型</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Omit&lt;T, U&gt; = Pick&lt;T, Exclude&lt;keyof T, U&gt;&gt;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Overwrite&lt;T, U&gt; = Pick&lt;T, Exclude&lt;keyof T, keyof U&gt;&gt; &amp; U;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">////示例</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Item1 = &#123; a: <span class=\"built_in\">string</span>; b: <span class=\"built_in\">number</span>; c: <span class=\"built_in\">boolean</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Item2 = &#123; a: <span class=\"built_in\">number</span>; d: <span class=\"built_in\">number</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T2 = Omit&lt;Item1, <span class=\"string\">\"a\"</span>&gt;; <span class=\"comment\">// &#123; b: number, c: boolean &#125;;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T3 = Overwrite&lt;Item1, Item2&gt;; <span class=\"comment\">// &#123; a: number, b: number, c: boolean, d: number &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> t3: T3 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">123</span>,</span><br><span class=\"line\">    b: <span class=\"number\">123</span>,</span><br><span class=\"line\">    c: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    d: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取类本身的类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> ClassOf&lt;T&gt; = <span class=\"keyword\">new</span> (...args: <span class=\"built_in\">any</span>[]): T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//示例</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Person&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> per: Person = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> per2: InstanceType&lt;<span class=\"keyword\">typeof</span> Person&gt; = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Person是类实例的类型，ClassOf&lt;Person&gt;才是类本身的类型，或者可以写成typeof Person</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> setPerson = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Per: ClassOf&lt;Person&gt;</span>): <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Per()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"装饰器-decorator\"><a href=\"#装饰器-decorator\" class=\"headerlink\" title=\"装饰器(decorator)\"></a>装饰器(decorator)</h4><ul>\n<li><h5 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">classDecorator</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> </span>&#123; <span class=\"keyword\">new</span>(...args: <span class=\"built_in\">any</span>[]): &#123;&#125; &#125;&gt;(target: T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> target &#123;</span><br><span class=\"line\">        hello = <span class=\"string\">\"override\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@classDecorator</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Greeter &#123;</span><br><span class=\"line\">    property = <span class=\"string\">\"property\"</span>;</span><br><span class=\"line\">    hello: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">m: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hello = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Greeter(<span class=\"string\">\"world\"</span>).hello); <span class=\"comment\">// override</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"方法装饰器\"><a href=\"#方法装饰器\" class=\"headerlink\" title=\"方法装饰器\"></a>方法装饰器</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enumerable</span>(<span class=\"params\">value: <span class=\"built_in\">boolean</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;any&#125;                target      [装饰的属性所属的类的原型，如Greeter2.prototype]</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;string&#125;             propertyKey [装饰的属性的key]</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;PropertyDescriptor&#125; descriptor  [装饰的属性的对象的描述符对象即descriptor，表示可枚举可写等的对象]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target: <span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> fun = descriptor.value <span class=\"comment\">//即是装饰的属性的值</span></span><br><span class=\"line\">        descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str: <span class=\"built_in\">string</span></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'我在前面加上了这句'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">const</span> res = fun.call(<span class=\"keyword\">this</span>, str) <span class=\"comment\">//执行原来的方法，注意有可能不是方法而是属性，这里设定是方法</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> res + <span class=\"string\">' china'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//可以返回一个新的描述符用来修改原描述符，如return &#123;enumerable: false&#125;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> Greeter2 &#123;</span><br><span class=\"line\">    greeting: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.greeting = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@enumerable</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    greet(str) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello, \"</span> + <span class=\"keyword\">this</span>.greeting + str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> greet2 = <span class=\"keyword\">new</span> Greeter2(<span class=\"string\">'green'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greet2.greet(<span class=\"string\">', welcome to'</span>))</span><br><span class=\"line\"><span class=\"comment\">// 我在前面加上了这句</span></span><br><span class=\"line\"><span class=\"comment\">// Hello, green, welcome to china</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"常用技巧\"><a href=\"#常用技巧\" class=\"headerlink\" title=\"常用技巧\"></a>常用技巧</h4><ul>\n<li><h5 id=\"根据属性获取对象的某个值\"><a href=\"#根据属性获取对象的某个值\" class=\"headerlink\" title=\"根据属性获取对象的某个值\"></a>根据属性获取对象的某个值</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperty</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">K</span> <span class=\"title\">extends</span> <span class=\"title\">keyof</span> <span class=\"title\">T</span>&gt;(<span class=\"params\">o: T, name: K</span>): <span class=\"title\">T</span>[<span class=\"title\">K</span>] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o[name]; <span class=\"comment\">// o[name] is of type T[K]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> aa3 = &#123; a: <span class=\"number\">1</span>, b: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">getProperty(aa3, <span class=\"string\">\"a\"</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"限制传入特定的参数\"><a href=\"#限制传入特定的参数\" class=\"headerlink\" title=\"限制传入特定的参数\"></a>限制传入特定的参数</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> API &#123;</span><br><span class=\"line\">    baidu: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    google: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>&lt;<span class=\"title\">URL</span> <span class=\"title\">extends</span> <span class=\"title\">keyof</span> <span class=\"title\">API</span>&gt;(<span class=\"params\">url: URL</span>): <span class=\"title\">API</span>[<span class=\"title\">URL</span>] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"https://www.\"</span> + url + <span class=\"string\">\".com\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span>(<span class=\"string\">\"baidu\"</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"Record-设置类型相同的类型\"><a href=\"#Record-设置类型相同的类型\" class=\"headerlink\" title=\"Record 设置类型相同的类型\"></a>Record 设置类型相同的类型</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> AnimalType &#123;</span><br><span class=\"line\">    CAT = <span class=\"string\">\"cat\"</span>,</span><br><span class=\"line\">    DOG = <span class=\"string\">\"dog\"</span>,</span><br><span class=\"line\">    FROG = <span class=\"string\">\"frog\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Maps = Record&lt;AnimalType, <span class=\"built_in\">Function</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> animal: Maps = &#123;</span><br><span class=\"line\">    cat() &#123;&#125;,</span><br><span class=\"line\">    dog() &#123;&#125;,</span><br><span class=\"line\">    frog() &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"39-button-39-是个-DOM-元素选择器，可是返回值的类型是运行时才能确定的，除了返回-any-，还可以\"><a href=\"#39-button-39-是个-DOM-元素选择器，可是返回值的类型是运行时才能确定的，除了返回-any-，还可以\" class=\"headerlink\" title=\"$(&#39;button&#39;)是个 DOM 元素选择器，可是返回值的类型是运行时才能确定的，除了返回 any ，还可以\"></a><code>$(&#39;button&#39;)</code>是个 DOM 元素选择器，可是返回值的类型是运行时才能确定的，除了返回 any ，还可以</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> <span class=\"title\">HTMLElement</span>&gt;(<span class=\"params\">id: <span class=\"built_in\">string</span></span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$&lt;HTMLInputElement&gt;(<span class=\"string\">\"input\"</span>).value;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"在-window-对象上显式设置属性\"><a href=\"#在-window-对象上显式设置属性\" class=\"headerlink\" title=\"在 window 对象上显式设置属性\"></a>在 window 对象上显式设置属性</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">(<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).MyNamespace = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">interface</span> Window &#123;</span><br><span class=\"line\">  MyNamespace: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.MyNamespace = <span class=\"built_in\">window</span>.MyNamespace</span><br></pre></td></tr></table></figure>\n<h5 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导出从别的模块导入的类型</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> &#123; AuditMessage &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/types/voice'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历enum</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> MotifIntervention &#123;</span><br><span class=\"line\">    Intrusion,</span><br><span class=\"line\">    Identification,</span><br><span class=\"line\">    AbsenceTest,</span><br><span class=\"line\">    Autre</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1:</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> MotifIntervention) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">Number</span>(item))) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2:</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(MotifIntervention).filter(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> !<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">Number</span>(MotifIntervention[key])));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"Typescript-常用的映射类型：\"><a href=\"#Typescript-常用的映射类型：\" class=\"headerlink\" title=\"Typescript 常用的映射类型：\"></a>Typescript 常用的映射类型：</h4><ul>\n<li><h5 id=\"Recode-内置\"><a href=\"#Recode-内置\" class=\"headerlink\" title=\"Recode(内置)\"></a>Recode(内置)</h5></li>\n</ul>\n<p>根据 K 中的所有可能值来设置 key 以及 value 的类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> RecodeProps = Record&lt;<span class=\"string\">\"prop1\"</span> | <span class=\"string\">\"prop2\"</span> | <span class=\"string\">\"prop3\"</span>, <span class=\"built_in\">string</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> per1: RecodeProps = &#123;</span><br><span class=\"line\">    prop1: <span class=\"string\">\"abc\"</span>,</span><br><span class=\"line\">    prop2: <span class=\"string\">\"abc\"</span>,</span><br><span class=\"line\">    prop3: <span class=\"string\">\"bcd\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<p>它的定义:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Record&lt;K <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>, T&gt; = &#123; [P <span class=\"keyword\">in</span> K]: T &#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"Pick-内置\"><a href=\"#Pick-内置\" class=\"headerlink\" title=\"Pick(内置)\"></a>Pick(内置)</h5></li>\n</ul>\n<p>把某个类型中的子属性挑选出来</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Person2 &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    age: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Pick&lt;T, K <span class=\"keyword\">extends</span> keyof T&gt; = &#123; [P <span class=\"keyword\">in</span> K]: T[P] &#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> PickPerson = Pick&lt;Person2, <span class=\"string\">\"name\"</span>&gt;; <span class=\"comment\">// &#123; name: string; &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> per2: PickPerson = &#123; name: <span class=\"string\">\"123\"</span> &#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"Readonly-内置\"><a href=\"#Readonly-内置\" class=\"headerlink\" title=\"Readonly(内置)\"></a>Readonly(内置)</h5></li>\n</ul>\n<p>每个属性成为 readonly 类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Readonly&lt;T&gt; = &#123; readonly [P <span class=\"keyword\">in</span> keyof T]: T[P] &#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> ReadonlyPerson = Readonly&lt;Person2&gt;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> per3: ReadonlyPerson = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"22\"</span>,</span><br><span class=\"line\">    age: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拓展，设置子元素也成为 readonly 类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> DeepReadonly&lt;T&gt; = &#123; readonly [P <span class=\"keyword\">in</span> keyof T]: DeepReadonly&lt;T[P]&gt; &#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"Partial-内置\"><a href=\"#Partial-内置\" class=\"headerlink\" title=\"Partial(内置)\"></a>Partial(内置)</h5></li>\n</ul>\n<p>每个属性成为可选</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Partial&lt;T&gt; = &#123; [P <span class=\"keyword\">in</span> keyof T]?: T[P] &#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> PartialPerson = Partial&lt;Person2&gt;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> per4: PartialPerson = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"fff\"</span> <span class=\"comment\">//name和age属性都可以不写</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"其他-摘自官网\"><a href=\"#其他-摘自官网\" class=\"headerlink\" title=\"其他(摘自官网)\"></a>其他(摘自官网)</h5></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exclude&lt;T, U&gt; -- 从T中剔除可以赋值给U的类型。</span><br><span class=\"line\">Extract&lt;T, U&gt; -- 提取T中可以赋值给U的类型。</span><br><span class=\"line\">ReturnType&lt;T&gt; -- 获取函数返回值类型。</span><br><span class=\"line\">InstanceType&lt;T&gt; -- 获取构造函数类型的实例类型。</span><br><span class=\"line\">NonNullable&lt;T&gt; -- 从T中剔除null和undefined。</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> T00 = Exclude&lt;<span class=\"string\">\"a\"</span> | <span class=\"string\">\"b\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"d\"</span>, <span class=\"string\">\"a\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"f\"</span>&gt;; <span class=\"comment\">// \"b\" | \"d\"</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T01 = Extract&lt;<span class=\"string\">\"a\"</span> | <span class=\"string\">\"b\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"d\"</span>, <span class=\"string\">\"a\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"f\"</span>&gt;; <span class=\"comment\">// \"a\" | \"c\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T02 = Exclude&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"function\">(<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">void</span></span>), <span class=\"params\">Function</span>&gt;; // <span class=\"params\">string</span> | <span class=\"params\">number</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T03</span> = <span class=\"params\">Extract</span>&lt;<span class=\"params\">string</span> | <span class=\"params\">number</span> | (<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">void</span></span>), <span class=\"params\">Function</span>&gt;; // <span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T04 = NonNullable&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"literal\">undefined</span>&gt;; <span class=\"comment\">// string | number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T05 = NonNullable&lt;<span class=\"function\">(<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">string</span></span>) | <span class=\"params\">string</span>[] | <span class=\"params\">null</span> | <span class=\"params\">undefined</span>&gt;; // (<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">string</span></span>) | <span class=\"params\">string</span>[]</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">function</span> <span class=\"params\">f1</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) &#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"params\">return</span> &#123; <span class=\"params\">a</span>: 1, <span class=\"params\">b</span>: <span class=\"params\">s</span> &#125;;</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">class</span> <span class=\"params\">C</span> &#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"params\">x</span> = 0;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"params\">y</span> = 0;</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T10</span> = <span class=\"params\">ReturnType</span>&lt;<span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">string</span>&gt;; <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T11 = ReturnType&lt;<span class=\"function\">(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;; <span class=\"comment\">// void</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T12 = ReturnType&lt;&lt;T&gt;<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> T&gt;; <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T13 = ReturnType&lt;&lt;T <span class=\"keyword\">extends</span> U, U <span class=\"keyword\">extends</span> <span class=\"built_in\">number</span>[]&gt;<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> T&gt;; <span class=\"comment\">// number[]</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T14 = ReturnType&lt;<span class=\"keyword\">typeof</span> f1&gt;; <span class=\"comment\">// &#123; a: number, b: string &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T15 = ReturnType&lt;<span class=\"built_in\">any</span>&gt;; <span class=\"comment\">// any</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T16 = ReturnType&lt;never&gt;; <span class=\"comment\">// any</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T17 = ReturnType&lt;<span class=\"built_in\">string</span>&gt;; <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T18 = ReturnType&lt;<span class=\"built_in\">Function</span>&gt;; <span class=\"comment\">// Error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T20 = InstanceType&lt;<span class=\"keyword\">typeof</span> C&gt;; <span class=\"comment\">// C</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T21 = InstanceType&lt;<span class=\"built_in\">any</span>&gt;; <span class=\"comment\">// any</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T22 = InstanceType&lt;never&gt;; <span class=\"comment\">// any</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T23 = InstanceType&lt;<span class=\"built_in\">string</span>&gt;; <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T24 = InstanceType&lt;<span class=\"built_in\">Function</span>&gt;; <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"还有几个拓展的映射类型\"><a href=\"#还有几个拓展的映射类型\" class=\"headerlink\" title=\"还有几个拓展的映射类型\"></a>还有几个拓展的映射类型</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Omit&lt;T, U&gt; = Pick&lt;T, Exclude&lt;keyof T, U&gt;&gt;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Overwrite&lt;T, U&gt; = Pick&lt;T, Exclude&lt;keyof T, keyof U&gt;&gt; &amp; U;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">////示例</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Item1 = &#123; a: <span class=\"built_in\">string</span>; b: <span class=\"built_in\">number</span>; c: <span class=\"built_in\">boolean</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Item2 = &#123; a: <span class=\"built_in\">number</span>; d: <span class=\"built_in\">number</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T2 = Omit&lt;Item1, <span class=\"string\">\"a\"</span>&gt;; <span class=\"comment\">// &#123; b: number, c: boolean &#125;;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T3 = Overwrite&lt;Item1, Item2&gt;; <span class=\"comment\">// &#123; a: number, b: number, c: boolean, d: number &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> t3: T3 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">123</span>,</span><br><span class=\"line\">    b: <span class=\"number\">123</span>,</span><br><span class=\"line\">    c: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    d: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取类本身的类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> ClassOf&lt;T&gt; = <span class=\"keyword\">new</span> (...args: <span class=\"built_in\">any</span>[]): T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//示例</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Person&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> per: Person = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> per2: InstanceType&lt;<span class=\"keyword\">typeof</span> Person&gt; = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Person是类实例的类型，ClassOf&lt;Person&gt;才是类本身的类型，或者可以写成typeof Person</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> setPerson = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Per: ClassOf&lt;Person&gt;</span>): <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Per()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"装饰器-decorator\"><a href=\"#装饰器-decorator\" class=\"headerlink\" title=\"装饰器(decorator)\"></a>装饰器(decorator)</h4><ul>\n<li><h5 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">classDecorator</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> </span>&#123; <span class=\"keyword\">new</span>(...args: <span class=\"built_in\">any</span>[]): &#123;&#125; &#125;&gt;(target: T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> target &#123;</span><br><span class=\"line\">        hello = <span class=\"string\">\"override\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@classDecorator</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Greeter &#123;</span><br><span class=\"line\">    property = <span class=\"string\">\"property\"</span>;</span><br><span class=\"line\">    hello: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">m: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hello = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Greeter(<span class=\"string\">\"world\"</span>).hello); <span class=\"comment\">// override</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"方法装饰器\"><a href=\"#方法装饰器\" class=\"headerlink\" title=\"方法装饰器\"></a>方法装饰器</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enumerable</span>(<span class=\"params\">value: <span class=\"built_in\">boolean</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;any&#125;                target      [装饰的属性所属的类的原型，如Greeter2.prototype]</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;string&#125;             propertyKey [装饰的属性的key]</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;PropertyDescriptor&#125; descriptor  [装饰的属性的对象的描述符对象即descriptor，表示可枚举可写等的对象]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target: <span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> fun = descriptor.value <span class=\"comment\">//即是装饰的属性的值</span></span><br><span class=\"line\">        descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str: <span class=\"built_in\">string</span></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'我在前面加上了这句'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">const</span> res = fun.call(<span class=\"keyword\">this</span>, str) <span class=\"comment\">//执行原来的方法，注意有可能不是方法而是属性，这里设定是方法</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> res + <span class=\"string\">' china'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//可以返回一个新的描述符用来修改原描述符，如return &#123;enumerable: false&#125;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> Greeter2 &#123;</span><br><span class=\"line\">    greeting: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.greeting = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@enumerable</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    greet(str) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello, \"</span> + <span class=\"keyword\">this</span>.greeting + str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> greet2 = <span class=\"keyword\">new</span> Greeter2(<span class=\"string\">'green'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greet2.greet(<span class=\"string\">', welcome to'</span>))</span><br><span class=\"line\"><span class=\"comment\">// 我在前面加上了这句</span></span><br><span class=\"line\"><span class=\"comment\">// Hello, green, welcome to china</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"常用技巧\"><a href=\"#常用技巧\" class=\"headerlink\" title=\"常用技巧\"></a>常用技巧</h4><ul>\n<li><h5 id=\"根据属性获取对象的某个值\"><a href=\"#根据属性获取对象的某个值\" class=\"headerlink\" title=\"根据属性获取对象的某个值\"></a>根据属性获取对象的某个值</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperty</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">K</span> <span class=\"title\">extends</span> <span class=\"title\">keyof</span> <span class=\"title\">T</span>&gt;(<span class=\"params\">o: T, name: K</span>): <span class=\"title\">T</span>[<span class=\"title\">K</span>] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o[name]; <span class=\"comment\">// o[name] is of type T[K]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> aa3 = &#123; a: <span class=\"number\">1</span>, b: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">getProperty(aa3, <span class=\"string\">\"a\"</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"限制传入特定的参数\"><a href=\"#限制传入特定的参数\" class=\"headerlink\" title=\"限制传入特定的参数\"></a>限制传入特定的参数</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> API &#123;</span><br><span class=\"line\">    baidu: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    google: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>&lt;<span class=\"title\">URL</span> <span class=\"title\">extends</span> <span class=\"title\">keyof</span> <span class=\"title\">API</span>&gt;(<span class=\"params\">url: URL</span>): <span class=\"title\">API</span>[<span class=\"title\">URL</span>] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"https://www.\"</span> + url + <span class=\"string\">\".com\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span>(<span class=\"string\">\"baidu\"</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"Record-设置类型相同的类型\"><a href=\"#Record-设置类型相同的类型\" class=\"headerlink\" title=\"Record 设置类型相同的类型\"></a>Record 设置类型相同的类型</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> AnimalType &#123;</span><br><span class=\"line\">    CAT = <span class=\"string\">\"cat\"</span>,</span><br><span class=\"line\">    DOG = <span class=\"string\">\"dog\"</span>,</span><br><span class=\"line\">    FROG = <span class=\"string\">\"frog\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Maps = Record&lt;AnimalType, <span class=\"built_in\">Function</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> animal: Maps = &#123;</span><br><span class=\"line\">    cat() &#123;&#125;,</span><br><span class=\"line\">    dog() &#123;&#125;,</span><br><span class=\"line\">    frog() &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"39-button-39-是个-DOM-元素选择器，可是返回值的类型是运行时才能确定的，除了返回-any-，还可以\"><a href=\"#39-button-39-是个-DOM-元素选择器，可是返回值的类型是运行时才能确定的，除了返回-any-，还可以\" class=\"headerlink\" title=\"$(&#39;button&#39;)是个 DOM 元素选择器，可是返回值的类型是运行时才能确定的，除了返回 any ，还可以\"></a><code>$(&#39;button&#39;)</code>是个 DOM 元素选择器，可是返回值的类型是运行时才能确定的，除了返回 any ，还可以</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> <span class=\"title\">HTMLElement</span>&gt;(<span class=\"params\">id: <span class=\"built_in\">string</span></span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$&lt;HTMLInputElement&gt;(<span class=\"string\">\"input\"</span>).value;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"在-window-对象上显式设置属性\"><a href=\"#在-window-对象上显式设置属性\" class=\"headerlink\" title=\"在 window 对象上显式设置属性\"></a>在 window 对象上显式设置属性</h5></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">(<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).MyNamespace = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">interface</span> Window &#123;</span><br><span class=\"line\">  MyNamespace: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.MyNamespace = <span class=\"built_in\">window</span>.MyNamespace</span><br></pre></td></tr></table></figure>\n<h5 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导出从别的模块导入的类型</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> &#123; AuditMessage &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/types/voice'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历enum</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> MotifIntervention &#123;</span><br><span class=\"line\">    Intrusion,</span><br><span class=\"line\">    Identification,</span><br><span class=\"line\">    AbsenceTest,</span><br><span class=\"line\">    Autre</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1:</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> MotifIntervention) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">Number</span>(item))) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2:</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(MotifIntervention).filter(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> !<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">Number</span>(MotifIntervention[key])));</span><br></pre></td></tr></table></figure>"},{"title":"generator函数并发操作","date":"2019-09-05T04:00:52.000Z","_content":"generator函数把异步操作写成同步形式，下一步操作会等待上一步。那如果想并发操作，要怎么写呢？\n\n<!--more-->\n\n我们使用co库来执行generator函数，注意使用的版本是3.1.0，和最新的4.0版本有些不同。\n先创建两个异步函数，一个返回Promise，另一个是Thunk函数：\n\n```javascript\nvar readFile1 = function(fileName) {\n    return new Promise(function(resolve, reject) {\n        setTimeout(() => {\n            resolve(fileName)\n        }, 1000)\n    })\n};\n\nvar readFile2 = function(fileName) {\n    return function (cb) {\n        setTimeout(() => {\n            cb(null, fileName)\n        }, 1000)\n    }\n};\n```\n执行一下，我们先试试readFile1，即Promise：\n\n```javascript\nvar co = require(\"co\");\n\nfunction run() {\n    return co(function*() {\n        try {\n            console.time('time')\n            //并发的重点是这里\n            let a =  readFile1(\"./a.txt\")\n            let b = readFile1(\"./b.txt\")\n            let info = {\n                a: yield a,\n                b: yield b\n            }\n            console.timeEnd('time')\n            console.log('res:', info);\n\n        } catch (error) {\n            console.error(\"happen error!\");\n        }\n        return \"done\";\n    })();\n}\nrun()\n```\n\n打印出来的执行结果：\n\n```javascript\n//time: 1006.001ms\n//res: { a: './a.txt', b: './b.txt' }\n```\n\n很好，是并发执行。注意，如果你写成以下形式，是不能并发：\n\n```javascript\nlet info = {\n    a: yield readFile1(\"./a.txt\")\n    b: yield readFile1(\"./b.txt\")\n}\n//打印结果：\n//time: 2009.424ms\n//res: { a: './a.txt', b: './b.txt' }\n```\n\n\n再试试readFile2：\n\n```javascript\nfunction run() {\n    return co(function*() {\n        try {\n            console.time('time')\n            //并发的重点是这里\n            let a =  readFile2(\"./a.txt\")\n            let b = readFile2(\"./b.txt\")\n            let info = {\n                a: yield a,\n                b: yield b\n            }\n            console.timeEnd('time')\n            console.log('res:', info);\n\n        } catch (error) {\n            console.error(\"happen error!\");\n        }\n        return \"done\";\n    })();\n}\nrun()\n\n//打印结果：\n//time: 2009.930ms\n//res: { a: './a.txt', b: './b.txt' }\n```\n\n对不起，并不能并发执行。\n那有没有写法可以既支持Promise，又支持Thunk函数呢？\n答案是有的：\n\n```javascript\nfunction run() {\n    return co(function*() {\n        try {\n            console.time('time')\n            //划重点\n            let info = yield {\n                a: readFile2(\"./a.txt\"),\n                b: readFile2(\"./b.txt\")\n            }\n            \n            console.timeEnd('time')\n            console.log('res:', info);\n\n        } catch (error) {\n            console.error(\"happen error!\");\n        }\n        return \"done\";\n    })();\n}\nrun()\n\n//打印结果：\n//time: 1004.395ms\n//res: { a: './a.txt', b: './b.txt' }\n```\n\n如果只用Promise的话，也可以使用Promise.all，只不过返回的是数组：\n\n```javascript\nfunction run() {\n    return co(function*() {\n        try {\n            console.time('time')\n\n            let tasks = [readFile1(\"./a.txt\"), readFile1(\"./b.txt\")]\n            let info = yield Promise.all(tasks)\n\n            console.timeEnd('time')\n            console.log('res:', info);\n\n        } catch (error) {\n            console.error(\"happen error!\");\n        }\n        return \"done\";\n    })();\n}\nrun()\n\n//打印结果：\n//time: 1003.025ms\n//res: [ './a.txt', './b.txt' ]\n```","source":"_posts/generator函数并发操作.md","raw":"---\ntitle: generator函数并发操作\ndate: 2019-09-05 12:00:52\ncategories:\ntags:\n---\ngenerator函数把异步操作写成同步形式，下一步操作会等待上一步。那如果想并发操作，要怎么写呢？\n\n<!--more-->\n\n我们使用co库来执行generator函数，注意使用的版本是3.1.0，和最新的4.0版本有些不同。\n先创建两个异步函数，一个返回Promise，另一个是Thunk函数：\n\n```javascript\nvar readFile1 = function(fileName) {\n    return new Promise(function(resolve, reject) {\n        setTimeout(() => {\n            resolve(fileName)\n        }, 1000)\n    })\n};\n\nvar readFile2 = function(fileName) {\n    return function (cb) {\n        setTimeout(() => {\n            cb(null, fileName)\n        }, 1000)\n    }\n};\n```\n执行一下，我们先试试readFile1，即Promise：\n\n```javascript\nvar co = require(\"co\");\n\nfunction run() {\n    return co(function*() {\n        try {\n            console.time('time')\n            //并发的重点是这里\n            let a =  readFile1(\"./a.txt\")\n            let b = readFile1(\"./b.txt\")\n            let info = {\n                a: yield a,\n                b: yield b\n            }\n            console.timeEnd('time')\n            console.log('res:', info);\n\n        } catch (error) {\n            console.error(\"happen error!\");\n        }\n        return \"done\";\n    })();\n}\nrun()\n```\n\n打印出来的执行结果：\n\n```javascript\n//time: 1006.001ms\n//res: { a: './a.txt', b: './b.txt' }\n```\n\n很好，是并发执行。注意，如果你写成以下形式，是不能并发：\n\n```javascript\nlet info = {\n    a: yield readFile1(\"./a.txt\")\n    b: yield readFile1(\"./b.txt\")\n}\n//打印结果：\n//time: 2009.424ms\n//res: { a: './a.txt', b: './b.txt' }\n```\n\n\n再试试readFile2：\n\n```javascript\nfunction run() {\n    return co(function*() {\n        try {\n            console.time('time')\n            //并发的重点是这里\n            let a =  readFile2(\"./a.txt\")\n            let b = readFile2(\"./b.txt\")\n            let info = {\n                a: yield a,\n                b: yield b\n            }\n            console.timeEnd('time')\n            console.log('res:', info);\n\n        } catch (error) {\n            console.error(\"happen error!\");\n        }\n        return \"done\";\n    })();\n}\nrun()\n\n//打印结果：\n//time: 2009.930ms\n//res: { a: './a.txt', b: './b.txt' }\n```\n\n对不起，并不能并发执行。\n那有没有写法可以既支持Promise，又支持Thunk函数呢？\n答案是有的：\n\n```javascript\nfunction run() {\n    return co(function*() {\n        try {\n            console.time('time')\n            //划重点\n            let info = yield {\n                a: readFile2(\"./a.txt\"),\n                b: readFile2(\"./b.txt\")\n            }\n            \n            console.timeEnd('time')\n            console.log('res:', info);\n\n        } catch (error) {\n            console.error(\"happen error!\");\n        }\n        return \"done\";\n    })();\n}\nrun()\n\n//打印结果：\n//time: 1004.395ms\n//res: { a: './a.txt', b: './b.txt' }\n```\n\n如果只用Promise的话，也可以使用Promise.all，只不过返回的是数组：\n\n```javascript\nfunction run() {\n    return co(function*() {\n        try {\n            console.time('time')\n\n            let tasks = [readFile1(\"./a.txt\"), readFile1(\"./b.txt\")]\n            let info = yield Promise.all(tasks)\n\n            console.timeEnd('time')\n            console.log('res:', info);\n\n        } catch (error) {\n            console.error(\"happen error!\");\n        }\n        return \"done\";\n    })();\n}\nrun()\n\n//打印结果：\n//time: 1003.025ms\n//res: [ './a.txt', './b.txt' ]\n```","slug":"generator函数并发操作","published":1,"updated":"2019-09-05T06:12:25.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm62900068hspc6ygjszk","content":"<p>generator函数把异步操作写成同步形式，下一步操作会等待上一步。那如果想并发操作，要怎么写呢？</p>\n<a id=\"more\"></a>\n<p>我们使用co库来执行generator函数，注意使用的版本是3.1.0，和最新的4.0版本有些不同。<br>先创建两个异步函数，一个返回Promise，另一个是Thunk函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> readFile1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fileName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            resolve(fileName)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> readFile2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fileName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            cb(<span class=\"literal\">null</span>, fileName)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>执行一下，我们先试试readFile1，即Promise：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">\"co\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> co(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.time(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">            <span class=\"comment\">//并发的重点是这里</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> a =  readFile1(<span class=\"string\">\"./a.txt\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> b = readFile1(<span class=\"string\">\"./b.txt\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> info = &#123;</span><br><span class=\"line\">                a: <span class=\"keyword\">yield</span> a,</span><br><span class=\"line\">                b: <span class=\"keyword\">yield</span> b</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'res:'</span>, info);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(<span class=\"string\">\"happen error!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"done\"</span>;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">run()</span><br></pre></td></tr></table></figure>\n<p>打印出来的执行结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//time: 1006.001ms</span></span><br><span class=\"line\"><span class=\"comment\">//res: &#123; a: './a.txt', b: './b.txt' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>很好，是并发执行。注意，如果你写成以下形式，是不能并发：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> info = &#123;</span><br><span class=\"line\">    a: <span class=\"keyword\">yield</span> readFile1(<span class=\"string\">\"./a.txt\"</span>)</span><br><span class=\"line\">    b: <span class=\"keyword\">yield</span> readFile1(<span class=\"string\">\"./b.txt\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//打印结果：</span></span><br><span class=\"line\"><span class=\"comment\">//time: 2009.424ms</span></span><br><span class=\"line\"><span class=\"comment\">//res: &#123; a: './a.txt', b: './b.txt' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>再试试readFile2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> co(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.time(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">            <span class=\"comment\">//并发的重点是这里</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> a =  readFile2(<span class=\"string\">\"./a.txt\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> b = readFile2(<span class=\"string\">\"./b.txt\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> info = &#123;</span><br><span class=\"line\">                a: <span class=\"keyword\">yield</span> a,</span><br><span class=\"line\">                b: <span class=\"keyword\">yield</span> b</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'res:'</span>, info);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(<span class=\"string\">\"happen error!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"done\"</span>;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">run()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印结果：</span></span><br><span class=\"line\"><span class=\"comment\">//time: 2009.930ms</span></span><br><span class=\"line\"><span class=\"comment\">//res: &#123; a: './a.txt', b: './b.txt' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>对不起，并不能并发执行。<br>那有没有写法可以既支持Promise，又支持Thunk函数呢？<br>答案是有的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> co(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.time(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">            <span class=\"comment\">//划重点</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> info = <span class=\"keyword\">yield</span> &#123;</span><br><span class=\"line\">                a: readFile2(<span class=\"string\">\"./a.txt\"</span>),</span><br><span class=\"line\">                b: readFile2(<span class=\"string\">\"./b.txt\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'res:'</span>, info);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(<span class=\"string\">\"happen error!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"done\"</span>;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">run()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印结果：</span></span><br><span class=\"line\"><span class=\"comment\">//time: 1004.395ms</span></span><br><span class=\"line\"><span class=\"comment\">//res: &#123; a: './a.txt', b: './b.txt' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果只用Promise的话，也可以使用Promise.all，只不过返回的是数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> co(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.time(<span class=\"string\">'time'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">let</span> tasks = [readFile1(<span class=\"string\">\"./a.txt\"</span>), readFile1(<span class=\"string\">\"./b.txt\"</span>)]</span><br><span class=\"line\">            <span class=\"keyword\">let</span> info = <span class=\"keyword\">yield</span> <span class=\"built_in\">Promise</span>.all(tasks)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'res:'</span>, info);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(<span class=\"string\">\"happen error!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"done\"</span>;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">run()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印结果：</span></span><br><span class=\"line\"><span class=\"comment\">//time: 1003.025ms</span></span><br><span class=\"line\"><span class=\"comment\">//res: [ './a.txt', './b.txt' ]</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>generator函数把异步操作写成同步形式，下一步操作会等待上一步。那如果想并发操作，要怎么写呢？</p>","more":"<p>我们使用co库来执行generator函数，注意使用的版本是3.1.0，和最新的4.0版本有些不同。<br>先创建两个异步函数，一个返回Promise，另一个是Thunk函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> readFile1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fileName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            resolve(fileName)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> readFile2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fileName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            cb(<span class=\"literal\">null</span>, fileName)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>执行一下，我们先试试readFile1，即Promise：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">\"co\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> co(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.time(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">            <span class=\"comment\">//并发的重点是这里</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> a =  readFile1(<span class=\"string\">\"./a.txt\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> b = readFile1(<span class=\"string\">\"./b.txt\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> info = &#123;</span><br><span class=\"line\">                a: <span class=\"keyword\">yield</span> a,</span><br><span class=\"line\">                b: <span class=\"keyword\">yield</span> b</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'res:'</span>, info);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(<span class=\"string\">\"happen error!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"done\"</span>;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">run()</span><br></pre></td></tr></table></figure>\n<p>打印出来的执行结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//time: 1006.001ms</span></span><br><span class=\"line\"><span class=\"comment\">//res: &#123; a: './a.txt', b: './b.txt' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>很好，是并发执行。注意，如果你写成以下形式，是不能并发：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> info = &#123;</span><br><span class=\"line\">    a: <span class=\"keyword\">yield</span> readFile1(<span class=\"string\">\"./a.txt\"</span>)</span><br><span class=\"line\">    b: <span class=\"keyword\">yield</span> readFile1(<span class=\"string\">\"./b.txt\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//打印结果：</span></span><br><span class=\"line\"><span class=\"comment\">//time: 2009.424ms</span></span><br><span class=\"line\"><span class=\"comment\">//res: &#123; a: './a.txt', b: './b.txt' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>再试试readFile2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> co(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.time(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">            <span class=\"comment\">//并发的重点是这里</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> a =  readFile2(<span class=\"string\">\"./a.txt\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> b = readFile2(<span class=\"string\">\"./b.txt\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> info = &#123;</span><br><span class=\"line\">                a: <span class=\"keyword\">yield</span> a,</span><br><span class=\"line\">                b: <span class=\"keyword\">yield</span> b</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'res:'</span>, info);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(<span class=\"string\">\"happen error!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"done\"</span>;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">run()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印结果：</span></span><br><span class=\"line\"><span class=\"comment\">//time: 2009.930ms</span></span><br><span class=\"line\"><span class=\"comment\">//res: &#123; a: './a.txt', b: './b.txt' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>对不起，并不能并发执行。<br>那有没有写法可以既支持Promise，又支持Thunk函数呢？<br>答案是有的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> co(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.time(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">            <span class=\"comment\">//划重点</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> info = <span class=\"keyword\">yield</span> &#123;</span><br><span class=\"line\">                a: readFile2(<span class=\"string\">\"./a.txt\"</span>),</span><br><span class=\"line\">                b: readFile2(<span class=\"string\">\"./b.txt\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'res:'</span>, info);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(<span class=\"string\">\"happen error!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"done\"</span>;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">run()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印结果：</span></span><br><span class=\"line\"><span class=\"comment\">//time: 1004.395ms</span></span><br><span class=\"line\"><span class=\"comment\">//res: &#123; a: './a.txt', b: './b.txt' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果只用Promise的话，也可以使用Promise.all，只不过返回的是数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> co(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.time(<span class=\"string\">'time'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">let</span> tasks = [readFile1(<span class=\"string\">\"./a.txt\"</span>), readFile1(<span class=\"string\">\"./b.txt\"</span>)]</span><br><span class=\"line\">            <span class=\"keyword\">let</span> info = <span class=\"keyword\">yield</span> <span class=\"built_in\">Promise</span>.all(tasks)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'res:'</span>, info);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(<span class=\"string\">\"happen error!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"done\"</span>;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">run()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印结果：</span></span><br><span class=\"line\"><span class=\"comment\">//time: 1003.025ms</span></span><br><span class=\"line\"><span class=\"comment\">//res: [ './a.txt', './b.txt' ]</span></span><br></pre></td></tr></table></figure>"},{"title":"generator生成器函数笔记","date":"2019-06-11T03:37:19.000Z","_content":"\n#### `yield*` 表达式\n\n<!--more-->\n\n````javascript\nfunction* foo() {\n  yield \"a\";\n  yield \"b\";\n}\nfunction* bar() {\n  yield \"x\";\n  yield* foo();\n  yield \"y\";\n}\n\n// 等同于\nfunction* bar() {\n  yield \"x\";\n  yield \"a\";\n  yield \"b\";\n  yield \"y\";\n}\n\n// 等同于\nfunction* bar() {\n  yield \"x\";\n  for (let v of foo()) {\n    yield v;\n  }\n  yield \"y\";\n}\n\nfor (let v of bar()) {\n  console.log(v);\n}\n// \"x\"\n// \"a\"\n// \"b\"\n// \"y\"\n\n\nlet delegatedIterator = (function* () {\n  yield 'Hello!';\n  yield 'Bye!';\n}());\n\nlet delegatingIterator = (function* () {\n  yield 'Greetings!';\n  yield* delegatedIterator;\n  yield 'Ok, bye.';\n}());\n\nfor(let value of delegatingIterator) {\n  console.log(value);\n}\n// \"Greetings!\n// \"Hello!\"\n// \"Bye!\"\n// \"Ok, bye.\"\n````\n\n参考：[阮一峰 ECMAScript 6 入门](http://es6.ruanyifeng.com/#docs/generator)","source":"_posts/generator生成器函数笔记.md","raw":"---\ntitle: generator生成器函数笔记\ndate: 2019-06-11 11:37:19\ncategories: 技术\ntags: [前端]\n---\n\n#### `yield*` 表达式\n\n<!--more-->\n\n````javascript\nfunction* foo() {\n  yield \"a\";\n  yield \"b\";\n}\nfunction* bar() {\n  yield \"x\";\n  yield* foo();\n  yield \"y\";\n}\n\n// 等同于\nfunction* bar() {\n  yield \"x\";\n  yield \"a\";\n  yield \"b\";\n  yield \"y\";\n}\n\n// 等同于\nfunction* bar() {\n  yield \"x\";\n  for (let v of foo()) {\n    yield v;\n  }\n  yield \"y\";\n}\n\nfor (let v of bar()) {\n  console.log(v);\n}\n// \"x\"\n// \"a\"\n// \"b\"\n// \"y\"\n\n\nlet delegatedIterator = (function* () {\n  yield 'Hello!';\n  yield 'Bye!';\n}());\n\nlet delegatingIterator = (function* () {\n  yield 'Greetings!';\n  yield* delegatedIterator;\n  yield 'Ok, bye.';\n}());\n\nfor(let value of delegatingIterator) {\n  console.log(value);\n}\n// \"Greetings!\n// \"Hello!\"\n// \"Bye!\"\n// \"Ok, bye.\"\n````\n\n参考：[阮一峰 ECMAScript 6 入门](http://es6.ruanyifeng.com/#docs/generator)","slug":"generator生成器函数笔记","published":1,"updated":"2019-06-11T03:51:21.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm62k00078hspgychuskb","content":"<h4 id=\"yield-表达式\"><a href=\"#yield-表达式\" class=\"headerlink\" title=\"yield* 表达式\"></a><code>yield*</code> 表达式</h4><a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"x\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* foo();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"y\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"x\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"y\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"x\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> v;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"y\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> bar()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"x\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"a\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"b\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"y\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> delegatedIterator = (<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Hello!'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Bye!'</span>;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> delegatingIterator = (<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Greetings!'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* delegatedIterator;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Ok, bye.'</span>;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> delegatingIterator) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"Greetings!</span></span><br><span class=\"line\"><span class=\"comment\">// \"Hello!\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"Bye!\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"Ok, bye.\"</span></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"http://es6.ruanyifeng.com/#docs/generator\" target=\"_blank\" rel=\"noopener\">阮一峰 ECMAScript 6 入门</a></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"yield-表达式\"><a href=\"#yield-表达式\" class=\"headerlink\" title=\"yield* 表达式\"></a><code>yield*</code> 表达式</h4>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"x\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* foo();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"y\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"x\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"y\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"x\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> v;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"y\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> bar()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"x\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"a\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"b\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"y\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> delegatedIterator = (<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Hello!'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Bye!'</span>;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> delegatingIterator = (<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Greetings!'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* delegatedIterator;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Ok, bye.'</span>;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> delegatingIterator) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"Greetings!</span></span><br><span class=\"line\"><span class=\"comment\">// \"Hello!\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"Bye!\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"Ok, bye.\"</span></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"http://es6.ruanyifeng.com/#docs/generator\" target=\"_blank\" rel=\"noopener\">阮一峰 ECMAScript 6 入门</a></p>"},{"title":"git常用命令","date":"2018-05-21T14:39:17.000Z","_content":"\n整理了一下 git等 的常用命令\n\n<!--more-->\n\n### 生成ssh key\n```shell\nssh-keygen -t rsa -C \"yourmail@gmail.com\" \n```\n\n### 打开ssh-agent\n```shell\neval $(ssh-agent -s)\n```\n\n### 添加私钥\n```shell\nssh-add ~/.ssh/id_rsa\n```\n\n### 创建或修改config文件\n```shell\n#github  \nHost github.com #别名\nHostName github.com #域名或ip\nUser 用户名\nIdentityFile ~/.ssh/id_rsa\n```\n\n### 设置或删除git全局用户名和邮箱\n```shell\ngit config --global --unset user.name\ngit config --global --unset user.email\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n```\n\n```\nssh -T git@github.com\n```\n\n### 查看远程仓库\n\n```shell\ngit remote -v\n```\n\n### 添加远程仓库\n\n```shell\ngit remote add origin [地址]\n```\n\n### 拉取和提交\n\n```shell\ngit fetch origin master #拉取远程仓库，但不会自动merge\n\ngit pull origin master #拉取远程仓库，并合并到当前分支\ngit pull origin master --allow-unrelated-histories #让本地仓库和远程仓库链接上，并拉取远程仓库\n\ngit pull = git fetch + git merge\n\ngit push origin master\n```\n\n\n### 版本回退\n\n```shell\ngit reset HEAD^ #回退到上版本，不会重置工作区，会撤销git add .\ngit reset --mixed HEAD^    #默认形式，和 git reset HEAD^ 一样\ngit reset --hard HEAD^    #回退到上版本，会重置工作区，会撤销git add .\ngit reset --soft HEAD^    #回退到上版本，不会重置工作区，不会撤销git add .\n\ngit reset --hard HEAD^^    #回退到上上版本\ngit reset --hard [commit] #回退到某个版本号\ngit log   #查看提交日记\n\ngit push origin [分支名] -f \n#将回退同步到远程仓库，本地分支回滚后，版本将落后远程分支，必须使用强制推送覆盖远程分支\n\ngit reset --hard origin/分支 #用git reset撤回了提交，然后同步到了远端仓库，其他人可以用这个强制和远程版本一致，但是不建议使用\n```\n\n> 用`git reset --hard HEAD^` 回退到某一个以前版本后，再 git log 已经看不到新的版本。如果想撤销回退，就必须找到 append GPL 的 commit id。\n> 当你命令行界面还没关闭时，你可以往上看那个新版本的 commit id，然后再`git reset --hard 版本号`。\n> 如果已经关了界面，Git 提供了一个命令`git reflog`用来记录当前分支的提交记录，你可以找到那个新版本的 commit id。\n\n### 撤销命令\n\n把文件在工作区的修改全部撤销，这里有两种情况：\n一种是文件自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n一种是文件已经 add 到暂存区后，又作了修改，要先`git reset [file]`，重置暂存区的文件，与上次commit保持一致，然后再`git checkout -- [file]`，撤销修改。\n\n或者这两步可以用`git reset --hard`代替，但会撤销全部文件。\n\n```shell\ngit checkout [file] #重置工作区文件\ngit checkout . #重置工作区全部文件\ngit reset [file] #重置暂存区的文件，与上一次commit保持一致，但工作区不变，是下面的简写形式\ngit reset --mixed HEAD [file]\n```\n\n### 分支\n\n```shell\ngit branch -a #查看包括远程仓库的所有分支，如果远程仓库有了新分支，要先git pull拉下来\n\ngit checkout -b haha #创建新分支haha\n\ngit branch \"本地新建分支名\" \"远程分支名\" #本地新建分支和远程分支关联起来\n\ngit checkout master #切换到主分支\n\ngit merge dev #合并\n\ngit rebase master #变基，一般用在开发分支合并master分支的修改，和merge的区别是产生的历史记录是直线的，比较简洁\n\ngit branch -d dev #删除dev分支\n\ngit push origin -d dev # 删除远程分支\n\ngit branch -m \"旧分支名\" \"新分支名\"\n```\n\n### 查看修改内容\n\n```shell\ngit diff #查看暂存区和工作区的差异\ngit diff --cached #查看暂存区和上一个commit的差异\ngit diff --name-only --diff-filter=U #查看冲突文件\n```\n\n### git stash\n\n假如你在本地新建了一个dev分支，用于开发新功能。然后master分支有bug需要处理。你不想把还没完成的功能commit，但是不commit的话切换到master分支时依旧有dev分支的修改。这时候就可以在dev分支使用git stash，把修改内容保存到stash中，这样切换到master分支时，就会保持和原来的一致。\n注意：需要`git add`后才能`git stash`\n\n```shell\ngit stash #直接把代码保存到stash\ngit stash save \"message\" #保存到stash，并加上注释（不包含新文件）\ngit stash save -a \"message\" #保存到stash，并加上注释（包含新文件）\n\ngit stash list #查看所有stash\n\ngit stash pop #弹出stash里最后一个存储\ngit stash pop stash@{n} #弹出stash里指定的存储\ngit stash apply #弹出stash里最后一个存储，但stash里依旧存在\ngit stash apply stash@{n} #弹出stash里指定的存储，但stash里依旧存在\n\ngit stash drop stash@{n} #删除指定的stash\ngit stash clear #清空所有stash\n```\n\n### git tag\n\n```shell\ngit tag <name> #新建一个标签，默认为HEAD，也可以指定一个commit id\n\ngit tag -a <tagname> -m \"blablabla...\" #可以指定标签信息\n\ngit tag #可以查看所有标签\n\ngit tag -d <name> #删除标签\n\ngit push origin <tagname> #推送tag到远程仓库\n\ngit push origin --tags #一次性推送全部尚未推送到远程的本地标签\n\ngit push origin :refs/tags/标签名  #删除远程标签(要先删除本地标签)\n```\n\n### 代码提交流程\n\n1. 将本地修改的代码切换到一条本地新分支上（`git checkout -b dev`），注意切换前保证本地dev分支不存在\n2. 在本地dev分支将代码追踪（`git add .`）\n3. 在本地dev分支将代码提交（`git commit`）\n4. 完成提交后，切换到本地master分支，此时的本地master分支应该是干净无任何修改的（`git checkout master`）\n5. 在本地master分支上拉取远程master分支最新代码（`git pull`）\n6. 切换到本地dev分支（`git checkout dev`），合并本地master分支（`git rebase master`），若有冲突就解决冲突并追踪（`git add .`），之后\b继续合并（`git rebase --continue`），直至代码完全合并\n7. 切换到本地master分支（`git checkout master`），然后合并本地dev分支（`git merge dev`），注意合之前一定要保证本地dev分支是干净无修改的\n8. 合并完成后，再推到远程master分支（`git push origin master`）\n9. 清除本地dev分支（`git branch -d dev`），这一步根据自己实际情况选择是否清除\n\n\n<!-- 如果post_asset_folder为false，图片统一放在source/images文件夹，用![](/images/image.jpg)引用\n如果post_asset_folder为true，图片放在跟文章对应的同名文件夹的assets文件夹即可，引用语法如下,但每次新建文章都会创建对应的同名文件夹.\n{% asset_img author.jpg 这是一个博客图片的说明 %} -->\n","source":"_posts/git常用命令.md","raw":"---\ntitle: git常用命令\ndate: 2018-05-21 22:39:17\ncategories: 技术\ntags: [git]\n---\n\n整理了一下 git等 的常用命令\n\n<!--more-->\n\n### 生成ssh key\n```shell\nssh-keygen -t rsa -C \"yourmail@gmail.com\" \n```\n\n### 打开ssh-agent\n```shell\neval $(ssh-agent -s)\n```\n\n### 添加私钥\n```shell\nssh-add ~/.ssh/id_rsa\n```\n\n### 创建或修改config文件\n```shell\n#github  \nHost github.com #别名\nHostName github.com #域名或ip\nUser 用户名\nIdentityFile ~/.ssh/id_rsa\n```\n\n### 设置或删除git全局用户名和邮箱\n```shell\ngit config --global --unset user.name\ngit config --global --unset user.email\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n```\n\n```\nssh -T git@github.com\n```\n\n### 查看远程仓库\n\n```shell\ngit remote -v\n```\n\n### 添加远程仓库\n\n```shell\ngit remote add origin [地址]\n```\n\n### 拉取和提交\n\n```shell\ngit fetch origin master #拉取远程仓库，但不会自动merge\n\ngit pull origin master #拉取远程仓库，并合并到当前分支\ngit pull origin master --allow-unrelated-histories #让本地仓库和远程仓库链接上，并拉取远程仓库\n\ngit pull = git fetch + git merge\n\ngit push origin master\n```\n\n\n### 版本回退\n\n```shell\ngit reset HEAD^ #回退到上版本，不会重置工作区，会撤销git add .\ngit reset --mixed HEAD^    #默认形式，和 git reset HEAD^ 一样\ngit reset --hard HEAD^    #回退到上版本，会重置工作区，会撤销git add .\ngit reset --soft HEAD^    #回退到上版本，不会重置工作区，不会撤销git add .\n\ngit reset --hard HEAD^^    #回退到上上版本\ngit reset --hard [commit] #回退到某个版本号\ngit log   #查看提交日记\n\ngit push origin [分支名] -f \n#将回退同步到远程仓库，本地分支回滚后，版本将落后远程分支，必须使用强制推送覆盖远程分支\n\ngit reset --hard origin/分支 #用git reset撤回了提交，然后同步到了远端仓库，其他人可以用这个强制和远程版本一致，但是不建议使用\n```\n\n> 用`git reset --hard HEAD^` 回退到某一个以前版本后，再 git log 已经看不到新的版本。如果想撤销回退，就必须找到 append GPL 的 commit id。\n> 当你命令行界面还没关闭时，你可以往上看那个新版本的 commit id，然后再`git reset --hard 版本号`。\n> 如果已经关了界面，Git 提供了一个命令`git reflog`用来记录当前分支的提交记录，你可以找到那个新版本的 commit id。\n\n### 撤销命令\n\n把文件在工作区的修改全部撤销，这里有两种情况：\n一种是文件自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n一种是文件已经 add 到暂存区后，又作了修改，要先`git reset [file]`，重置暂存区的文件，与上次commit保持一致，然后再`git checkout -- [file]`，撤销修改。\n\n或者这两步可以用`git reset --hard`代替，但会撤销全部文件。\n\n```shell\ngit checkout [file] #重置工作区文件\ngit checkout . #重置工作区全部文件\ngit reset [file] #重置暂存区的文件，与上一次commit保持一致，但工作区不变，是下面的简写形式\ngit reset --mixed HEAD [file]\n```\n\n### 分支\n\n```shell\ngit branch -a #查看包括远程仓库的所有分支，如果远程仓库有了新分支，要先git pull拉下来\n\ngit checkout -b haha #创建新分支haha\n\ngit branch \"本地新建分支名\" \"远程分支名\" #本地新建分支和远程分支关联起来\n\ngit checkout master #切换到主分支\n\ngit merge dev #合并\n\ngit rebase master #变基，一般用在开发分支合并master分支的修改，和merge的区别是产生的历史记录是直线的，比较简洁\n\ngit branch -d dev #删除dev分支\n\ngit push origin -d dev # 删除远程分支\n\ngit branch -m \"旧分支名\" \"新分支名\"\n```\n\n### 查看修改内容\n\n```shell\ngit diff #查看暂存区和工作区的差异\ngit diff --cached #查看暂存区和上一个commit的差异\ngit diff --name-only --diff-filter=U #查看冲突文件\n```\n\n### git stash\n\n假如你在本地新建了一个dev分支，用于开发新功能。然后master分支有bug需要处理。你不想把还没完成的功能commit，但是不commit的话切换到master分支时依旧有dev分支的修改。这时候就可以在dev分支使用git stash，把修改内容保存到stash中，这样切换到master分支时，就会保持和原来的一致。\n注意：需要`git add`后才能`git stash`\n\n```shell\ngit stash #直接把代码保存到stash\ngit stash save \"message\" #保存到stash，并加上注释（不包含新文件）\ngit stash save -a \"message\" #保存到stash，并加上注释（包含新文件）\n\ngit stash list #查看所有stash\n\ngit stash pop #弹出stash里最后一个存储\ngit stash pop stash@{n} #弹出stash里指定的存储\ngit stash apply #弹出stash里最后一个存储，但stash里依旧存在\ngit stash apply stash@{n} #弹出stash里指定的存储，但stash里依旧存在\n\ngit stash drop stash@{n} #删除指定的stash\ngit stash clear #清空所有stash\n```\n\n### git tag\n\n```shell\ngit tag <name> #新建一个标签，默认为HEAD，也可以指定一个commit id\n\ngit tag -a <tagname> -m \"blablabla...\" #可以指定标签信息\n\ngit tag #可以查看所有标签\n\ngit tag -d <name> #删除标签\n\ngit push origin <tagname> #推送tag到远程仓库\n\ngit push origin --tags #一次性推送全部尚未推送到远程的本地标签\n\ngit push origin :refs/tags/标签名  #删除远程标签(要先删除本地标签)\n```\n\n### 代码提交流程\n\n1. 将本地修改的代码切换到一条本地新分支上（`git checkout -b dev`），注意切换前保证本地dev分支不存在\n2. 在本地dev分支将代码追踪（`git add .`）\n3. 在本地dev分支将代码提交（`git commit`）\n4. 完成提交后，切换到本地master分支，此时的本地master分支应该是干净无任何修改的（`git checkout master`）\n5. 在本地master分支上拉取远程master分支最新代码（`git pull`）\n6. 切换到本地dev分支（`git checkout dev`），合并本地master分支（`git rebase master`），若有冲突就解决冲突并追踪（`git add .`），之后\b继续合并（`git rebase --continue`），直至代码完全合并\n7. 切换到本地master分支（`git checkout master`），然后合并本地dev分支（`git merge dev`），注意合之前一定要保证本地dev分支是干净无修改的\n8. 合并完成后，再推到远程master分支（`git push origin master`）\n9. 清除本地dev分支（`git branch -d dev`），这一步根据自己实际情况选择是否清除\n\n\n<!-- 如果post_asset_folder为false，图片统一放在source/images文件夹，用![](/images/image.jpg)引用\n如果post_asset_folder为true，图片放在跟文章对应的同名文件夹的assets文件夹即可，引用语法如下,但每次新建文章都会创建对应的同名文件夹.\n{% asset_img author.jpg 这是一个博客图片的说明 %} -->\n","slug":"git常用命令","published":1,"updated":"2021-09-16T03:12:43.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm62n00088hspqrjs3csm","content":"<p>整理了一下 git等 的常用命令</p>\n<a id=\"more\"></a>\n<h3 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C \"yourmail@gmail.com\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开ssh-agent\"><a href=\"#打开ssh-agent\" class=\"headerlink\" title=\"打开ssh-agent\"></a>打开ssh-agent</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval $(ssh-agent -s)</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加私钥\"><a href=\"#添加私钥\" class=\"headerlink\" title=\"添加私钥\"></a>添加私钥</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建或修改config文件\"><a href=\"#创建或修改config文件\" class=\"headerlink\" title=\"创建或修改config文件\"></a>创建或修改config文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>github  </span><br><span class=\"line\">Host github.com #别名</span><br><span class=\"line\">HostName github.com #域名或ip</span><br><span class=\"line\">User 用户名</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置或删除git全局用户名和邮箱\"><a href=\"#设置或删除git全局用户名和邮箱\" class=\"headerlink\" title=\"设置或删除git全局用户名和邮箱\"></a>设置或删除git全局用户名和邮箱</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset user.name</span><br><span class=\"line\">git config --global --unset user.email</span><br><span class=\"line\">git config --global user.name \"yourname\"</span><br><span class=\"line\">git config --global user.email \"youremail\"</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看远程仓库\"><a href=\"#查看远程仓库\" class=\"headerlink\" title=\"查看远程仓库\"></a>查看远程仓库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加远程仓库\"><a href=\"#添加远程仓库\" class=\"headerlink\" title=\"添加远程仓库\"></a>添加远程仓库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin [地址]</span><br></pre></td></tr></table></figure>\n<h3 id=\"拉取和提交\"><a href=\"#拉取和提交\" class=\"headerlink\" title=\"拉取和提交\"></a>拉取和提交</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin master #拉取远程仓库，但不会自动merge</span><br><span class=\"line\"></span><br><span class=\"line\">git pull origin master #拉取远程仓库，并合并到当前分支</span><br><span class=\"line\">git pull origin master --allow-unrelated-histories #让本地仓库和远程仓库链接上，并拉取远程仓库</span><br><span class=\"line\"></span><br><span class=\"line\">git pull = git fetch + git merge</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD^ #回退到上版本，不会重置工作区，会撤销git add .</span><br><span class=\"line\">git reset --mixed HEAD^    #默认形式，和 git reset HEAD^ 一样</span><br><span class=\"line\">git reset --hard HEAD^    #回退到上版本，会重置工作区，会撤销git add .</span><br><span class=\"line\">git reset --soft HEAD^    #回退到上版本，不会重置工作区，不会撤销git add .</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard HEAD^^    #回退到上上版本</span><br><span class=\"line\">git reset --hard [commit] #回退到某个版本号</span><br><span class=\"line\">git log   #查看提交日记</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin [分支名] -f </span><br><span class=\"line\"><span class=\"meta\">#</span>将回退同步到远程仓库，本地分支回滚后，版本将落后远程分支，必须使用强制推送覆盖远程分支</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard origin/分支 #用git reset撤回了提交，然后同步到了远端仓库，其他人可以用这个强制和远程版本一致，但是不建议使用</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>用<code>git reset --hard HEAD^</code> 回退到某一个以前版本后，再 git log 已经看不到新的版本。如果想撤销回退，就必须找到 append GPL 的 commit id。<br>当你命令行界面还没关闭时，你可以往上看那个新版本的 commit id，然后再<code>git reset --hard 版本号</code>。<br>如果已经关了界面，Git 提供了一个命令<code>git reflog</code>用来记录当前分支的提交记录，你可以找到那个新版本的 commit id。</p>\n</blockquote>\n<h3 id=\"撤销命令\"><a href=\"#撤销命令\" class=\"headerlink\" title=\"撤销命令\"></a>撤销命令</h3><p>把文件在工作区的修改全部撤销，这里有两种情况：<br>一种是文件自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是文件已经 add 到暂存区后，又作了修改，要先<code>git reset [file]</code>，重置暂存区的文件，与上次commit保持一致，然后再<code>git checkout -- [file]</code>，撤销修改。</p>\n<p>或者这两步可以用<code>git reset --hard</code>代替，但会撤销全部文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout [file] #重置工作区文件</span><br><span class=\"line\">git checkout . #重置工作区全部文件</span><br><span class=\"line\">git reset [file] #重置暂存区的文件，与上一次commit保持一致，但工作区不变，是下面的简写形式</span><br><span class=\"line\">git reset --mixed HEAD [file]</span><br></pre></td></tr></table></figure>\n<h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a #查看包括远程仓库的所有分支，如果远程仓库有了新分支，要先git pull拉下来</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -b haha #创建新分支haha</span><br><span class=\"line\"></span><br><span class=\"line\">git branch \"本地新建分支名\" \"远程分支名\" #本地新建分支和远程分支关联起来</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout master #切换到主分支</span><br><span class=\"line\"></span><br><span class=\"line\">git merge dev #合并</span><br><span class=\"line\"></span><br><span class=\"line\">git rebase master #变基，一般用在开发分支合并master分支的修改，和merge的区别是产生的历史记录是直线的，比较简洁</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -d dev #删除dev分支</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin -d dev # 删除远程分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -m \"旧分支名\" \"新分支名\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看修改内容\"><a href=\"#查看修改内容\" class=\"headerlink\" title=\"查看修改内容\"></a>查看修改内容</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff #查看暂存区和工作区的差异</span><br><span class=\"line\">git diff --cached #查看暂存区和上一个commit的差异</span><br><span class=\"line\">git diff --name-only --diff-filter=U #查看冲突文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h3><p>假如你在本地新建了一个dev分支，用于开发新功能。然后master分支有bug需要处理。你不想把还没完成的功能commit，但是不commit的话切换到master分支时依旧有dev分支的修改。这时候就可以在dev分支使用git stash，把修改内容保存到stash中，这样切换到master分支时，就会保持和原来的一致。<br>注意：需要<code>git add</code>后才能<code>git stash</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash #直接把代码保存到stash</span><br><span class=\"line\">git stash save \"message\" #保存到stash，并加上注释（不包含新文件）</span><br><span class=\"line\">git stash save -a \"message\" #保存到stash，并加上注释（包含新文件）</span><br><span class=\"line\"></span><br><span class=\"line\">git stash list #查看所有stash</span><br><span class=\"line\"></span><br><span class=\"line\">git stash pop #弹出stash里最后一个存储</span><br><span class=\"line\">git stash pop stash@&#123;n&#125; #弹出stash里指定的存储</span><br><span class=\"line\">git stash apply #弹出stash里最后一个存储，但stash里依旧存在</span><br><span class=\"line\">git stash apply stash@&#123;n&#125; #弹出stash里指定的存储，但stash里依旧存在</span><br><span class=\"line\"></span><br><span class=\"line\">git stash drop stash@&#123;n&#125; #删除指定的stash</span><br><span class=\"line\">git stash clear #清空所有stash</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a>git tag</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag &lt;name&gt; #新建一个标签，默认为HEAD，也可以指定一个commit id</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -a &lt;tagname&gt; -m \"blablabla...\" #可以指定标签信息</span><br><span class=\"line\"></span><br><span class=\"line\">git tag #可以查看所有标签</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -d &lt;name&gt; #删除标签</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin &lt;tagname&gt; #推送tag到远程仓库</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin --tags #一次性推送全部尚未推送到远程的本地标签</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin :refs/tags/标签名  #删除远程标签(要先删除本地标签)</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码提交流程\"><a href=\"#代码提交流程\" class=\"headerlink\" title=\"代码提交流程\"></a>代码提交流程</h3><ol>\n<li>将本地修改的代码切换到一条本地新分支上（<code>git checkout -b dev</code>），注意切换前保证本地dev分支不存在</li>\n<li>在本地dev分支将代码追踪（<code>git add .</code>）</li>\n<li>在本地dev分支将代码提交（<code>git commit</code>）</li>\n<li>完成提交后，切换到本地master分支，此时的本地master分支应该是干净无任何修改的（<code>git checkout master</code>）</li>\n<li>在本地master分支上拉取远程master分支最新代码（<code>git pull</code>）</li>\n<li>切换到本地dev分支（<code>git checkout dev</code>），合并本地master分支（<code>git rebase master</code>），若有冲突就解决冲突并追踪（<code>git add .</code>），之后\b继续合并（<code>git rebase --continue</code>），直至代码完全合并</li>\n<li>切换到本地master分支（<code>git checkout master</code>），然后合并本地dev分支（<code>git merge dev</code>），注意合之前一定要保证本地dev分支是干净无修改的</li>\n<li>合并完成后，再推到远程master分支（<code>git push origin master</code>）</li>\n<li>清除本地dev分支（<code>git branch -d dev</code>），这一步根据自己实际情况选择是否清除</li>\n</ol>\n<!-- 如果post_asset_folder为false，图片统一放在source/images文件夹，用![](/images/image.jpg)引用\n如果post_asset_folder为true，图片放在跟文章对应的同名文件夹的assets文件夹即可，引用语法如下,但每次新建文章都会创建对应的同名文件夹.\n –&gt;\n-->","site":{"data":{}},"excerpt":"<p>整理了一下 git等 的常用命令</p>","more":"<h3 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C \"yourmail@gmail.com\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开ssh-agent\"><a href=\"#打开ssh-agent\" class=\"headerlink\" title=\"打开ssh-agent\"></a>打开ssh-agent</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval $(ssh-agent -s)</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加私钥\"><a href=\"#添加私钥\" class=\"headerlink\" title=\"添加私钥\"></a>添加私钥</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建或修改config文件\"><a href=\"#创建或修改config文件\" class=\"headerlink\" title=\"创建或修改config文件\"></a>创建或修改config文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>github  </span><br><span class=\"line\">Host github.com #别名</span><br><span class=\"line\">HostName github.com #域名或ip</span><br><span class=\"line\">User 用户名</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置或删除git全局用户名和邮箱\"><a href=\"#设置或删除git全局用户名和邮箱\" class=\"headerlink\" title=\"设置或删除git全局用户名和邮箱\"></a>设置或删除git全局用户名和邮箱</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset user.name</span><br><span class=\"line\">git config --global --unset user.email</span><br><span class=\"line\">git config --global user.name \"yourname\"</span><br><span class=\"line\">git config --global user.email \"youremail\"</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看远程仓库\"><a href=\"#查看远程仓库\" class=\"headerlink\" title=\"查看远程仓库\"></a>查看远程仓库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加远程仓库\"><a href=\"#添加远程仓库\" class=\"headerlink\" title=\"添加远程仓库\"></a>添加远程仓库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin [地址]</span><br></pre></td></tr></table></figure>\n<h3 id=\"拉取和提交\"><a href=\"#拉取和提交\" class=\"headerlink\" title=\"拉取和提交\"></a>拉取和提交</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin master #拉取远程仓库，但不会自动merge</span><br><span class=\"line\"></span><br><span class=\"line\">git pull origin master #拉取远程仓库，并合并到当前分支</span><br><span class=\"line\">git pull origin master --allow-unrelated-histories #让本地仓库和远程仓库链接上，并拉取远程仓库</span><br><span class=\"line\"></span><br><span class=\"line\">git pull = git fetch + git merge</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD^ #回退到上版本，不会重置工作区，会撤销git add .</span><br><span class=\"line\">git reset --mixed HEAD^    #默认形式，和 git reset HEAD^ 一样</span><br><span class=\"line\">git reset --hard HEAD^    #回退到上版本，会重置工作区，会撤销git add .</span><br><span class=\"line\">git reset --soft HEAD^    #回退到上版本，不会重置工作区，不会撤销git add .</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard HEAD^^    #回退到上上版本</span><br><span class=\"line\">git reset --hard [commit] #回退到某个版本号</span><br><span class=\"line\">git log   #查看提交日记</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin [分支名] -f </span><br><span class=\"line\"><span class=\"meta\">#</span>将回退同步到远程仓库，本地分支回滚后，版本将落后远程分支，必须使用强制推送覆盖远程分支</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard origin/分支 #用git reset撤回了提交，然后同步到了远端仓库，其他人可以用这个强制和远程版本一致，但是不建议使用</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>用<code>git reset --hard HEAD^</code> 回退到某一个以前版本后，再 git log 已经看不到新的版本。如果想撤销回退，就必须找到 append GPL 的 commit id。<br>当你命令行界面还没关闭时，你可以往上看那个新版本的 commit id，然后再<code>git reset --hard 版本号</code>。<br>如果已经关了界面，Git 提供了一个命令<code>git reflog</code>用来记录当前分支的提交记录，你可以找到那个新版本的 commit id。</p>\n</blockquote>\n<h3 id=\"撤销命令\"><a href=\"#撤销命令\" class=\"headerlink\" title=\"撤销命令\"></a>撤销命令</h3><p>把文件在工作区的修改全部撤销，这里有两种情况：<br>一种是文件自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是文件已经 add 到暂存区后，又作了修改，要先<code>git reset [file]</code>，重置暂存区的文件，与上次commit保持一致，然后再<code>git checkout -- [file]</code>，撤销修改。</p>\n<p>或者这两步可以用<code>git reset --hard</code>代替，但会撤销全部文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout [file] #重置工作区文件</span><br><span class=\"line\">git checkout . #重置工作区全部文件</span><br><span class=\"line\">git reset [file] #重置暂存区的文件，与上一次commit保持一致，但工作区不变，是下面的简写形式</span><br><span class=\"line\">git reset --mixed HEAD [file]</span><br></pre></td></tr></table></figure>\n<h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a #查看包括远程仓库的所有分支，如果远程仓库有了新分支，要先git pull拉下来</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -b haha #创建新分支haha</span><br><span class=\"line\"></span><br><span class=\"line\">git branch \"本地新建分支名\" \"远程分支名\" #本地新建分支和远程分支关联起来</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout master #切换到主分支</span><br><span class=\"line\"></span><br><span class=\"line\">git merge dev #合并</span><br><span class=\"line\"></span><br><span class=\"line\">git rebase master #变基，一般用在开发分支合并master分支的修改，和merge的区别是产生的历史记录是直线的，比较简洁</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -d dev #删除dev分支</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin -d dev # 删除远程分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -m \"旧分支名\" \"新分支名\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看修改内容\"><a href=\"#查看修改内容\" class=\"headerlink\" title=\"查看修改内容\"></a>查看修改内容</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff #查看暂存区和工作区的差异</span><br><span class=\"line\">git diff --cached #查看暂存区和上一个commit的差异</span><br><span class=\"line\">git diff --name-only --diff-filter=U #查看冲突文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h3><p>假如你在本地新建了一个dev分支，用于开发新功能。然后master分支有bug需要处理。你不想把还没完成的功能commit，但是不commit的话切换到master分支时依旧有dev分支的修改。这时候就可以在dev分支使用git stash，把修改内容保存到stash中，这样切换到master分支时，就会保持和原来的一致。<br>注意：需要<code>git add</code>后才能<code>git stash</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash #直接把代码保存到stash</span><br><span class=\"line\">git stash save \"message\" #保存到stash，并加上注释（不包含新文件）</span><br><span class=\"line\">git stash save -a \"message\" #保存到stash，并加上注释（包含新文件）</span><br><span class=\"line\"></span><br><span class=\"line\">git stash list #查看所有stash</span><br><span class=\"line\"></span><br><span class=\"line\">git stash pop #弹出stash里最后一个存储</span><br><span class=\"line\">git stash pop stash@&#123;n&#125; #弹出stash里指定的存储</span><br><span class=\"line\">git stash apply #弹出stash里最后一个存储，但stash里依旧存在</span><br><span class=\"line\">git stash apply stash@&#123;n&#125; #弹出stash里指定的存储，但stash里依旧存在</span><br><span class=\"line\"></span><br><span class=\"line\">git stash drop stash@&#123;n&#125; #删除指定的stash</span><br><span class=\"line\">git stash clear #清空所有stash</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a>git tag</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag &lt;name&gt; #新建一个标签，默认为HEAD，也可以指定一个commit id</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -a &lt;tagname&gt; -m \"blablabla...\" #可以指定标签信息</span><br><span class=\"line\"></span><br><span class=\"line\">git tag #可以查看所有标签</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -d &lt;name&gt; #删除标签</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin &lt;tagname&gt; #推送tag到远程仓库</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin --tags #一次性推送全部尚未推送到远程的本地标签</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin :refs/tags/标签名  #删除远程标签(要先删除本地标签)</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码提交流程\"><a href=\"#代码提交流程\" class=\"headerlink\" title=\"代码提交流程\"></a>代码提交流程</h3><ol>\n<li>将本地修改的代码切换到一条本地新分支上（<code>git checkout -b dev</code>），注意切换前保证本地dev分支不存在</li>\n<li>在本地dev分支将代码追踪（<code>git add .</code>）</li>\n<li>在本地dev分支将代码提交（<code>git commit</code>）</li>\n<li>完成提交后，切换到本地master分支，此时的本地master分支应该是干净无任何修改的（<code>git checkout master</code>）</li>\n<li>在本地master分支上拉取远程master分支最新代码（<code>git pull</code>）</li>\n<li>切换到本地dev分支（<code>git checkout dev</code>），合并本地master分支（<code>git rebase master</code>），若有冲突就解决冲突并追踪（<code>git add .</code>），之后\b继续合并（<code>git rebase --continue</code>），直至代码完全合并</li>\n<li>切换到本地master分支（<code>git checkout master</code>），然后合并本地dev分支（<code>git merge dev</code>），注意合之前一定要保证本地dev分支是干净无修改的</li>\n<li>合并完成后，再推到远程master分支（<code>git push origin master</code>）</li>\n<li>清除本地dev分支（<code>git branch -d dev</code>），这一步根据自己实际情况选择是否清除</li>\n</ol>\n<!-- 如果post_asset_folder为false，图片统一放在source/images文件夹，用![](/images/image.jpg)引用\n如果post_asset_folder为true，图片放在跟文章对应的同名文件夹的assets文件夹即可，引用语法如下,但每次新建文章都会创建对应的同名文件夹.\n –&gt;\n-->"},{"title":"generator函数执行管理","date":"2019-03-11T02:33:03.000Z","_content":"\ngenerator 函数的两种执行管理方式：\n\n### 基于 Thunk 函数\n\n<!--more-->\n\n```javascript\nfunction thunkify(fn) {\n    return function() {\n        var args = new Array(arguments.length);\n        var ctx = this;\n\n        for (var i = 0; i < args.length; ++i) {\n            args[i] = arguments[i];\n        }\n\n        return function(cb) {\n            var called;\n\n            args.push(function() {\n                if (called) return; //回调函数只执行一次\n                called = true;\n                cb.apply(null, arguments);\n            });\n\n            try {\n                fn.apply(ctx, args);\n            } catch (err) {\n                cb(err);\n            }\n        };\n    };\n}\n\nvar readBook = function(fileName, callback) {\n    setTimeout(function() {\n        try {\n            throw new Error(\"I am die\");\n        } catch (err) {\n            callback(err);\n            return;\n        }\n        callback(null, \"aa:\" + fileName);\n    }, 1000);\n};\n\nvar readBookThunk = thunkify(readBook);\n\n//或者不借助Thunk函数，手动包装自己的函数\n// var readBookThunk = function(fileName) {\n//     return function(callback) {\n//         try {\n//             throw new Error(\"I am die\");\n//         } catch (err) {\n//             callback(err);\n//             return;\n//         }\n//         setTimeout(function() {\n//             callback(null, \"aa:\" + fileName);\n//         }, 1000);\n//     };\n// };\n\nvar gen = function*() {\n    try {\n        var r1 = yield readBookThunk(\"/etc/fstab\");\n        console.log(r1.toString());\n\n        var r2 = yield readBookThunk(\"/etc/shells\");\n        console.log(r2.toString());\n    } catch (err) {\n        console.error(\"happer err\");\n    }\n};\n\n//执行方式1：手动执行\n// var g = gen();\n\n// var r1 = g.next();\n// r1.value(function(err, data) {\n//     if (err) return g.throw(err);\n//     var r2 = g.next(data);\n\n//     r2.value(function(err2, data) {\n//         if (err2) return g.throw(err2);\n//         g.next(data);\n//     });\n// });\n\n//执行方式2：自动管理执行\nfunction run(gen) {\n    var g = gen();\n\n    function next(err, data) {\n        if (err) return g.throw(err);\n\n        var result = g.next(data);\n        if (result.done) return;\n        result.value(function(err2, data) {\n            next(err2, data);\n        });\n    }\n\n    next();\n}\n\nrun(gen);\n//过1秒输出happer err\n```\n\n### 基于 Promise\n\n```javascript\nvar readFile = function(fileName) {\n    return new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            resolve(\"aa:\" + fileName);\n        }, 1000);\n    });\n};\n\nvar gen2 = function*() {\n    try {\n        // var f1 = yield readFile('/etc/fstab');\n        // var f2 = yield readFile('/etc/shells');\n\n        // console.log(f1.toString());\n        // console.log(f2.toString());\n\n        var obj = {\n            a: yield readFile(\"/etc/fstab\"),\n            b: yield readFile(\"/etc/shells\")\n        };\n\n        console.log(obj);\n    } catch (err) {\n        console.error(\"happer err\");\n    }\n};\n\nfunction run2(gen) {\n    var g = gen();\n\n    function next(err, data) {\n        if (err) return g.throw(err);\n\n        var r = g.next(data);\n        if (r.done) return;\n\n        r.value\n            .then(data => {\n                next(null, data);\n            })\n            .catch(err => {\n                next(err);\n            });\n    }\n\n    next();\n}\n\nrun2(gen2);\n//过2秒输出{ a: 'aa:/etc/fstab', b: 'aa:/etc/shells' }\n```\n","source":"_posts/generator函数执行管理.md","raw":"---\ntitle: generator函数执行管理\ndate: 2019-03-11 10:33:03\ncategories: 技术\ntags: [前端]\n---\n\ngenerator 函数的两种执行管理方式：\n\n### 基于 Thunk 函数\n\n<!--more-->\n\n```javascript\nfunction thunkify(fn) {\n    return function() {\n        var args = new Array(arguments.length);\n        var ctx = this;\n\n        for (var i = 0; i < args.length; ++i) {\n            args[i] = arguments[i];\n        }\n\n        return function(cb) {\n            var called;\n\n            args.push(function() {\n                if (called) return; //回调函数只执行一次\n                called = true;\n                cb.apply(null, arguments);\n            });\n\n            try {\n                fn.apply(ctx, args);\n            } catch (err) {\n                cb(err);\n            }\n        };\n    };\n}\n\nvar readBook = function(fileName, callback) {\n    setTimeout(function() {\n        try {\n            throw new Error(\"I am die\");\n        } catch (err) {\n            callback(err);\n            return;\n        }\n        callback(null, \"aa:\" + fileName);\n    }, 1000);\n};\n\nvar readBookThunk = thunkify(readBook);\n\n//或者不借助Thunk函数，手动包装自己的函数\n// var readBookThunk = function(fileName) {\n//     return function(callback) {\n//         try {\n//             throw new Error(\"I am die\");\n//         } catch (err) {\n//             callback(err);\n//             return;\n//         }\n//         setTimeout(function() {\n//             callback(null, \"aa:\" + fileName);\n//         }, 1000);\n//     };\n// };\n\nvar gen = function*() {\n    try {\n        var r1 = yield readBookThunk(\"/etc/fstab\");\n        console.log(r1.toString());\n\n        var r2 = yield readBookThunk(\"/etc/shells\");\n        console.log(r2.toString());\n    } catch (err) {\n        console.error(\"happer err\");\n    }\n};\n\n//执行方式1：手动执行\n// var g = gen();\n\n// var r1 = g.next();\n// r1.value(function(err, data) {\n//     if (err) return g.throw(err);\n//     var r2 = g.next(data);\n\n//     r2.value(function(err2, data) {\n//         if (err2) return g.throw(err2);\n//         g.next(data);\n//     });\n// });\n\n//执行方式2：自动管理执行\nfunction run(gen) {\n    var g = gen();\n\n    function next(err, data) {\n        if (err) return g.throw(err);\n\n        var result = g.next(data);\n        if (result.done) return;\n        result.value(function(err2, data) {\n            next(err2, data);\n        });\n    }\n\n    next();\n}\n\nrun(gen);\n//过1秒输出happer err\n```\n\n### 基于 Promise\n\n```javascript\nvar readFile = function(fileName) {\n    return new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            resolve(\"aa:\" + fileName);\n        }, 1000);\n    });\n};\n\nvar gen2 = function*() {\n    try {\n        // var f1 = yield readFile('/etc/fstab');\n        // var f2 = yield readFile('/etc/shells');\n\n        // console.log(f1.toString());\n        // console.log(f2.toString());\n\n        var obj = {\n            a: yield readFile(\"/etc/fstab\"),\n            b: yield readFile(\"/etc/shells\")\n        };\n\n        console.log(obj);\n    } catch (err) {\n        console.error(\"happer err\");\n    }\n};\n\nfunction run2(gen) {\n    var g = gen();\n\n    function next(err, data) {\n        if (err) return g.throw(err);\n\n        var r = g.next(data);\n        if (r.done) return;\n\n        r.value\n            .then(data => {\n                next(null, data);\n            })\n            .catch(err => {\n                next(err);\n            });\n    }\n\n    next();\n}\n\nrun2(gen2);\n//过2秒输出{ a: 'aa:/etc/fstab', b: 'aa:/etc/shells' }\n```\n","slug":"generator函数执行管理","published":1,"updated":"2019-05-21T05:57:23.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm62u000c8hspcw06xby3","content":"<p>generator 函数的两种执行管理方式：</p>\n<h3 id=\"基于-Thunk-函数\"><a href=\"#基于-Thunk-函数\" class=\"headerlink\" title=\"基于 Thunk 函数\"></a>基于 Thunk 函数</h3><a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">thunkify</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"built_in\">arguments</span>.length);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; args.length; ++i) &#123;</span><br><span class=\"line\">            args[i] = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> called;</span><br><span class=\"line\"></span><br><span class=\"line\">            args.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>; <span class=\"comment\">//回调函数只执行一次</span></span><br><span class=\"line\">                called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                cb.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fn.apply(ctx, args);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">                cb(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> readBook = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fileName, callback</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"I am die\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">            callback(err);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"string\">\"aa:\"</span> + fileName);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> readBookThunk = thunkify(readBook);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者不借助Thunk函数，手动包装自己的函数</span></span><br><span class=\"line\"><span class=\"comment\">// var readBookThunk = function(fileName) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return function(callback) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         try &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             throw new Error(\"I am die\");</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125; catch (err) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             callback(err);</span></span><br><span class=\"line\"><span class=\"comment\">//             return;</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//         setTimeout(function() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             callback(null, \"aa:\" + fileName);</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;, 1000);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> r1 = <span class=\"keyword\">yield</span> readBookThunk(<span class=\"string\">\"/etc/fstab\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(r1.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> r2 = <span class=\"keyword\">yield</span> readBookThunk(<span class=\"string\">\"/etc/shells\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(r2.toString());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">\"happer err\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行方式1：手动执行</span></span><br><span class=\"line\"><span class=\"comment\">// var g = gen();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// var r1 = g.next();</span></span><br><span class=\"line\"><span class=\"comment\">// r1.value(function(err, data) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     if (err) return g.throw(err);</span></span><br><span class=\"line\"><span class=\"comment\">//     var r2 = g.next(data);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     r2.value(function(err2, data) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         if (err2) return g.throw(err2);</span></span><br><span class=\"line\"><span class=\"comment\">//         g.next(data);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行方式2：自动管理执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">gen</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> g.throw(err);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = g.next(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.done) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        result.value(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err2, data</span>) </span>&#123;</span><br><span class=\"line\">            next(err2, data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(gen);</span><br><span class=\"line\"><span class=\"comment\">//过1秒输出happer err</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"基于-Promise\"><a href=\"#基于-Promise\" class=\"headerlink\" title=\"基于 Promise\"></a>基于 Promise</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fileName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">\"aa:\"</span> + fileName);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen2 = <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// var f1 = yield readFile('/etc/fstab');</span></span><br><span class=\"line\">        <span class=\"comment\">// var f2 = yield readFile('/etc/shells');</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// console.log(f1.toString());</span></span><br><span class=\"line\">        <span class=\"comment\">// console.log(f2.toString());</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">            a: <span class=\"keyword\">yield</span> readFile(<span class=\"string\">\"/etc/fstab\"</span>),</span><br><span class=\"line\">            b: <span class=\"keyword\">yield</span> readFile(<span class=\"string\">\"/etc/shells\"</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">\"happer err\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run2</span>(<span class=\"params\">gen</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> g.throw(err);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> r = g.next(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r.done) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        r.value</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">                next(<span class=\"literal\">null</span>, data);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">                next(err);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run2(gen2);</span><br><span class=\"line\"><span class=\"comment\">//过2秒输出&#123; a: 'aa:/etc/fstab', b: 'aa:/etc/shells' &#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>generator 函数的两种执行管理方式：</p>\n<h3 id=\"基于-Thunk-函数\"><a href=\"#基于-Thunk-函数\" class=\"headerlink\" title=\"基于 Thunk 函数\"></a>基于 Thunk 函数</h3>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">thunkify</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"built_in\">arguments</span>.length);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; args.length; ++i) &#123;</span><br><span class=\"line\">            args[i] = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> called;</span><br><span class=\"line\"></span><br><span class=\"line\">            args.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>; <span class=\"comment\">//回调函数只执行一次</span></span><br><span class=\"line\">                called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                cb.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fn.apply(ctx, args);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">                cb(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> readBook = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fileName, callback</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"I am die\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">            callback(err);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"string\">\"aa:\"</span> + fileName);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> readBookThunk = thunkify(readBook);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者不借助Thunk函数，手动包装自己的函数</span></span><br><span class=\"line\"><span class=\"comment\">// var readBookThunk = function(fileName) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return function(callback) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         try &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             throw new Error(\"I am die\");</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125; catch (err) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             callback(err);</span></span><br><span class=\"line\"><span class=\"comment\">//             return;</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//         setTimeout(function() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             callback(null, \"aa:\" + fileName);</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;, 1000);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> r1 = <span class=\"keyword\">yield</span> readBookThunk(<span class=\"string\">\"/etc/fstab\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(r1.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> r2 = <span class=\"keyword\">yield</span> readBookThunk(<span class=\"string\">\"/etc/shells\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(r2.toString());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">\"happer err\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行方式1：手动执行</span></span><br><span class=\"line\"><span class=\"comment\">// var g = gen();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// var r1 = g.next();</span></span><br><span class=\"line\"><span class=\"comment\">// r1.value(function(err, data) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     if (err) return g.throw(err);</span></span><br><span class=\"line\"><span class=\"comment\">//     var r2 = g.next(data);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     r2.value(function(err2, data) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         if (err2) return g.throw(err2);</span></span><br><span class=\"line\"><span class=\"comment\">//         g.next(data);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行方式2：自动管理执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">gen</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> g.throw(err);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = g.next(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.done) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        result.value(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err2, data</span>) </span>&#123;</span><br><span class=\"line\">            next(err2, data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(gen);</span><br><span class=\"line\"><span class=\"comment\">//过1秒输出happer err</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"基于-Promise\"><a href=\"#基于-Promise\" class=\"headerlink\" title=\"基于 Promise\"></a>基于 Promise</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fileName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">\"aa:\"</span> + fileName);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen2 = <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// var f1 = yield readFile('/etc/fstab');</span></span><br><span class=\"line\">        <span class=\"comment\">// var f2 = yield readFile('/etc/shells');</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// console.log(f1.toString());</span></span><br><span class=\"line\">        <span class=\"comment\">// console.log(f2.toString());</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">            a: <span class=\"keyword\">yield</span> readFile(<span class=\"string\">\"/etc/fstab\"</span>),</span><br><span class=\"line\">            b: <span class=\"keyword\">yield</span> readFile(<span class=\"string\">\"/etc/shells\"</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">\"happer err\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run2</span>(<span class=\"params\">gen</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> g.throw(err);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> r = g.next(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r.done) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        r.value</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">                next(<span class=\"literal\">null</span>, data);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">                next(err);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run2(gen2);</span><br><span class=\"line\"><span class=\"comment\">//过2秒输出&#123; a: 'aa:/etc/fstab', b: 'aa:/etc/shells' &#125;</span></span><br></pre></td></tr></table></figure>"},{"title":"react-router4 history模式","date":"2019-12-07T09:23:39.000Z","_content":"\nreact-router4的history模式写法:\n\n<!--more-->\n\n```javascript\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\n//......省略，然后在根组件这样写：\n<Router>\n    <Switch>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/user\" exact component={User} />\n      <Route path=\"\" component={() => '404'} />\n    </Switch>\n</Router>\n```\n\n如果某个子组件不是`<Route />`的子组件，但仍想使用像`this.props.history.push()`这样的功能，可以导入`withRouter`,用它包裹你的组件\n```javascript\nimport { withRouter } from 'react-router-dom'\n\nfunction MyChild() {\n    return <div>我是一个没有感情的组件</div>\n}\n\nexport default withRouter(MyChild)\n```\n\n注意，如果你像在组件外的代码比如在store里进行一些跳转等，如果你使用hash模式，这样可以生效：\n```javascript\nimport { createHashHistory } from 'history'\n\nconst history = createHashHistory()\n\n//进行跳转\nhistory.push('/')\n```\n\n但是在history模式里，如果你也这样写：\n\n```javascript\nimport { createBrowserHistory } from 'history'\n\nconst history = createBrowserHistory()\n\n//进行跳转\nhistory.push('/')\n```\n\n`history.push`执行后，地址栏的url会改变，但页面并不会做出改变，我猜可能是组件检测不到路由变动。\n\n这时候可以改成下面这样：\n新建一个history.js文件：\n\n```javascript\nimport { createBrowserHistory } from 'history'\n\nconst history = createBrowserHistory()\n\nexport default history\n```\n\n然后路由配置里修改如下：\n\n```javascript\nimport { Router, Route, Switch } from 'react-router-dom'\nimport history from './history'\n\n//......省略，然后在根组件这样写：\n<Router history={history}>\n    <Switch>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/user\" exact component={User} />\n      <Route path=\"\" component={() => '404'} />\n    </Switch>\n</Router>\n```\n\n虽然官网推荐使用BrowserRouter，但其实也可以像react-router3那样导出Router，给它注入history。\n这样下面的代码就可以生效了：\n```javascript\nimport { createBrowserHistory } from 'history'\n\nconst history = createBrowserHistory()\n\n//进行跳转\nhistory.push('/')\n```\n\n再说说部署到服务器时，nginx的配置：\n\n```shell\nlocation / {\n  try_files $uri $uri/ /index.html;\n}\n```\n这段的意思是如果 URL 匹配不到任何静态资源，则返回index.html页面，这个页面就是你app依赖的页面。\n\n注意，在history模式里，如果你使用create-react-app，不能在package.json里设置 `homepage: '.'` 即设置静态资源读取路径为相对路径。\n如果是hash模式，则无所谓，使用绝对路径或相对路径都可以。\n\n使用react给我感觉就是，你一直在花很多时间搜索解决方案，react在坚持它先进理念的同时，也牺牲了很多便利。相比较而言vue就比较省心，使用起来不用有太多的心智负担。","source":"_posts/react-router4-history模式.md","raw":"---\ntitle: react-router4 history模式\ndate: 2019-12-07 17:23:39\ncategories: 技术\ntags: [前端]\n---\n\nreact-router4的history模式写法:\n\n<!--more-->\n\n```javascript\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\n//......省略，然后在根组件这样写：\n<Router>\n    <Switch>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/user\" exact component={User} />\n      <Route path=\"\" component={() => '404'} />\n    </Switch>\n</Router>\n```\n\n如果某个子组件不是`<Route />`的子组件，但仍想使用像`this.props.history.push()`这样的功能，可以导入`withRouter`,用它包裹你的组件\n```javascript\nimport { withRouter } from 'react-router-dom'\n\nfunction MyChild() {\n    return <div>我是一个没有感情的组件</div>\n}\n\nexport default withRouter(MyChild)\n```\n\n注意，如果你像在组件外的代码比如在store里进行一些跳转等，如果你使用hash模式，这样可以生效：\n```javascript\nimport { createHashHistory } from 'history'\n\nconst history = createHashHistory()\n\n//进行跳转\nhistory.push('/')\n```\n\n但是在history模式里，如果你也这样写：\n\n```javascript\nimport { createBrowserHistory } from 'history'\n\nconst history = createBrowserHistory()\n\n//进行跳转\nhistory.push('/')\n```\n\n`history.push`执行后，地址栏的url会改变，但页面并不会做出改变，我猜可能是组件检测不到路由变动。\n\n这时候可以改成下面这样：\n新建一个history.js文件：\n\n```javascript\nimport { createBrowserHistory } from 'history'\n\nconst history = createBrowserHistory()\n\nexport default history\n```\n\n然后路由配置里修改如下：\n\n```javascript\nimport { Router, Route, Switch } from 'react-router-dom'\nimport history from './history'\n\n//......省略，然后在根组件这样写：\n<Router history={history}>\n    <Switch>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/user\" exact component={User} />\n      <Route path=\"\" component={() => '404'} />\n    </Switch>\n</Router>\n```\n\n虽然官网推荐使用BrowserRouter，但其实也可以像react-router3那样导出Router，给它注入history。\n这样下面的代码就可以生效了：\n```javascript\nimport { createBrowserHistory } from 'history'\n\nconst history = createBrowserHistory()\n\n//进行跳转\nhistory.push('/')\n```\n\n再说说部署到服务器时，nginx的配置：\n\n```shell\nlocation / {\n  try_files $uri $uri/ /index.html;\n}\n```\n这段的意思是如果 URL 匹配不到任何静态资源，则返回index.html页面，这个页面就是你app依赖的页面。\n\n注意，在history模式里，如果你使用create-react-app，不能在package.json里设置 `homepage: '.'` 即设置静态资源读取路径为相对路径。\n如果是hash模式，则无所谓，使用绝对路径或相对路径都可以。\n\n使用react给我感觉就是，你一直在花很多时间搜索解决方案，react在坚持它先进理念的同时，也牺牲了很多便利。相比较而言vue就比较省心，使用起来不用有太多的心智负担。","slug":"react-router4-history模式","published":1,"updated":"2019-12-07T10:15:05.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm62x000e8hspx74oelly","content":"<p>react-router4的history模式写法:</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter <span class=\"keyword\">as</span> Router, Route, Switch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//......省略，然后在根组件这样写：</span></span><br><span class=\"line\">&lt;Router&gt;</span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"/\"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"/user\"</span> exact component=&#123;User&#125; /&gt;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"\"</span> component=&#123;() =&gt; <span class=\"string\">'404'</span>&#125; /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n<p>如果某个子组件不是<code>&lt;Route /&gt;</code>的子组件，但仍想使用像<code>this.props.history.push()</code>这样的功能，可以导入<code>withRouter</code>,用它包裹你的组件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; withRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyChild</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;我是一个没有感情的组件&lt;/div&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withRouter(MyChild)</span><br></pre></td></tr></table></figure></p>\n<p>注意，如果你像在组件外的代码比如在store里进行一些跳转等，如果你使用hash模式，这样可以生效：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createHashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'history'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> history = createHashHistory()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进行跳转</span></span><br><span class=\"line\">history.push(<span class=\"string\">'/'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>但是在history模式里，如果你也这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createBrowserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'history'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> history = createBrowserHistory()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进行跳转</span></span><br><span class=\"line\">history.push(<span class=\"string\">'/'</span>)</span><br></pre></td></tr></table></figure>\n<p><code>history.push</code>执行后，地址栏的url会改变，但页面并不会做出改变，我猜可能是组件检测不到路由变动。</p>\n<p>这时候可以改成下面这样：<br>新建一个history.js文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createBrowserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'history'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> history = createBrowserHistory()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> history</span><br></pre></td></tr></table></figure>\n<p>然后路由配置里修改如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, Switch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> history <span class=\"keyword\">from</span> <span class=\"string\">'./history'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//......省略，然后在根组件这样写：</span></span><br><span class=\"line\">&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"/\"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"/user\"</span> exact component=&#123;User&#125; /&gt;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"\"</span> component=&#123;() =&gt; <span class=\"string\">'404'</span>&#125; /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n<p>虽然官网推荐使用BrowserRouter，但其实也可以像react-router3那样导出Router，给它注入history。<br>这样下面的代码就可以生效了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createBrowserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'history'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> history = createBrowserHistory()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进行跳转</span></span><br><span class=\"line\">history.push(<span class=\"string\">'/'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>再说说部署到服务器时，nginx的配置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">  try_files $uri $uri/ /index.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段的意思是如果 URL 匹配不到任何静态资源，则返回index.html页面，这个页面就是你app依赖的页面。</p>\n<p>注意，在history模式里，如果你使用create-react-app，不能在package.json里设置 <code>homepage: &#39;.&#39;</code> 即设置静态资源读取路径为相对路径。<br>如果是hash模式，则无所谓，使用绝对路径或相对路径都可以。</p>\n<p>使用react给我感觉就是，你一直在花很多时间搜索解决方案，react在坚持它先进理念的同时，也牺牲了很多便利。相比较而言vue就比较省心，使用起来不用有太多的心智负担。</p>\n","site":{"data":{}},"excerpt":"<p>react-router4的history模式写法:</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter <span class=\"keyword\">as</span> Router, Route, Switch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//......省略，然后在根组件这样写：</span></span><br><span class=\"line\">&lt;Router&gt;</span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"/\"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"/user\"</span> exact component=&#123;User&#125; /&gt;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"\"</span> component=&#123;() =&gt; <span class=\"string\">'404'</span>&#125; /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n<p>如果某个子组件不是<code>&lt;Route /&gt;</code>的子组件，但仍想使用像<code>this.props.history.push()</code>这样的功能，可以导入<code>withRouter</code>,用它包裹你的组件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; withRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyChild</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;我是一个没有感情的组件&lt;/div&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withRouter(MyChild)</span><br></pre></td></tr></table></figure></p>\n<p>注意，如果你像在组件外的代码比如在store里进行一些跳转等，如果你使用hash模式，这样可以生效：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createHashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'history'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> history = createHashHistory()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进行跳转</span></span><br><span class=\"line\">history.push(<span class=\"string\">'/'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>但是在history模式里，如果你也这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createBrowserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'history'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> history = createBrowserHistory()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进行跳转</span></span><br><span class=\"line\">history.push(<span class=\"string\">'/'</span>)</span><br></pre></td></tr></table></figure>\n<p><code>history.push</code>执行后，地址栏的url会改变，但页面并不会做出改变，我猜可能是组件检测不到路由变动。</p>\n<p>这时候可以改成下面这样：<br>新建一个history.js文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createBrowserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'history'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> history = createBrowserHistory()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> history</span><br></pre></td></tr></table></figure>\n<p>然后路由配置里修改如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, Switch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> history <span class=\"keyword\">from</span> <span class=\"string\">'./history'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//......省略，然后在根组件这样写：</span></span><br><span class=\"line\">&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"/\"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"/user\"</span> exact component=&#123;User&#125; /&gt;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"\"</span> component=&#123;() =&gt; <span class=\"string\">'404'</span>&#125; /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n<p>虽然官网推荐使用BrowserRouter，但其实也可以像react-router3那样导出Router，给它注入history。<br>这样下面的代码就可以生效了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createBrowserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'history'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> history = createBrowserHistory()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进行跳转</span></span><br><span class=\"line\">history.push(<span class=\"string\">'/'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>再说说部署到服务器时，nginx的配置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">  try_files $uri $uri/ /index.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段的意思是如果 URL 匹配不到任何静态资源，则返回index.html页面，这个页面就是你app依赖的页面。</p>\n<p>注意，在history模式里，如果你使用create-react-app，不能在package.json里设置 <code>homepage: &#39;.&#39;</code> 即设置静态资源读取路径为相对路径。<br>如果是hash模式，则无所谓，使用绝对路径或相对路径都可以。</p>\n<p>使用react给我感觉就是，你一直在花很多时间搜索解决方案，react在坚持它先进理念的同时，也牺牲了很多便利。相比较而言vue就比较省心，使用起来不用有太多的心智负担。</p>"},{"title":"node_redis的一个例子","date":"2018-06-13T11:43:02.000Z","_content":"\n最近在看了不起的 node.js，看得有点仓促，只是涉猎了一遍。但 redis 这一章的代码我觉得写得很巧妙，对我这种 node 新手来说，很值得学习。\n这是一个记录粉丝关注的例子，话不多说，直接看代码。\n\n<!--more-->\n\n首先创建一个 model.js 文件，当然这里是已经安装好 redis 这一模块。\n\n连接 redis\n\n```javascript\nvar redis = require(\"redis\");\n\nclient = redis.createClient(6379, \"127.0.0.1\", {});\n```\n\n创建一个 User 类，并设置一些方法。\n\n```javascript\nfunction User(id, data) {\n    this.id = id;\n    this.data = data;\n}\n\n//查找用户\nUser.find = function(id, fn) {\n    client.hgetall(\"user:\" + id + \":data\", function(err, obj) {\n        if (err) {\n            console.log(err);\n        }\n        fn(null, new User(id, obj)); //把实例对象传给回调函数，才能通过这个实例调用下面的实例方法\n    });\n};\n\n//存储用户\nUser.prototype.save = function(fn) {\n    if (!this.id) {\n        this.id = String(Math.random()).substr(3);\n    }\n    client.hmset(\"user:\" + this.id + \":data\", this.data, fn);\n};\n\n//关注\nUser.prototype.follow = function(user_id, fn) {\n    //console.log(\"user_id:\", \"user:\" + user_id + \":followers\", this.id);\n\n    //multi()表示事务开始，exec(fn)表示开始执行sadd等，fn第一个参数是err,第二个是执行结果如[1,1]，[0,0]（1成功，0失败）\n    client\n        .multi()\n        .sadd(\"user:\" + user_id + \":followers\", this.id)\n        .sadd(\"user:\" + this.id + \":follows\", user_id)\n        .exec(fn);\n};\n\n//取消关注\nUser.prototype.unfollow = function(user_id, fn) {\n    client\n        .multi()\n        .srem(\"user:\" + user_id + \":followers\", this.id)\n        .srem(\"user:\" + this.id + \":follows\", user_id)\n        .exec(fn);\n};\n\n//获取粉丝\nUser.prototype.getFollowers = function(fn) {\n    client.smembers(\"user:\" + this.id + \":followers\", fn);\n};\n\n//获取关注的人\nUser.prototype.getFollows = function(fn) {\n    client.smembers(\"user:\" + this.id + \":follows\", fn);\n};\n\n//获取朋友，即互相关注的人\nUser.prototype.getFriends = function(fn) {\n    client.sinter(\"user:\" + this.id + \":follows\", \"user:\" + this.id + \":followers\", fn);\n};\n\n//输出\nmodule.exports = User;\n```\n\n接下来创建一个 server.js 文件，设置一个初始对象，并创建两个函数。\n\n```javascript\nvar User = require(\"./model\");\n\nvar testUsers = {\n    \"mark@qq.com\": { name: \"Mark Zuck\" },\n    \"bill@gmail.com\": { name: \"Bill Gates\" },\n    \"jeff@163.com\": { name: \"Jeff Bezos\" },\n    \"fred@fox.com\": { name: \"Fred Smith\" }\n};\n\n//创建用户\nfunction create(users, fn) {\n    var total = Object.keys(users).length;\n\n    for (var i in users) {\n        (function(email, data) {\n            var user = new User(email, data);\n            user.save(function(err) {\n                if (err) throw err;\n                --total || fn();\n            });\n        })(i, users[i]);\n    }\n}\n\n//检索用户\nfunction hydrate(users, fn) {\n    var total = Object.keys(users).length;\n\n    for (var i in users) {\n        (function(email) {\n            User.find(email, function(err, user) {\n                if (err) throw err;\n                // console.log(user)\n                users[email] = user;\n                --total || fn();\n            });\n        })(i);\n    }\n}\n```\n\ncreate 函数里面，获取 users 的属性长度，然后循环执行 save，为了确保 save 的值，使用立即执行函数。\n--total|fn()使循环结束后才执行 fn()。\n\n好了，该执行函数了。bill 先关注 jeff，然后打印出 jeff 的粉丝，再打印出 jeff 的朋友。等 jeff 也关注 bill 后，再打印出 jeff 的朋友，看看有什么变化（异步回调真有点烦）。\n\n```javascript\ncreate(testUsers, function() {\n    hydrate(testUsers, function() {\n        console.log(\"testUsers: \", testUsers);\n\n        testUsers[\"bill@gmail.com\"].follow(\"jeff@163.com\", function(err, reply) {\n            if (err) throw err;\n            console.log(\"+ bill followed jeff\");\n\n            testUsers[\"jeff@163.com\"].getFollowers(function(err, users) {\n                if (err) throw err;\n                console.log(\"jeff's followers:\", users);\n\n                testUsers[\"jeff@163.com\"].getFriends(function(err, users) {\n                    if (err) throw err;\n                    console.log(\"jeff's friends:\", users);\n\n                    testUsers[\"jeff@163.com\"].follow(\"bill@gmail.com\", function(err, reply) {\n                        if (err) throw err;\n                        console.log(\"+ jeff followed bill\");\n\n                        testUsers[\"jeff@163.com\"].getFriends(function(err, users) {\n                            if (err) throw err;\n                            console.log(\"jeff's friends:\", users);\n\n                            process.exit(0);\n                        });\n                    });\n                });\n            });\n        });\n    });\n});\n```\n\n结果如下：\n\n```\nuser_id: user:jeff@163.com:followers bill@gmail.com\n+ bill followed jeff\njeff's followers [ 'bill@gmail.com' ]\njeff's friends: []\nuser_id: user:bill@gmail.com:followers jeff@163.com\n+ jeff followed bill\njeff's friends: [ 'bill@gmail.com' ]\n```\n","source":"_posts/node-redis.md","raw":"---\ntitle: node_redis的一个例子\ndate: 2018-06-13 19:43:02\ncategories: 技术\ntags: node\n---\n\n最近在看了不起的 node.js，看得有点仓促，只是涉猎了一遍。但 redis 这一章的代码我觉得写得很巧妙，对我这种 node 新手来说，很值得学习。\n这是一个记录粉丝关注的例子，话不多说，直接看代码。\n\n<!--more-->\n\n首先创建一个 model.js 文件，当然这里是已经安装好 redis 这一模块。\n\n连接 redis\n\n```javascript\nvar redis = require(\"redis\");\n\nclient = redis.createClient(6379, \"127.0.0.1\", {});\n```\n\n创建一个 User 类，并设置一些方法。\n\n```javascript\nfunction User(id, data) {\n    this.id = id;\n    this.data = data;\n}\n\n//查找用户\nUser.find = function(id, fn) {\n    client.hgetall(\"user:\" + id + \":data\", function(err, obj) {\n        if (err) {\n            console.log(err);\n        }\n        fn(null, new User(id, obj)); //把实例对象传给回调函数，才能通过这个实例调用下面的实例方法\n    });\n};\n\n//存储用户\nUser.prototype.save = function(fn) {\n    if (!this.id) {\n        this.id = String(Math.random()).substr(3);\n    }\n    client.hmset(\"user:\" + this.id + \":data\", this.data, fn);\n};\n\n//关注\nUser.prototype.follow = function(user_id, fn) {\n    //console.log(\"user_id:\", \"user:\" + user_id + \":followers\", this.id);\n\n    //multi()表示事务开始，exec(fn)表示开始执行sadd等，fn第一个参数是err,第二个是执行结果如[1,1]，[0,0]（1成功，0失败）\n    client\n        .multi()\n        .sadd(\"user:\" + user_id + \":followers\", this.id)\n        .sadd(\"user:\" + this.id + \":follows\", user_id)\n        .exec(fn);\n};\n\n//取消关注\nUser.prototype.unfollow = function(user_id, fn) {\n    client\n        .multi()\n        .srem(\"user:\" + user_id + \":followers\", this.id)\n        .srem(\"user:\" + this.id + \":follows\", user_id)\n        .exec(fn);\n};\n\n//获取粉丝\nUser.prototype.getFollowers = function(fn) {\n    client.smembers(\"user:\" + this.id + \":followers\", fn);\n};\n\n//获取关注的人\nUser.prototype.getFollows = function(fn) {\n    client.smembers(\"user:\" + this.id + \":follows\", fn);\n};\n\n//获取朋友，即互相关注的人\nUser.prototype.getFriends = function(fn) {\n    client.sinter(\"user:\" + this.id + \":follows\", \"user:\" + this.id + \":followers\", fn);\n};\n\n//输出\nmodule.exports = User;\n```\n\n接下来创建一个 server.js 文件，设置一个初始对象，并创建两个函数。\n\n```javascript\nvar User = require(\"./model\");\n\nvar testUsers = {\n    \"mark@qq.com\": { name: \"Mark Zuck\" },\n    \"bill@gmail.com\": { name: \"Bill Gates\" },\n    \"jeff@163.com\": { name: \"Jeff Bezos\" },\n    \"fred@fox.com\": { name: \"Fred Smith\" }\n};\n\n//创建用户\nfunction create(users, fn) {\n    var total = Object.keys(users).length;\n\n    for (var i in users) {\n        (function(email, data) {\n            var user = new User(email, data);\n            user.save(function(err) {\n                if (err) throw err;\n                --total || fn();\n            });\n        })(i, users[i]);\n    }\n}\n\n//检索用户\nfunction hydrate(users, fn) {\n    var total = Object.keys(users).length;\n\n    for (var i in users) {\n        (function(email) {\n            User.find(email, function(err, user) {\n                if (err) throw err;\n                // console.log(user)\n                users[email] = user;\n                --total || fn();\n            });\n        })(i);\n    }\n}\n```\n\ncreate 函数里面，获取 users 的属性长度，然后循环执行 save，为了确保 save 的值，使用立即执行函数。\n--total|fn()使循环结束后才执行 fn()。\n\n好了，该执行函数了。bill 先关注 jeff，然后打印出 jeff 的粉丝，再打印出 jeff 的朋友。等 jeff 也关注 bill 后，再打印出 jeff 的朋友，看看有什么变化（异步回调真有点烦）。\n\n```javascript\ncreate(testUsers, function() {\n    hydrate(testUsers, function() {\n        console.log(\"testUsers: \", testUsers);\n\n        testUsers[\"bill@gmail.com\"].follow(\"jeff@163.com\", function(err, reply) {\n            if (err) throw err;\n            console.log(\"+ bill followed jeff\");\n\n            testUsers[\"jeff@163.com\"].getFollowers(function(err, users) {\n                if (err) throw err;\n                console.log(\"jeff's followers:\", users);\n\n                testUsers[\"jeff@163.com\"].getFriends(function(err, users) {\n                    if (err) throw err;\n                    console.log(\"jeff's friends:\", users);\n\n                    testUsers[\"jeff@163.com\"].follow(\"bill@gmail.com\", function(err, reply) {\n                        if (err) throw err;\n                        console.log(\"+ jeff followed bill\");\n\n                        testUsers[\"jeff@163.com\"].getFriends(function(err, users) {\n                            if (err) throw err;\n                            console.log(\"jeff's friends:\", users);\n\n                            process.exit(0);\n                        });\n                    });\n                });\n            });\n        });\n    });\n});\n```\n\n结果如下：\n\n```\nuser_id: user:jeff@163.com:followers bill@gmail.com\n+ bill followed jeff\njeff's followers [ 'bill@gmail.com' ]\njeff's friends: []\nuser_id: user:bill@gmail.com:followers jeff@163.com\n+ jeff followed bill\njeff's friends: [ 'bill@gmail.com' ]\n```\n","slug":"node-redis","published":1,"updated":"2019-05-17T07:34:34.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm633000i8hsp8vlklvb6","content":"<p>最近在看了不起的 node.js，看得有点仓促，只是涉猎了一遍。但 redis 这一章的代码我觉得写得很巧妙，对我这种 node 新手来说，很值得学习。<br>这是一个记录粉丝关注的例子，话不多说，直接看代码。</p>\n<a id=\"more\"></a>\n<p>首先创建一个 model.js 文件，当然这里是已经安装好 redis 这一模块。</p>\n<p>连接 redis</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">client = redis.createClient(<span class=\"number\">6379</span>, <span class=\"string\">\"127.0.0.1\"</span>, &#123;&#125;);</span><br></pre></td></tr></table></figure>\n<p>创建一个 User 类，并设置一些方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">id, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查找用户</span></span><br><span class=\"line\">User.find = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, fn</span>) </span>&#123;</span><br><span class=\"line\">    client.hgetall(<span class=\"string\">\"user:\"</span> + id + <span class=\"string\">\":data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, obj</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fn(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> User(id, obj)); <span class=\"comment\">//把实例对象传给回调函数，才能通过这个实例调用下面的实例方法</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//存储用户</span></span><br><span class=\"line\">User.prototype.save = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.id) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = <span class=\"built_in\">String</span>(<span class=\"built_in\">Math</span>.random()).substr(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    client.hmset(<span class=\"string\">\"user:\"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\":data\"</span>, <span class=\"keyword\">this</span>.data, fn);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//关注</span></span><br><span class=\"line\">User.prototype.follow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user_id, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//console.log(\"user_id:\", \"user:\" + user_id + \":followers\", this.id);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//multi()表示事务开始，exec(fn)表示开始执行sadd等，fn第一个参数是err,第二个是执行结果如[1,1]，[0,0]（1成功，0失败）</span></span><br><span class=\"line\">    client</span><br><span class=\"line\">        .multi()</span><br><span class=\"line\">        .sadd(<span class=\"string\">\"user:\"</span> + user_id + <span class=\"string\">\":followers\"</span>, <span class=\"keyword\">this</span>.id)</span><br><span class=\"line\">        .sadd(<span class=\"string\">\"user:\"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\":follows\"</span>, user_id)</span><br><span class=\"line\">        .exec(fn);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取消关注</span></span><br><span class=\"line\">User.prototype.unfollow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user_id, fn</span>) </span>&#123;</span><br><span class=\"line\">    client</span><br><span class=\"line\">        .multi()</span><br><span class=\"line\">        .srem(<span class=\"string\">\"user:\"</span> + user_id + <span class=\"string\">\":followers\"</span>, <span class=\"keyword\">this</span>.id)</span><br><span class=\"line\">        .srem(<span class=\"string\">\"user:\"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\":follows\"</span>, user_id)</span><br><span class=\"line\">        .exec(fn);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取粉丝</span></span><br><span class=\"line\">User.prototype.getFollowers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    client.smembers(<span class=\"string\">\"user:\"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\":followers\"</span>, fn);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取关注的人</span></span><br><span class=\"line\">User.prototype.getFollows = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    client.smembers(<span class=\"string\">\"user:\"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\":follows\"</span>, fn);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取朋友，即互相关注的人</span></span><br><span class=\"line\">User.prototype.getFriends = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    client.sinter(<span class=\"string\">\"user:\"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\":follows\"</span>, <span class=\"string\">\"user:\"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\":followers\"</span>, fn);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = User;</span><br></pre></td></tr></table></figure>\n<p>接下来创建一个 server.js 文件，设置一个初始对象，并创建两个函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">\"./model\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> testUsers = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"mark@qq.com\"</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Mark Zuck\"</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"bill@gmail.com\"</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Bill Gates\"</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"jeff@163.com\"</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Jeff Bezos\"</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"fred@fox.com\"</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Fred Smith\"</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建用户</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\">users, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total = <span class=\"built_in\">Object</span>.keys(users).length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> users) &#123;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">email, data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(email, data);</span><br><span class=\"line\">            user.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                --total || fn();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)(i, users[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//检索用户</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hydrate</span>(<span class=\"params\">users, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total = <span class=\"built_in\">Object</span>.keys(users).length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> users) &#123;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">email</span>) </span>&#123;</span><br><span class=\"line\">            User.find(email, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, user</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                <span class=\"comment\">// console.log(user)</span></span><br><span class=\"line\">                users[email] = user;</span><br><span class=\"line\">                --total || fn();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>create 函数里面，获取 users 的属性长度，然后循环执行 save，为了确保 save 的值，使用立即执行函数。<br>–total|fn()使循环结束后才执行 fn()。</p>\n<p>好了，该执行函数了。bill 先关注 jeff，然后打印出 jeff 的粉丝，再打印出 jeff 的朋友。等 jeff 也关注 bill 后，再打印出 jeff 的朋友，看看有什么变化（异步回调真有点烦）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create(testUsers, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    hydrate(testUsers, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"testUsers: \"</span>, testUsers);</span><br><span class=\"line\"></span><br><span class=\"line\">        testUsers[<span class=\"string\">\"bill@gmail.com\"</span>].follow(<span class=\"string\">\"jeff@163.com\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, reply</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"+ bill followed jeff\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            testUsers[<span class=\"string\">\"jeff@163.com\"</span>].getFollowers(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, users</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"jeff's followers:\"</span>, users);</span><br><span class=\"line\"></span><br><span class=\"line\">                testUsers[<span class=\"string\">\"jeff@163.com\"</span>].getFriends(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, users</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"jeff's friends:\"</span>, users);</span><br><span class=\"line\"></span><br><span class=\"line\">                    testUsers[<span class=\"string\">\"jeff@163.com\"</span>].follow(<span class=\"string\">\"bill@gmail.com\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, reply</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"+ jeff followed bill\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                        testUsers[<span class=\"string\">\"jeff@163.com\"</span>].getFriends(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, users</span>) </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"jeff's friends:\"</span>, users);</span><br><span class=\"line\"></span><br><span class=\"line\">                            process.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user_id: user:jeff@163.com:followers bill@gmail.com</span><br><span class=\"line\">+ bill followed jeff</span><br><span class=\"line\">jeff&apos;s followers [ &apos;bill@gmail.com&apos; ]</span><br><span class=\"line\">jeff&apos;s friends: []</span><br><span class=\"line\">user_id: user:bill@gmail.com:followers jeff@163.com</span><br><span class=\"line\">+ jeff followed bill</span><br><span class=\"line\">jeff&apos;s friends: [ &apos;bill@gmail.com&apos; ]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>最近在看了不起的 node.js，看得有点仓促，只是涉猎了一遍。但 redis 这一章的代码我觉得写得很巧妙，对我这种 node 新手来说，很值得学习。<br>这是一个记录粉丝关注的例子，话不多说，直接看代码。</p>","more":"<p>首先创建一个 model.js 文件，当然这里是已经安装好 redis 这一模块。</p>\n<p>连接 redis</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">client = redis.createClient(<span class=\"number\">6379</span>, <span class=\"string\">\"127.0.0.1\"</span>, &#123;&#125;);</span><br></pre></td></tr></table></figure>\n<p>创建一个 User 类，并设置一些方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">id, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查找用户</span></span><br><span class=\"line\">User.find = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, fn</span>) </span>&#123;</span><br><span class=\"line\">    client.hgetall(<span class=\"string\">\"user:\"</span> + id + <span class=\"string\">\":data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, obj</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fn(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> User(id, obj)); <span class=\"comment\">//把实例对象传给回调函数，才能通过这个实例调用下面的实例方法</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//存储用户</span></span><br><span class=\"line\">User.prototype.save = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.id) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = <span class=\"built_in\">String</span>(<span class=\"built_in\">Math</span>.random()).substr(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    client.hmset(<span class=\"string\">\"user:\"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\":data\"</span>, <span class=\"keyword\">this</span>.data, fn);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//关注</span></span><br><span class=\"line\">User.prototype.follow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user_id, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//console.log(\"user_id:\", \"user:\" + user_id + \":followers\", this.id);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//multi()表示事务开始，exec(fn)表示开始执行sadd等，fn第一个参数是err,第二个是执行结果如[1,1]，[0,0]（1成功，0失败）</span></span><br><span class=\"line\">    client</span><br><span class=\"line\">        .multi()</span><br><span class=\"line\">        .sadd(<span class=\"string\">\"user:\"</span> + user_id + <span class=\"string\">\":followers\"</span>, <span class=\"keyword\">this</span>.id)</span><br><span class=\"line\">        .sadd(<span class=\"string\">\"user:\"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\":follows\"</span>, user_id)</span><br><span class=\"line\">        .exec(fn);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取消关注</span></span><br><span class=\"line\">User.prototype.unfollow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user_id, fn</span>) </span>&#123;</span><br><span class=\"line\">    client</span><br><span class=\"line\">        .multi()</span><br><span class=\"line\">        .srem(<span class=\"string\">\"user:\"</span> + user_id + <span class=\"string\">\":followers\"</span>, <span class=\"keyword\">this</span>.id)</span><br><span class=\"line\">        .srem(<span class=\"string\">\"user:\"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\":follows\"</span>, user_id)</span><br><span class=\"line\">        .exec(fn);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取粉丝</span></span><br><span class=\"line\">User.prototype.getFollowers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    client.smembers(<span class=\"string\">\"user:\"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\":followers\"</span>, fn);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取关注的人</span></span><br><span class=\"line\">User.prototype.getFollows = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    client.smembers(<span class=\"string\">\"user:\"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\":follows\"</span>, fn);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取朋友，即互相关注的人</span></span><br><span class=\"line\">User.prototype.getFriends = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    client.sinter(<span class=\"string\">\"user:\"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\":follows\"</span>, <span class=\"string\">\"user:\"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\":followers\"</span>, fn);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = User;</span><br></pre></td></tr></table></figure>\n<p>接下来创建一个 server.js 文件，设置一个初始对象，并创建两个函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">\"./model\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> testUsers = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"mark@qq.com\"</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Mark Zuck\"</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"bill@gmail.com\"</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Bill Gates\"</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"jeff@163.com\"</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Jeff Bezos\"</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"fred@fox.com\"</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Fred Smith\"</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建用户</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\">users, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total = <span class=\"built_in\">Object</span>.keys(users).length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> users) &#123;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">email, data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(email, data);</span><br><span class=\"line\">            user.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                --total || fn();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)(i, users[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//检索用户</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hydrate</span>(<span class=\"params\">users, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total = <span class=\"built_in\">Object</span>.keys(users).length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> users) &#123;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">email</span>) </span>&#123;</span><br><span class=\"line\">            User.find(email, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, user</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                <span class=\"comment\">// console.log(user)</span></span><br><span class=\"line\">                users[email] = user;</span><br><span class=\"line\">                --total || fn();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>create 函数里面，获取 users 的属性长度，然后循环执行 save，为了确保 save 的值，使用立即执行函数。<br>–total|fn()使循环结束后才执行 fn()。</p>\n<p>好了，该执行函数了。bill 先关注 jeff，然后打印出 jeff 的粉丝，再打印出 jeff 的朋友。等 jeff 也关注 bill 后，再打印出 jeff 的朋友，看看有什么变化（异步回调真有点烦）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create(testUsers, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    hydrate(testUsers, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"testUsers: \"</span>, testUsers);</span><br><span class=\"line\"></span><br><span class=\"line\">        testUsers[<span class=\"string\">\"bill@gmail.com\"</span>].follow(<span class=\"string\">\"jeff@163.com\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, reply</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"+ bill followed jeff\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            testUsers[<span class=\"string\">\"jeff@163.com\"</span>].getFollowers(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, users</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"jeff's followers:\"</span>, users);</span><br><span class=\"line\"></span><br><span class=\"line\">                testUsers[<span class=\"string\">\"jeff@163.com\"</span>].getFriends(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, users</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"jeff's friends:\"</span>, users);</span><br><span class=\"line\"></span><br><span class=\"line\">                    testUsers[<span class=\"string\">\"jeff@163.com\"</span>].follow(<span class=\"string\">\"bill@gmail.com\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, reply</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"+ jeff followed bill\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                        testUsers[<span class=\"string\">\"jeff@163.com\"</span>].getFriends(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, users</span>) </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"jeff's friends:\"</span>, users);</span><br><span class=\"line\"></span><br><span class=\"line\">                            process.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user_id: user:jeff@163.com:followers bill@gmail.com</span><br><span class=\"line\">+ bill followed jeff</span><br><span class=\"line\">jeff&apos;s followers [ &apos;bill@gmail.com&apos; ]</span><br><span class=\"line\">jeff&apos;s friends: []</span><br><span class=\"line\">user_id: user:bill@gmail.com:followers jeff@163.com</span><br><span class=\"line\">+ jeff followed bill</span><br><span class=\"line\">jeff&apos;s friends: [ &apos;bill@gmail.com&apos; ]</span><br></pre></td></tr></table></figure>"},{"title":"react笔记","date":"2020-04-08T09:05:41.000Z","_content":"- 尽量不要使用props来派生出state，这样会导致props更新但state不更新。如实在要但又要保持两者同步更新，在静态方法`getDerivedStateFromProps`更新state\n- 保持单一数据量，例如不要使用props来派生出state，然后组件内部又setState来修改state。\n- getDerivedStateFromProps和componentWillReceiveProps不只是在props发生变化时才执行，只要父组件重新渲染，就会执行，可以使用shouldComponentUpdate来减少重复渲染","source":"_posts/react笔记.md","raw":"---\ntitle: react笔记\ndate: 2020-04-08 17:05:41\ncategories: 技术\ntags: 前端\n---\n- 尽量不要使用props来派生出state，这样会导致props更新但state不更新。如实在要但又要保持两者同步更新，在静态方法`getDerivedStateFromProps`更新state\n- 保持单一数据量，例如不要使用props来派生出state，然后组件内部又setState来修改state。\n- getDerivedStateFromProps和componentWillReceiveProps不只是在props发生变化时才执行，只要父组件重新渲染，就会执行，可以使用shouldComponentUpdate来减少重复渲染","slug":"react笔记","published":1,"updated":"2020-04-08T09:22:36.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm637000l8hsp5wm0x5ft","content":"<ul>\n<li>尽量不要使用props来派生出state，这样会导致props更新但state不更新。如实在要但又要保持两者同步更新，在静态方法<code>getDerivedStateFromProps</code>更新state</li>\n<li>保持单一数据量，例如不要使用props来派生出state，然后组件内部又setState来修改state。</li>\n<li>getDerivedStateFromProps和componentWillReceiveProps不只是在props发生变化时才执行，只要父组件重新渲染，就会执行，可以使用shouldComponentUpdate来减少重复渲染</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>尽量不要使用props来派生出state，这样会导致props更新但state不更新。如实在要但又要保持两者同步更新，在静态方法<code>getDerivedStateFromProps</code>更新state</li>\n<li>保持单一数据量，例如不要使用props来派生出state，然后组件内部又setState来修改state。</li>\n<li>getDerivedStateFromProps和componentWillReceiveProps不只是在props发生变化时才执行，只要父组件重新渲染，就会执行，可以使用shouldComponentUpdate来减少重复渲染</li>\n</ul>\n"},{"title":"vue项目代码规范和格式化神器","date":"2018-12-15T11:08:24.000Z","_content":"\n&emsp;&emsp;最近用 vue 做了几个很小的活动页。越来越觉得不错，文档写得非常好，生态环境现状也很不错了。\n&emsp;&emsp;对于团队间的代码规范，vue 也有一个插件 vuter，配合 eslint、prettier，从此妈妈再也不用担心代码写的乱七八糟了。\n&emsp;&emsp;配置也不麻烦，我搭配的编辑器是 vs code，也是一大神器。下面记录下配置详情。\n\n<!--more-->\n\n&emsp;&emsp;首先在 vue 项目初始化的时候选择手动配置，然后在 Linter/Formatter 选择 ESlint + Prettier。\n&emsp;&emsp;然后在 vscode 安装 eslint、prettier、vuter。vuter 是 vue 配合 vscode 的一个插件。虽然 eslint 可以处理 vue 文件了，但却跟 prettier 的格式化冲突，因为 prettier 不知道这是什么东西。安装了 vetur 插件后，prettier 知道.vue 原来是一个 html 格式文件的，但依然没办法很好的格式化。\n&emsp;&emsp;prettier 覆盖 vscode 默认格式化快捷键，但没有针对 eslint 配置进行格式化，所以需要单独配置用户设置开启。\n&emsp;&emsp;找到设置菜单，在右侧用户配置中添加 \"prettier.eslintIntegration\": true 开启 eslint 支持。\n&emsp;&emsp;具体配置如下：\n\n```javascript\n\"prettier.eslintIntegration\": true,\n\"eslint.autoFixOnSave\": true, //保存时使用自动格式化\n    \"eslint.validate\": [\n        \"javascript\",\n        \"javascriptreact\",\n         {\n          \"language\": \"vue\", //添加vue文件校验\n          \"autoFix\": true //vue文件保存时使用自动格式化\n        },\n        \"html\"\n    ]\n```\n\n&emsp;&emsp;然后添加.prettierrc 配置文件，设置你自己的规则，比如我是这样设置：\n\n```javascript\n{\n  \"trailingComma\": \"none\", //对象最后不带,\n  \"tabWidth\": 4,\n  \"semi\": false, //不分号\n  \"singleQuote\": true\n}\n```\n\n&emsp;&emsp;然后就可以保存时自动格式化成你自己的规则。\n&emsp;&emsp;不过还有问题，刚才开启的\"prettier.eslintIntegration\": true 只是针对.js 文件的，而不是针对.vue 文件。所以你的 vue 文件的 html 部分没有被格式化。所以要配置 vetur 对 html 的格式化。vetur 就是把.vue 文件中的 html+script+style 3 部分拆分，然后交给对应的语言处理器去处理。我们设置 html 部分使用 js-beautify-html 插件格式化。\n\n```javascript\n// 使用 js-beautify-html 插件格式化 html\n\"vetur.format.defaultFormatter.html\": \"js-beautify-html\",\n// 格式化插件的配置\n\"vetur.format.defaultFormatterOptions\": {\n  \"js-beautify-html\": {\n    // 属性强制折行对齐\n    \"wrap_attributes\": \"force-aligned\"\n    //或者设置为'auto'，自动分行\n    //\"wrap_line_length\": 120,\n    //\"wrap_attributes\": \"auto\" //自动检测这行到了120字符就换行\n  }\n}\n\"editor.formatOnSave\": true //每次保存的时候自动格式化(这个设置为true才起作用，但网上一些教程好像没说要)\n```\n\n&emsp;&emsp;好了，可以愉快地工作了。\n","source":"_posts/vue项目代码规范和格式化神器.md","raw":"---\ntitle: vue项目代码规范和格式化神器\ndate: 2018-12-15 19:08:24\ncategories: 技术\ntags: [工具]\n---\n\n&emsp;&emsp;最近用 vue 做了几个很小的活动页。越来越觉得不错，文档写得非常好，生态环境现状也很不错了。\n&emsp;&emsp;对于团队间的代码规范，vue 也有一个插件 vuter，配合 eslint、prettier，从此妈妈再也不用担心代码写的乱七八糟了。\n&emsp;&emsp;配置也不麻烦，我搭配的编辑器是 vs code，也是一大神器。下面记录下配置详情。\n\n<!--more-->\n\n&emsp;&emsp;首先在 vue 项目初始化的时候选择手动配置，然后在 Linter/Formatter 选择 ESlint + Prettier。\n&emsp;&emsp;然后在 vscode 安装 eslint、prettier、vuter。vuter 是 vue 配合 vscode 的一个插件。虽然 eslint 可以处理 vue 文件了，但却跟 prettier 的格式化冲突，因为 prettier 不知道这是什么东西。安装了 vetur 插件后，prettier 知道.vue 原来是一个 html 格式文件的，但依然没办法很好的格式化。\n&emsp;&emsp;prettier 覆盖 vscode 默认格式化快捷键，但没有针对 eslint 配置进行格式化，所以需要单独配置用户设置开启。\n&emsp;&emsp;找到设置菜单，在右侧用户配置中添加 \"prettier.eslintIntegration\": true 开启 eslint 支持。\n&emsp;&emsp;具体配置如下：\n\n```javascript\n\"prettier.eslintIntegration\": true,\n\"eslint.autoFixOnSave\": true, //保存时使用自动格式化\n    \"eslint.validate\": [\n        \"javascript\",\n        \"javascriptreact\",\n         {\n          \"language\": \"vue\", //添加vue文件校验\n          \"autoFix\": true //vue文件保存时使用自动格式化\n        },\n        \"html\"\n    ]\n```\n\n&emsp;&emsp;然后添加.prettierrc 配置文件，设置你自己的规则，比如我是这样设置：\n\n```javascript\n{\n  \"trailingComma\": \"none\", //对象最后不带,\n  \"tabWidth\": 4,\n  \"semi\": false, //不分号\n  \"singleQuote\": true\n}\n```\n\n&emsp;&emsp;然后就可以保存时自动格式化成你自己的规则。\n&emsp;&emsp;不过还有问题，刚才开启的\"prettier.eslintIntegration\": true 只是针对.js 文件的，而不是针对.vue 文件。所以你的 vue 文件的 html 部分没有被格式化。所以要配置 vetur 对 html 的格式化。vetur 就是把.vue 文件中的 html+script+style 3 部分拆分，然后交给对应的语言处理器去处理。我们设置 html 部分使用 js-beautify-html 插件格式化。\n\n```javascript\n// 使用 js-beautify-html 插件格式化 html\n\"vetur.format.defaultFormatter.html\": \"js-beautify-html\",\n// 格式化插件的配置\n\"vetur.format.defaultFormatterOptions\": {\n  \"js-beautify-html\": {\n    // 属性强制折行对齐\n    \"wrap_attributes\": \"force-aligned\"\n    //或者设置为'auto'，自动分行\n    //\"wrap_line_length\": 120,\n    //\"wrap_attributes\": \"auto\" //自动检测这行到了120字符就换行\n  }\n}\n\"editor.formatOnSave\": true //每次保存的时候自动格式化(这个设置为true才起作用，但网上一些教程好像没说要)\n```\n\n&emsp;&emsp;好了，可以愉快地工作了。\n","slug":"vue项目代码规范和格式化神器","published":1,"updated":"2019-05-17T06:28:34.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm63d000p8hsp22mgprxw","content":"<p>&emsp;&emsp;最近用 vue 做了几个很小的活动页。越来越觉得不错，文档写得非常好，生态环境现状也很不错了。<br>&emsp;&emsp;对于团队间的代码规范，vue 也有一个插件 vuter，配合 eslint、prettier，从此妈妈再也不用担心代码写的乱七八糟了。<br>&emsp;&emsp;配置也不麻烦，我搭配的编辑器是 vs code，也是一大神器。下面记录下配置详情。</p>\n<a id=\"more\"></a>\n<p>&emsp;&emsp;首先在 vue 项目初始化的时候选择手动配置，然后在 Linter/Formatter 选择 ESlint + Prettier。<br>&emsp;&emsp;然后在 vscode 安装 eslint、prettier、vuter。vuter 是 vue 配合 vscode 的一个插件。虽然 eslint 可以处理 vue 文件了，但却跟 prettier 的格式化冲突，因为 prettier 不知道这是什么东西。安装了 vetur 插件后，prettier 知道.vue 原来是一个 html 格式文件的，但依然没办法很好的格式化。<br>&emsp;&emsp;prettier 覆盖 vscode 默认格式化快捷键，但没有针对 eslint 配置进行格式化，所以需要单独配置用户设置开启。<br>&emsp;&emsp;找到设置菜单，在右侧用户配置中添加 “prettier.eslintIntegration”: true 开启 eslint 支持。<br>&emsp;&emsp;具体配置如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"prettier.eslintIntegration\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//保存时使用自动格式化</span></span><br><span class=\"line\">    <span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">          <span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>, <span class=\"comment\">//添加vue文件校验</span></span><br><span class=\"line\">          <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span> <span class=\"comment\">//vue文件保存时使用自动格式化</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"html\"</span></span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;然后添加.prettierrc 配置文件，设置你自己的规则，比如我是这样设置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"trailingComma\"</span>: <span class=\"string\">\"none\"</span>, <span class=\"comment\">//对象最后不带,</span></span><br><span class=\"line\">  <span class=\"string\">\"tabWidth\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"string\">\"semi\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//不分号</span></span><br><span class=\"line\">  <span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;然后就可以保存时自动格式化成你自己的规则。<br>&emsp;&emsp;不过还有问题，刚才开启的”prettier.eslintIntegration”: true 只是针对.js 文件的，而不是针对.vue 文件。所以你的 vue 文件的 html 部分没有被格式化。所以要配置 vetur 对 html 的格式化。vetur 就是把.vue 文件中的 html+script+style 3 部分拆分，然后交给对应的语言处理器去处理。我们设置 html 部分使用 js-beautify-html 插件格式化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 js-beautify-html 插件格式化 html</span></span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatter.html\"</span>: <span class=\"string\">\"js-beautify-html\"</span>,</span><br><span class=\"line\"><span class=\"comment\">// 格式化插件的配置</span></span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"js-beautify-html\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性强制折行对齐</span></span><br><span class=\"line\">    <span class=\"string\">\"wrap_attributes\"</span>: <span class=\"string\">\"force-aligned\"</span></span><br><span class=\"line\">    <span class=\"comment\">//或者设置为'auto'，自动分行</span></span><br><span class=\"line\">    <span class=\"comment\">//\"wrap_line_length\": 120,</span></span><br><span class=\"line\">    <span class=\"comment\">//\"wrap_attributes\": \"auto\" //自动检测这行到了120字符就换行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">\"editor.formatOnSave\"</span>: <span class=\"literal\">true</span> <span class=\"comment\">//每次保存的时候自动格式化(这个设置为true才起作用，但网上一些教程好像没说要)</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;好了，可以愉快地工作了。</p>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;最近用 vue 做了几个很小的活动页。越来越觉得不错，文档写得非常好，生态环境现状也很不错了。<br>&emsp;&emsp;对于团队间的代码规范，vue 也有一个插件 vuter，配合 eslint、prettier，从此妈妈再也不用担心代码写的乱七八糟了。<br>&emsp;&emsp;配置也不麻烦，我搭配的编辑器是 vs code，也是一大神器。下面记录下配置详情。</p>","more":"<p>&emsp;&emsp;首先在 vue 项目初始化的时候选择手动配置，然后在 Linter/Formatter 选择 ESlint + Prettier。<br>&emsp;&emsp;然后在 vscode 安装 eslint、prettier、vuter。vuter 是 vue 配合 vscode 的一个插件。虽然 eslint 可以处理 vue 文件了，但却跟 prettier 的格式化冲突，因为 prettier 不知道这是什么东西。安装了 vetur 插件后，prettier 知道.vue 原来是一个 html 格式文件的，但依然没办法很好的格式化。<br>&emsp;&emsp;prettier 覆盖 vscode 默认格式化快捷键，但没有针对 eslint 配置进行格式化，所以需要单独配置用户设置开启。<br>&emsp;&emsp;找到设置菜单，在右侧用户配置中添加 “prettier.eslintIntegration”: true 开启 eslint 支持。<br>&emsp;&emsp;具体配置如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"prettier.eslintIntegration\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//保存时使用自动格式化</span></span><br><span class=\"line\">    <span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">          <span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>, <span class=\"comment\">//添加vue文件校验</span></span><br><span class=\"line\">          <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span> <span class=\"comment\">//vue文件保存时使用自动格式化</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"html\"</span></span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;然后添加.prettierrc 配置文件，设置你自己的规则，比如我是这样设置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"trailingComma\"</span>: <span class=\"string\">\"none\"</span>, <span class=\"comment\">//对象最后不带,</span></span><br><span class=\"line\">  <span class=\"string\">\"tabWidth\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"string\">\"semi\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//不分号</span></span><br><span class=\"line\">  <span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;然后就可以保存时自动格式化成你自己的规则。<br>&emsp;&emsp;不过还有问题，刚才开启的”prettier.eslintIntegration”: true 只是针对.js 文件的，而不是针对.vue 文件。所以你的 vue 文件的 html 部分没有被格式化。所以要配置 vetur 对 html 的格式化。vetur 就是把.vue 文件中的 html+script+style 3 部分拆分，然后交给对应的语言处理器去处理。我们设置 html 部分使用 js-beautify-html 插件格式化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 js-beautify-html 插件格式化 html</span></span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatter.html\"</span>: <span class=\"string\">\"js-beautify-html\"</span>,</span><br><span class=\"line\"><span class=\"comment\">// 格式化插件的配置</span></span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"js-beautify-html\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性强制折行对齐</span></span><br><span class=\"line\">    <span class=\"string\">\"wrap_attributes\"</span>: <span class=\"string\">\"force-aligned\"</span></span><br><span class=\"line\">    <span class=\"comment\">//或者设置为'auto'，自动分行</span></span><br><span class=\"line\">    <span class=\"comment\">//\"wrap_line_length\": 120,</span></span><br><span class=\"line\">    <span class=\"comment\">//\"wrap_attributes\": \"auto\" //自动检测这行到了120字符就换行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">\"editor.formatOnSave\"</span>: <span class=\"literal\">true</span> <span class=\"comment\">//每次保存的时候自动格式化(这个设置为true才起作用，但网上一些教程好像没说要)</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;好了，可以愉快地工作了。</p>"},{"title":"两种遍历算法","date":"2019-07-31T10:22:01.000Z","_content":"\n记录一下深度优先遍历和广度优先遍历。\n\n<!--more-->\n\n有如下 dom 结构：\n\n```html\n<div class=\"parent\">\n    <div class=\"child-1\">\n        <div class=\"child-1-1\">\n            <div class=\"child-1-1-1\">\n                a\n            </div>\n        </div>\n        <div class=\"child-1-2\">\n            <div class=\"child-1-2-1\">\n                b\n            </div>\n        </div>\n        <div class=\"child-1-3\">\n            c\n        </div>\n    </div>\n    <div class=\"child-2\">\n        <div class=\"child-2-1\">\n            d\n        </div>\n        <div class=\"child-2-2\">\n            e\n        </div>\n    </div>\n    <div class=\"child-3\">\n        <div class=\"child-3-1\">\n            f\n        </div>\n    </div>\n</div>\n```\n\n把 dom 的每个元素节点（或者其属性等）都遍历出来：\n\n# 深度优先遍历\n\n```javascript\nvar parentDom = document.querySelector(\".parent\");\n//把dom的每个元素节点（或者其属性等）都遍历出来\n\n//递归1\nfunction deepTraversal1(node, nodeList = []) {\n    if (node !== null) {\n        //nodeList.push(node)\n        nodeList.push(node.className);\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            deepTraversal1(children[i], nodeList);\n        }\n    }\n    return nodeList;\n}\n//console.log(deepTraversal1(parentDom))\n\n//递归2\nfunction deepTraversal2(node) {\n    var nodeList = [];\n    if (node !== null) {\n        nodeList.push(node.className);\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            nodeList = nodeList.concat(deepTraversal2(children[i]));\n        }\n    }\n    return nodeList;\n}\n//console.log(deepTraversal2(parentDom))\n\n//非递归\nfunction deepTraversal3(node) {\n    var nodeList = [];\n    var stack = [];\n\n    stack.push(node);\n    while (stack.length > 0) {\n        //console.log('stack:', stack)\n        //nodeList = [], stack = [parent]\n        //nodeList = [parent], stack = [child-3, child-2, child-1]\n        //nodeList = [parent, child-1], stack = [child-3, child-2, child-1-3, child-1-2, child-1-1]\n        //nodeList = [parent, child-3, child-1-1, ], stack = [child-3, child-2, child-1-3, child-1-2, child-1-1-1]\n        //nodeList = [parent, child-3, child-1-1, child-1-1-1], [child-3, child-2, child-1-3, child-1-2]\n        //nodeList = [parent, child-3, child-1-1, child-1-1-1, child-1-2], [child-3, child-2, child-1-3, child-1-2-1]\n        //......\n        var item = stack.pop();\n        nodeList.push(item);\n        var children = item.children;\n        for (var i = children.length - 1; i > -1; i--) {\n            stack.push(children[i]);\n        }\n    }\n    return nodeList;\n}\n//console.log(deepTraversal3(parentDom))\n```\n\n# 广度优先遍历\n\n```javascript\nfunction wideTraversal(node) {\n    var nodeList = [];\n    var stack = [];\n\n    stack.push(node);\n    while (stack.length > 0) {\n        //console.log('stack:', stack)\n        //nodeList = [], stack = [parent]\n        //nodeList = [parent], stack = [child-1, child-2, child-3]\n        //nodeList = [parent, child-1] = [child-2, child-3, child-1-1, child-1-2, child-1-3]\n        //nodeList = [parent, child-1, child-2] = [child-3, child-1-1, child-1-2, child-1-3, child-2-1]\n        //......\n        var item = stack.shift();\n        nodeList.push(item);\n        var children = item.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            stack.push(children[i]);\n        }\n    }\n    return nodeList;\n}\nconsole.log(wideTraversal(parentDom));\n```\n","source":"_posts/两种遍历算法.md","raw":"---\ntitle: 两种遍历算法\ndate: 2019-07-31 18:22:01\ncategories:\ntags:\n---\n\n记录一下深度优先遍历和广度优先遍历。\n\n<!--more-->\n\n有如下 dom 结构：\n\n```html\n<div class=\"parent\">\n    <div class=\"child-1\">\n        <div class=\"child-1-1\">\n            <div class=\"child-1-1-1\">\n                a\n            </div>\n        </div>\n        <div class=\"child-1-2\">\n            <div class=\"child-1-2-1\">\n                b\n            </div>\n        </div>\n        <div class=\"child-1-3\">\n            c\n        </div>\n    </div>\n    <div class=\"child-2\">\n        <div class=\"child-2-1\">\n            d\n        </div>\n        <div class=\"child-2-2\">\n            e\n        </div>\n    </div>\n    <div class=\"child-3\">\n        <div class=\"child-3-1\">\n            f\n        </div>\n    </div>\n</div>\n```\n\n把 dom 的每个元素节点（或者其属性等）都遍历出来：\n\n# 深度优先遍历\n\n```javascript\nvar parentDom = document.querySelector(\".parent\");\n//把dom的每个元素节点（或者其属性等）都遍历出来\n\n//递归1\nfunction deepTraversal1(node, nodeList = []) {\n    if (node !== null) {\n        //nodeList.push(node)\n        nodeList.push(node.className);\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            deepTraversal1(children[i], nodeList);\n        }\n    }\n    return nodeList;\n}\n//console.log(deepTraversal1(parentDom))\n\n//递归2\nfunction deepTraversal2(node) {\n    var nodeList = [];\n    if (node !== null) {\n        nodeList.push(node.className);\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            nodeList = nodeList.concat(deepTraversal2(children[i]));\n        }\n    }\n    return nodeList;\n}\n//console.log(deepTraversal2(parentDom))\n\n//非递归\nfunction deepTraversal3(node) {\n    var nodeList = [];\n    var stack = [];\n\n    stack.push(node);\n    while (stack.length > 0) {\n        //console.log('stack:', stack)\n        //nodeList = [], stack = [parent]\n        //nodeList = [parent], stack = [child-3, child-2, child-1]\n        //nodeList = [parent, child-1], stack = [child-3, child-2, child-1-3, child-1-2, child-1-1]\n        //nodeList = [parent, child-3, child-1-1, ], stack = [child-3, child-2, child-1-3, child-1-2, child-1-1-1]\n        //nodeList = [parent, child-3, child-1-1, child-1-1-1], [child-3, child-2, child-1-3, child-1-2]\n        //nodeList = [parent, child-3, child-1-1, child-1-1-1, child-1-2], [child-3, child-2, child-1-3, child-1-2-1]\n        //......\n        var item = stack.pop();\n        nodeList.push(item);\n        var children = item.children;\n        for (var i = children.length - 1; i > -1; i--) {\n            stack.push(children[i]);\n        }\n    }\n    return nodeList;\n}\n//console.log(deepTraversal3(parentDom))\n```\n\n# 广度优先遍历\n\n```javascript\nfunction wideTraversal(node) {\n    var nodeList = [];\n    var stack = [];\n\n    stack.push(node);\n    while (stack.length > 0) {\n        //console.log('stack:', stack)\n        //nodeList = [], stack = [parent]\n        //nodeList = [parent], stack = [child-1, child-2, child-3]\n        //nodeList = [parent, child-1] = [child-2, child-3, child-1-1, child-1-2, child-1-3]\n        //nodeList = [parent, child-1, child-2] = [child-3, child-1-1, child-1-2, child-1-3, child-2-1]\n        //......\n        var item = stack.shift();\n        nodeList.push(item);\n        var children = item.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            stack.push(children[i]);\n        }\n    }\n    return nodeList;\n}\nconsole.log(wideTraversal(parentDom));\n```\n","slug":"两种遍历算法","published":1,"updated":"2019-07-31T10:31:02.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm63g000s8hsp6af6tpz6","content":"<p>记录一下深度优先遍历和广度优先遍历。</p>\n<a id=\"more\"></a>\n<p>有如下 dom 结构：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-1\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-1-1\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-1-1-1\"</span>&gt;</span></span><br><span class=\"line\">                a</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-1-2\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-1-2-1\"</span>&gt;</span></span><br><span class=\"line\">                b</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-1-3\"</span>&gt;</span></span><br><span class=\"line\">            c</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-2\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-2-1\"</span>&gt;</span></span><br><span class=\"line\">            d</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-2-2\"</span>&gt;</span></span><br><span class=\"line\">            e</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-3\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-3-1\"</span>&gt;</span></span><br><span class=\"line\">            f</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>把 dom 的每个元素节点（或者其属性等）都遍历出来：</p>\n<h1 id=\"深度优先遍历\"><a href=\"#深度优先遍历\" class=\"headerlink\" title=\"深度优先遍历\"></a>深度优先遍历</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> parentDom = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\".parent\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//把dom的每个元素节点（或者其属性等）都遍历出来</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//递归1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepTraversal1</span>(<span class=\"params\">node, nodeList = []</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//nodeList.push(node)</span></span><br><span class=\"line\">        nodeList.push(node.className);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> children = node.children;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = children.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            deepTraversal1(children[i], nodeList);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodeList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//console.log(deepTraversal1(parentDom))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//递归2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepTraversal2</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodeList = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        nodeList.push(node.className);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> children = node.children;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = children.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            nodeList = nodeList.concat(deepTraversal2(children[i]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodeList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//console.log(deepTraversal2(parentDom))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//非递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepTraversal3</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodeList = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    stack.push(node);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//console.log('stack:', stack)</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [], stack = [parent]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent], stack = [child-3, child-2, child-1]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent, child-1], stack = [child-3, child-2, child-1-3, child-1-2, child-1-1]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent, child-3, child-1-1, ], stack = [child-3, child-2, child-1-3, child-1-2, child-1-1-1]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent, child-3, child-1-1, child-1-1-1], [child-3, child-2, child-1-3, child-1-2]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent, child-3, child-1-1, child-1-1-1, child-1-2], [child-3, child-2, child-1-3, child-1-2-1]</span></span><br><span class=\"line\">        <span class=\"comment\">//......</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = stack.pop();</span><br><span class=\"line\">        nodeList.push(item);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> children = item.children;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = children.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">-1</span>; i--) &#123;</span><br><span class=\"line\">            stack.push(children[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodeList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//console.log(deepTraversal3(parentDom))</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"广度优先遍历\"><a href=\"#广度优先遍历\" class=\"headerlink\" title=\"广度优先遍历\"></a>广度优先遍历</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wideTraversal</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodeList = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    stack.push(node);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//console.log('stack:', stack)</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [], stack = [parent]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent], stack = [child-1, child-2, child-3]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent, child-1] = [child-2, child-3, child-1-1, child-1-2, child-1-3]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent, child-1, child-2] = [child-3, child-1-1, child-1-2, child-1-3, child-2-1]</span></span><br><span class=\"line\">        <span class=\"comment\">//......</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = stack.shift();</span><br><span class=\"line\">        nodeList.push(item);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> children = item.children;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = children.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            stack.push(children[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodeList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wideTraversal(parentDom));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>记录一下深度优先遍历和广度优先遍历。</p>","more":"<p>有如下 dom 结构：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-1\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-1-1\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-1-1-1\"</span>&gt;</span></span><br><span class=\"line\">                a</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-1-2\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-1-2-1\"</span>&gt;</span></span><br><span class=\"line\">                b</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-1-3\"</span>&gt;</span></span><br><span class=\"line\">            c</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-2\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-2-1\"</span>&gt;</span></span><br><span class=\"line\">            d</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-2-2\"</span>&gt;</span></span><br><span class=\"line\">            e</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-3\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child-3-1\"</span>&gt;</span></span><br><span class=\"line\">            f</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>把 dom 的每个元素节点（或者其属性等）都遍历出来：</p>\n<h1 id=\"深度优先遍历\"><a href=\"#深度优先遍历\" class=\"headerlink\" title=\"深度优先遍历\"></a>深度优先遍历</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> parentDom = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\".parent\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//把dom的每个元素节点（或者其属性等）都遍历出来</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//递归1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepTraversal1</span>(<span class=\"params\">node, nodeList = []</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//nodeList.push(node)</span></span><br><span class=\"line\">        nodeList.push(node.className);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> children = node.children;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = children.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            deepTraversal1(children[i], nodeList);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodeList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//console.log(deepTraversal1(parentDom))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//递归2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepTraversal2</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodeList = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        nodeList.push(node.className);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> children = node.children;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = children.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            nodeList = nodeList.concat(deepTraversal2(children[i]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodeList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//console.log(deepTraversal2(parentDom))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//非递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepTraversal3</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodeList = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    stack.push(node);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//console.log('stack:', stack)</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [], stack = [parent]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent], stack = [child-3, child-2, child-1]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent, child-1], stack = [child-3, child-2, child-1-3, child-1-2, child-1-1]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent, child-3, child-1-1, ], stack = [child-3, child-2, child-1-3, child-1-2, child-1-1-1]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent, child-3, child-1-1, child-1-1-1], [child-3, child-2, child-1-3, child-1-2]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent, child-3, child-1-1, child-1-1-1, child-1-2], [child-3, child-2, child-1-3, child-1-2-1]</span></span><br><span class=\"line\">        <span class=\"comment\">//......</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = stack.pop();</span><br><span class=\"line\">        nodeList.push(item);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> children = item.children;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = children.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">-1</span>; i--) &#123;</span><br><span class=\"line\">            stack.push(children[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodeList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//console.log(deepTraversal3(parentDom))</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"广度优先遍历\"><a href=\"#广度优先遍历\" class=\"headerlink\" title=\"广度优先遍历\"></a>广度优先遍历</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wideTraversal</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodeList = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    stack.push(node);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//console.log('stack:', stack)</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [], stack = [parent]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent], stack = [child-1, child-2, child-3]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent, child-1] = [child-2, child-3, child-1-1, child-1-2, child-1-3]</span></span><br><span class=\"line\">        <span class=\"comment\">//nodeList = [parent, child-1, child-2] = [child-3, child-1-1, child-1-2, child-1-3, child-2-1]</span></span><br><span class=\"line\">        <span class=\"comment\">//......</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = stack.shift();</span><br><span class=\"line\">        nodeList.push(item);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> children = item.children;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = children.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            stack.push(children[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodeList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wideTraversal(parentDom));</span><br></pre></td></tr></table></figure>"},{"title":"this指向","date":"2018-06-20T10:15:50.000Z","_content":"\n学习 js 的过程中，this 的指向是绕不过去的坎，因为有时候会让人感到有点乱，比如说：\n\n```javascript\nvar name = 1;\nvar people = {\n  name: 2,\n  getName: function(){\n    return this.name;\n  },\n  son: {\n    name: 3,\n    getName: function(){\n      console.log(this);\n      return this.name\n    }\n  }\n}\nvar a = people.getName;\nvar b = people.son;\nconsole.log(a())\nconsole.log(people.getName());\n```\n\n<!--more-->\n\n会输出什么呢？\n\n```javascript\n1\n2\n```\n\n因为 a 的 this 为 window，所以为 window.name，而 b 的 this 是 people。\n\n继续看\n\n```javascript\nconsole.log(b.getName()); // 3      // b的this为son，son.name = 3\nconsole.log(people.son.getName()); // 3   //getName为son的直接调用，所以也为son.name\n```\n\n在实例化构造函数时，如果返回值是一个对象，那么 this 指向的就是那个返回的对象，如果返回值不是一个对象那么 this 还是指向函数的实例，例子如下：\n\n```javascript\nfunction GetName(){\n    this.name = 1;\n    return {}; // 返回对象\n}\nvar a = new getName;\nconsole.log(a.name); //undefined\n\nfunction GetName(){\n    this.name = 1;\n    return 2; // 返回非对象\n}\nvar d = new getName;\nconsole.log(d.name); //1\n```\n\n回调函数也会导致 this 丢失：\n\n```javascript\nwindow.name = 'window jack'\nvar obj = {\n    name: 'obj jack',\n    show: function(){\n    console.log(this.name)\n    }\n}\n\nobj.show() //obj jack\n\nfunction fun(fn){\n    fn()\n}\nfun(obj.show) //window jack\n```\n","source":"_posts/this指向.md","raw":"---\ntitle: this指向\ndate: 2018-06-20 18:15:50\ncategories: 技术\ntags: [前端]\n---\n\n学习 js 的过程中，this 的指向是绕不过去的坎，因为有时候会让人感到有点乱，比如说：\n\n```javascript\nvar name = 1;\nvar people = {\n  name: 2,\n  getName: function(){\n    return this.name;\n  },\n  son: {\n    name: 3,\n    getName: function(){\n      console.log(this);\n      return this.name\n    }\n  }\n}\nvar a = people.getName;\nvar b = people.son;\nconsole.log(a())\nconsole.log(people.getName());\n```\n\n<!--more-->\n\n会输出什么呢？\n\n```javascript\n1\n2\n```\n\n因为 a 的 this 为 window，所以为 window.name，而 b 的 this 是 people。\n\n继续看\n\n```javascript\nconsole.log(b.getName()); // 3      // b的this为son，son.name = 3\nconsole.log(people.son.getName()); // 3   //getName为son的直接调用，所以也为son.name\n```\n\n在实例化构造函数时，如果返回值是一个对象，那么 this 指向的就是那个返回的对象，如果返回值不是一个对象那么 this 还是指向函数的实例，例子如下：\n\n```javascript\nfunction GetName(){\n    this.name = 1;\n    return {}; // 返回对象\n}\nvar a = new getName;\nconsole.log(a.name); //undefined\n\nfunction GetName(){\n    this.name = 1;\n    return 2; // 返回非对象\n}\nvar d = new getName;\nconsole.log(d.name); //1\n```\n\n回调函数也会导致 this 丢失：\n\n```javascript\nwindow.name = 'window jack'\nvar obj = {\n    name: 'obj jack',\n    show: function(){\n    console.log(this.name)\n    }\n}\n\nobj.show() //obj jack\n\nfunction fun(fn){\n    fn()\n}\nfun(obj.show) //window jack\n```\n","slug":"this指向","published":1,"updated":"2019-05-17T06:24:26.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm63j000v8hsp79fteyrj","content":"<p>学习 js 的过程中，this 的指向是绕不过去的坎，因为有时候会让人感到有点乱，比如说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> people = &#123;</span><br><span class=\"line\">  name: <span class=\"number\">2</span>,</span><br><span class=\"line\">  getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  son: &#123;</span><br><span class=\"line\">    name: <span class=\"number\">3</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = people.getName;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = people.son;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(people.getName());</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>会输出什么呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>因为 a 的 this 为 window，所以为 window.name，而 b 的 this 是 people。</p>\n<p>继续看</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(b.getName()); <span class=\"comment\">// 3      // b的this为son，son.name = 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(people.son.getName()); <span class=\"comment\">// 3   //getName为son的直接调用，所以也为son.name</span></span><br></pre></td></tr></table></figure>\n<p>在实例化构造函数时，如果返回值是一个对象，那么 this 指向的就是那个返回的对象，如果返回值不是一个对象那么 this 还是指向函数的实例，例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;; <span class=\"comment\">// 返回对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> getName;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>; <span class=\"comment\">// 返回非对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> getName;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d.name); <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<p>回调函数也会导致 this 丢失：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'window jack'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'obj jack'</span>,</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.show() <span class=\"comment\">//obj jack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">    fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(obj.show) <span class=\"comment\">//window jack</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>学习 js 的过程中，this 的指向是绕不过去的坎，因为有时候会让人感到有点乱，比如说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> people = &#123;</span><br><span class=\"line\">  name: <span class=\"number\">2</span>,</span><br><span class=\"line\">  getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  son: &#123;</span><br><span class=\"line\">    name: <span class=\"number\">3</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = people.getName;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = people.son;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(people.getName());</span><br></pre></td></tr></table></figure>","more":"<p>会输出什么呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>因为 a 的 this 为 window，所以为 window.name，而 b 的 this 是 people。</p>\n<p>继续看</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(b.getName()); <span class=\"comment\">// 3      // b的this为son，son.name = 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(people.son.getName()); <span class=\"comment\">// 3   //getName为son的直接调用，所以也为son.name</span></span><br></pre></td></tr></table></figure>\n<p>在实例化构造函数时，如果返回值是一个对象，那么 this 指向的就是那个返回的对象，如果返回值不是一个对象那么 this 还是指向函数的实例，例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;; <span class=\"comment\">// 返回对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> getName;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>; <span class=\"comment\">// 返回非对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> getName;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d.name); <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<p>回调函数也会导致 this 丢失：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'window jack'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'obj jack'</span>,</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.show() <span class=\"comment\">//obj jack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">    fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(obj.show) <span class=\"comment\">//window jack</span></span><br></pre></td></tr></table></figure>"},{"title":"函数绑定和函数柯里化","date":"2018-06-30T10:45:19.000Z","_content":"\n最近比较闲，看了会书，打打基础。下面记录一下看过的一些内容。\n\n### 函数绑定\n\n函数绑定要创建一个函数，可以在特定的 this 环境中以指定参数调用另一个函数。常常和回调函数与实践处理程序一起使用，以便将函数作为变量传递的同时保留代码执行环境。\n\n<!--more-->\n\n例如：\n\n```javascript\nvar handler = {\n\tmessage: 'Event handled',\n\thandleClick: function(event){\n\t\talert(this.message)\n\t}\n}\n\nvar btn = document.getElementById('my-btn')\nEventUtil.addHandler(btn, 'click', handler.handleClick)\n```\n\n我们在一个按钮注册了点击事件，希望点击它会弹出 Event handled，然而实际上显示的是 undefined。原因是没有保存 handle.handleClick()的环境，所以 this 对象最后指向的是按钮而不是 handler（在 ie8 中，this 指向 window）。\n可以使用一个闭包来修正这个问题：\n\n```javascript\nvar handler = {\n\tmessage: 'Event handled',\n\thandleClick: function(event){\n\t\talert(this.message)\n\t}\n}\n\nvar btn = document.getElementById('my-btn')\nEventUtil.addHandler(btn, 'click', function(event){\n\thandler.handleClick(event)\n})\n```\n\n但是闭包使用过多会难以理解和调试，因此可以使用一个将函数绑定到指定环境的函数，这个函数一般叫 bind()。\n实现一个简单的 bind()函数：\n\n```javascript\nfunction bind(fn, context){\n\treturn function(){\n\t\treturn fn.apply(context, arguments)\n\t}\n}\n```\n\n这个函数似乎简单，但功能强大。在 bind()中创建一个闭包，使用 apply()调用传入的函数，并给 apply()传递 context 对象和参数。注意这里的 arguments 是内部函数的，而非 bind()。当调用返回函数时，它会在给定环境执行被传入的函数并给出所有参数。\n使用如下：\n\n```javascript\nvar handler = {\n\tmessage: 'Event handled',\n\thandleClick: function(event){\n\t\talert(this.message)\n\t}\n}\n\nvar btn = document.getElementById('my-btn')\nEventUtil.addHandler(btn, 'click', bind(handler.handleClick, handler))\n```\n\nevent 对象也会传给函数，因为所有的参数都通过被绑定的函数直接传给它。\nECMAScript5 原生定义了一个 bind()方法，操作更简单：\n\n```javascript\nvar handler = {\n\tmessage: 'Event handled',\n\thandleClick: function(event){\n\t\talert(this.message)\n\t}\n}\n\nvar btn = document.getElementById('my-btn')\nEventUtil.addHandler(btn, 'click', handler.handleClick.bind(handler))\n```\n\n### 函数柯里化\n\n函数柯里化是用于创建已经设置好了一个或者多个参数的函数。基本方法和函数绑定是一样的：使用一个闭包返回函数。两者的区别在于，当函数被调用时，返回的函数还需要设置一些传入的参数。请看一下例子：\n\n```javascript\nfunction add(num1, num2){\n\treturn num1 + num2;\n}\nfunction curriedAdd(num2){\n\treturn add(5, num2)\n}\n\nalert(add(2,3))\t\t//5\nalert(curriedAdd(3)) \t//8\n```\n\n这里定义了两个函数，后者本质上是在任何情况下第一个参数为 5 的 add()版本。尽管从技术上来说 curriedAdd()并非柯里化的函数，但它很好地展示了概念。\n下面是创建柯里化函数的通用方法：\n\n```javascript\nfunction curry(fn){\n\t//获取传入的参数，第一个参数为进行柯里化的函数，因此要排除\n\tvar args = Array.prototype.slice.call(arguments,1)\n\treturn function(){\n\t\t//获取返回的函数的参数\n\t\tvar innerArgs = Array.prototype.slice.call(arguments)\n\t\t//把两个函数的参数合并起来\n\t\tvar finalArgs = args.concat(innerArgs)\n\t\treturn fn.apply(null, finalArgs)\n    }\n}\n```\n\ncurry()的第一个函数是要进行柯里化的函数，其他值是要传入的值。finalArgs 是合并完的参数，使用 apply()将结果传递给 fn。\n\n使用如下：\n\n```javascript\nfunction add(num1, num2){\n\treturn num1 + num2;\n}\nvar curriedAdd = curry(add, 5)\nalert(curriedAdd(3)) \t\t//8\n```\n\n在这个例子中，创建了第一个参数为 5 的 add()的柯里化版本。当调用 curriedAdd()并传入 3 时，3 会成为 add()的第二个参数，结果便是 8。\n\n函数柯里化和函数绑定结合在一起，则为：\n\n```javascript\nfunction bind(fn, context){\n\t//获取传入的参数，第一个参数为进行柯里化的函数，第二个参数为传入的上下文，因此要排除\n\tvar args = Array.prototype.slice.call(arguments,2)\n\treturn function(){\n\t\t//获取返回的函数的参数\n\t\tvar innerArgs = Array.prototype.slice.call(arguments)\n\t\t//把两个函数的参数合并起来\n\t\tvar finalArgs = args.concat(innerArgs)\n\t\treturn fn.apply(context, finalArgs)\n    }\n}\n```\n\n当你想除了 event 对象再额外给上面的事件处理程序传递参数时，可以直接再传入一个参数。\n\n```javascript\nvar handler = {\n\tmessage: 'Event handled',\n\thandleClick: function(name, event){\n\t\talert(this.message + ':' + 'name' + ':' + event.type)\n\t}\n}\n\nvar btn = document.getElementById('my-btn')\nEventUtil.addHandler(btn, 'click', bind(handler.handleClick, handler, 'mybtn'))\n```\n\n在这个更新过的例子中，作为第三个参数传递给 bind()的名字，被传递给了 handler.handleClick()。而 handler.handleClick()页同时接收到 event 对象。\n\nECMAScript5 的 bind()方法也实现了函数柯里化，只要在 this 的值之后再传入另一个参数即可。\n\n```javascript\nvar handler = {\n\tmessage: 'Event handled',\n\thandleClick: function(name, event){\n\t\talert(this.message + ':' + 'name' + ':' + event.type)\n\t}\n}\n\nvar btn = document.getElementById('my-btn')\nEventUtil.addHandler(btn, 'click', handler.handleClick.bind(handler, 'mybtn'))\n```\n","source":"_posts/函数绑定和函数柯里化.md","raw":"---\ntitle: 函数绑定和函数柯里化\ndate: 2018-06-30 18:45:19\ncategories: 技术\ntags: [前端]\n---\n\n最近比较闲，看了会书，打打基础。下面记录一下看过的一些内容。\n\n### 函数绑定\n\n函数绑定要创建一个函数，可以在特定的 this 环境中以指定参数调用另一个函数。常常和回调函数与实践处理程序一起使用，以便将函数作为变量传递的同时保留代码执行环境。\n\n<!--more-->\n\n例如：\n\n```javascript\nvar handler = {\n\tmessage: 'Event handled',\n\thandleClick: function(event){\n\t\talert(this.message)\n\t}\n}\n\nvar btn = document.getElementById('my-btn')\nEventUtil.addHandler(btn, 'click', handler.handleClick)\n```\n\n我们在一个按钮注册了点击事件，希望点击它会弹出 Event handled，然而实际上显示的是 undefined。原因是没有保存 handle.handleClick()的环境，所以 this 对象最后指向的是按钮而不是 handler（在 ie8 中，this 指向 window）。\n可以使用一个闭包来修正这个问题：\n\n```javascript\nvar handler = {\n\tmessage: 'Event handled',\n\thandleClick: function(event){\n\t\talert(this.message)\n\t}\n}\n\nvar btn = document.getElementById('my-btn')\nEventUtil.addHandler(btn, 'click', function(event){\n\thandler.handleClick(event)\n})\n```\n\n但是闭包使用过多会难以理解和调试，因此可以使用一个将函数绑定到指定环境的函数，这个函数一般叫 bind()。\n实现一个简单的 bind()函数：\n\n```javascript\nfunction bind(fn, context){\n\treturn function(){\n\t\treturn fn.apply(context, arguments)\n\t}\n}\n```\n\n这个函数似乎简单，但功能强大。在 bind()中创建一个闭包，使用 apply()调用传入的函数，并给 apply()传递 context 对象和参数。注意这里的 arguments 是内部函数的，而非 bind()。当调用返回函数时，它会在给定环境执行被传入的函数并给出所有参数。\n使用如下：\n\n```javascript\nvar handler = {\n\tmessage: 'Event handled',\n\thandleClick: function(event){\n\t\talert(this.message)\n\t}\n}\n\nvar btn = document.getElementById('my-btn')\nEventUtil.addHandler(btn, 'click', bind(handler.handleClick, handler))\n```\n\nevent 对象也会传给函数，因为所有的参数都通过被绑定的函数直接传给它。\nECMAScript5 原生定义了一个 bind()方法，操作更简单：\n\n```javascript\nvar handler = {\n\tmessage: 'Event handled',\n\thandleClick: function(event){\n\t\talert(this.message)\n\t}\n}\n\nvar btn = document.getElementById('my-btn')\nEventUtil.addHandler(btn, 'click', handler.handleClick.bind(handler))\n```\n\n### 函数柯里化\n\n函数柯里化是用于创建已经设置好了一个或者多个参数的函数。基本方法和函数绑定是一样的：使用一个闭包返回函数。两者的区别在于，当函数被调用时，返回的函数还需要设置一些传入的参数。请看一下例子：\n\n```javascript\nfunction add(num1, num2){\n\treturn num1 + num2;\n}\nfunction curriedAdd(num2){\n\treturn add(5, num2)\n}\n\nalert(add(2,3))\t\t//5\nalert(curriedAdd(3)) \t//8\n```\n\n这里定义了两个函数，后者本质上是在任何情况下第一个参数为 5 的 add()版本。尽管从技术上来说 curriedAdd()并非柯里化的函数，但它很好地展示了概念。\n下面是创建柯里化函数的通用方法：\n\n```javascript\nfunction curry(fn){\n\t//获取传入的参数，第一个参数为进行柯里化的函数，因此要排除\n\tvar args = Array.prototype.slice.call(arguments,1)\n\treturn function(){\n\t\t//获取返回的函数的参数\n\t\tvar innerArgs = Array.prototype.slice.call(arguments)\n\t\t//把两个函数的参数合并起来\n\t\tvar finalArgs = args.concat(innerArgs)\n\t\treturn fn.apply(null, finalArgs)\n    }\n}\n```\n\ncurry()的第一个函数是要进行柯里化的函数，其他值是要传入的值。finalArgs 是合并完的参数，使用 apply()将结果传递给 fn。\n\n使用如下：\n\n```javascript\nfunction add(num1, num2){\n\treturn num1 + num2;\n}\nvar curriedAdd = curry(add, 5)\nalert(curriedAdd(3)) \t\t//8\n```\n\n在这个例子中，创建了第一个参数为 5 的 add()的柯里化版本。当调用 curriedAdd()并传入 3 时，3 会成为 add()的第二个参数，结果便是 8。\n\n函数柯里化和函数绑定结合在一起，则为：\n\n```javascript\nfunction bind(fn, context){\n\t//获取传入的参数，第一个参数为进行柯里化的函数，第二个参数为传入的上下文，因此要排除\n\tvar args = Array.prototype.slice.call(arguments,2)\n\treturn function(){\n\t\t//获取返回的函数的参数\n\t\tvar innerArgs = Array.prototype.slice.call(arguments)\n\t\t//把两个函数的参数合并起来\n\t\tvar finalArgs = args.concat(innerArgs)\n\t\treturn fn.apply(context, finalArgs)\n    }\n}\n```\n\n当你想除了 event 对象再额外给上面的事件处理程序传递参数时，可以直接再传入一个参数。\n\n```javascript\nvar handler = {\n\tmessage: 'Event handled',\n\thandleClick: function(name, event){\n\t\talert(this.message + ':' + 'name' + ':' + event.type)\n\t}\n}\n\nvar btn = document.getElementById('my-btn')\nEventUtil.addHandler(btn, 'click', bind(handler.handleClick, handler, 'mybtn'))\n```\n\n在这个更新过的例子中，作为第三个参数传递给 bind()的名字，被传递给了 handler.handleClick()。而 handler.handleClick()页同时接收到 event 对象。\n\nECMAScript5 的 bind()方法也实现了函数柯里化，只要在 this 的值之后再传入另一个参数即可。\n\n```javascript\nvar handler = {\n\tmessage: 'Event handled',\n\thandleClick: function(name, event){\n\t\talert(this.message + ':' + 'name' + ':' + event.type)\n\t}\n}\n\nvar btn = document.getElementById('my-btn')\nEventUtil.addHandler(btn, 'click', handler.handleClick.bind(handler, 'mybtn'))\n```\n","slug":"函数绑定和函数柯里化","published":1,"updated":"2019-05-17T06:25:29.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm63m000z8hspe75b840u","content":"<p>最近比较闲，看了会书，打打基础。下面记录一下看过的一些内容。</p>\n<h3 id=\"函数绑定\"><a href=\"#函数绑定\" class=\"headerlink\" title=\"函数绑定\"></a>函数绑定</h3><p>函数绑定要创建一个函数，可以在特定的 this 环境中以指定参数调用另一个函数。常常和回调函数与实践处理程序一起使用，以便将函数作为变量传递的同时保留代码执行环境。</p>\n<a id=\"more\"></a>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">\tmessage: <span class=\"string\">'Event handled'</span>,</span><br><span class=\"line\">\thandleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.message)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'my-btn'</span>)</span><br><span class=\"line\">EventUtil.addHandler(btn, <span class=\"string\">'click'</span>, handler.handleClick)</span><br></pre></td></tr></table></figure>\n<p>我们在一个按钮注册了点击事件，希望点击它会弹出 Event handled，然而实际上显示的是 undefined。原因是没有保存 handle.handleClick()的环境，所以 this 对象最后指向的是按钮而不是 handler（在 ie8 中，this 指向 window）。<br>可以使用一个闭包来修正这个问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">\tmessage: <span class=\"string\">'Event handled'</span>,</span><br><span class=\"line\">\thandleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.message)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'my-btn'</span>)</span><br><span class=\"line\">EventUtil.addHandler(btn, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\thandler.handleClick(event)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>但是闭包使用过多会难以理解和调试，因此可以使用一个将函数绑定到指定环境的函数，这个函数一般叫 bind()。<br>实现一个简单的 bind()函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">fn, context</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fn.apply(context, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数似乎简单，但功能强大。在 bind()中创建一个闭包，使用 apply()调用传入的函数，并给 apply()传递 context 对象和参数。注意这里的 arguments 是内部函数的，而非 bind()。当调用返回函数时，它会在给定环境执行被传入的函数并给出所有参数。<br>使用如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">\tmessage: <span class=\"string\">'Event handled'</span>,</span><br><span class=\"line\">\thandleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.message)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'my-btn'</span>)</span><br><span class=\"line\">EventUtil.addHandler(btn, <span class=\"string\">'click'</span>, bind(handler.handleClick, handler))</span><br></pre></td></tr></table></figure>\n<p>event 对象也会传给函数，因为所有的参数都通过被绑定的函数直接传给它。<br>ECMAScript5 原生定义了一个 bind()方法，操作更简单：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">\tmessage: <span class=\"string\">'Event handled'</span>,</span><br><span class=\"line\">\thandleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.message)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'my-btn'</span>)</span><br><span class=\"line\">EventUtil.addHandler(btn, <span class=\"string\">'click'</span>, handler.handleClick.bind(handler))</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数柯里化\"><a href=\"#函数柯里化\" class=\"headerlink\" title=\"函数柯里化\"></a>函数柯里化</h3><p>函数柯里化是用于创建已经设置好了一个或者多个参数的函数。基本方法和函数绑定是一样的：使用一个闭包返回函数。两者的区别在于，当函数被调用时，返回的函数还需要设置一些传入的参数。请看一下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curriedAdd</span>(<span class=\"params\">num2</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> add(<span class=\"number\">5</span>, num2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(add(<span class=\"number\">2</span>,<span class=\"number\">3</span>))\t\t<span class=\"comment\">//5</span></span><br><span class=\"line\">alert(curriedAdd(<span class=\"number\">3</span>)) \t<span class=\"comment\">//8</span></span><br></pre></td></tr></table></figure>\n<p>这里定义了两个函数，后者本质上是在任何情况下第一个参数为 5 的 add()版本。尽管从技术上来说 curriedAdd()并非柯里化的函数，但它很好地展示了概念。<br>下面是创建柯里化函数的通用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取传入的参数，第一个参数为进行柯里化的函数，因此要排除</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取返回的函数的参数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> innerArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">//把两个函数的参数合并起来</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> finalArgs = args.concat(innerArgs)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, finalArgs)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>curry()的第一个函数是要进行柯里化的函数，其他值是要传入的值。finalArgs 是合并完的参数，使用 apply()将结果传递给 fn。</p>\n<p>使用如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> curriedAdd = curry(add, <span class=\"number\">5</span>)</span><br><span class=\"line\">alert(curriedAdd(<span class=\"number\">3</span>)) \t\t<span class=\"comment\">//8</span></span><br></pre></td></tr></table></figure>\n<p>在这个例子中，创建了第一个参数为 5 的 add()的柯里化版本。当调用 curriedAdd()并传入 3 时，3 会成为 add()的第二个参数，结果便是 8。</p>\n<p>函数柯里化和函数绑定结合在一起，则为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">fn, context</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取传入的参数，第一个参数为进行柯里化的函数，第二个参数为传入的上下文，因此要排除</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取返回的函数的参数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> innerArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">//把两个函数的参数合并起来</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> finalArgs = args.concat(innerArgs)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fn.apply(context, finalArgs)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当你想除了 event 对象再额外给上面的事件处理程序传递参数时，可以直接再传入一个参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">\tmessage: <span class=\"string\">'Event handled'</span>,</span><br><span class=\"line\">\thandleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, event</span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.message + <span class=\"string\">':'</span> + <span class=\"string\">'name'</span> + <span class=\"string\">':'</span> + event.type)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'my-btn'</span>)</span><br><span class=\"line\">EventUtil.addHandler(btn, <span class=\"string\">'click'</span>, bind(handler.handleClick, handler, <span class=\"string\">'mybtn'</span>))</span><br></pre></td></tr></table></figure>\n<p>在这个更新过的例子中，作为第三个参数传递给 bind()的名字，被传递给了 handler.handleClick()。而 handler.handleClick()页同时接收到 event 对象。</p>\n<p>ECMAScript5 的 bind()方法也实现了函数柯里化，只要在 this 的值之后再传入另一个参数即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">\tmessage: <span class=\"string\">'Event handled'</span>,</span><br><span class=\"line\">\thandleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, event</span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.message + <span class=\"string\">':'</span> + <span class=\"string\">'name'</span> + <span class=\"string\">':'</span> + event.type)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'my-btn'</span>)</span><br><span class=\"line\">EventUtil.addHandler(btn, <span class=\"string\">'click'</span>, handler.handleClick.bind(handler, <span class=\"string\">'mybtn'</span>))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>最近比较闲，看了会书，打打基础。下面记录一下看过的一些内容。</p>\n<h3 id=\"函数绑定\"><a href=\"#函数绑定\" class=\"headerlink\" title=\"函数绑定\"></a>函数绑定</h3><p>函数绑定要创建一个函数，可以在特定的 this 环境中以指定参数调用另一个函数。常常和回调函数与实践处理程序一起使用，以便将函数作为变量传递的同时保留代码执行环境。</p>","more":"<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">\tmessage: <span class=\"string\">'Event handled'</span>,</span><br><span class=\"line\">\thandleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.message)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'my-btn'</span>)</span><br><span class=\"line\">EventUtil.addHandler(btn, <span class=\"string\">'click'</span>, handler.handleClick)</span><br></pre></td></tr></table></figure>\n<p>我们在一个按钮注册了点击事件，希望点击它会弹出 Event handled，然而实际上显示的是 undefined。原因是没有保存 handle.handleClick()的环境，所以 this 对象最后指向的是按钮而不是 handler（在 ie8 中，this 指向 window）。<br>可以使用一个闭包来修正这个问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">\tmessage: <span class=\"string\">'Event handled'</span>,</span><br><span class=\"line\">\thandleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.message)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'my-btn'</span>)</span><br><span class=\"line\">EventUtil.addHandler(btn, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\thandler.handleClick(event)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>但是闭包使用过多会难以理解和调试，因此可以使用一个将函数绑定到指定环境的函数，这个函数一般叫 bind()。<br>实现一个简单的 bind()函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">fn, context</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fn.apply(context, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数似乎简单，但功能强大。在 bind()中创建一个闭包，使用 apply()调用传入的函数，并给 apply()传递 context 对象和参数。注意这里的 arguments 是内部函数的，而非 bind()。当调用返回函数时，它会在给定环境执行被传入的函数并给出所有参数。<br>使用如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">\tmessage: <span class=\"string\">'Event handled'</span>,</span><br><span class=\"line\">\thandleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.message)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'my-btn'</span>)</span><br><span class=\"line\">EventUtil.addHandler(btn, <span class=\"string\">'click'</span>, bind(handler.handleClick, handler))</span><br></pre></td></tr></table></figure>\n<p>event 对象也会传给函数，因为所有的参数都通过被绑定的函数直接传给它。<br>ECMAScript5 原生定义了一个 bind()方法，操作更简单：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">\tmessage: <span class=\"string\">'Event handled'</span>,</span><br><span class=\"line\">\thandleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.message)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'my-btn'</span>)</span><br><span class=\"line\">EventUtil.addHandler(btn, <span class=\"string\">'click'</span>, handler.handleClick.bind(handler))</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数柯里化\"><a href=\"#函数柯里化\" class=\"headerlink\" title=\"函数柯里化\"></a>函数柯里化</h3><p>函数柯里化是用于创建已经设置好了一个或者多个参数的函数。基本方法和函数绑定是一样的：使用一个闭包返回函数。两者的区别在于，当函数被调用时，返回的函数还需要设置一些传入的参数。请看一下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curriedAdd</span>(<span class=\"params\">num2</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> add(<span class=\"number\">5</span>, num2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(add(<span class=\"number\">2</span>,<span class=\"number\">3</span>))\t\t<span class=\"comment\">//5</span></span><br><span class=\"line\">alert(curriedAdd(<span class=\"number\">3</span>)) \t<span class=\"comment\">//8</span></span><br></pre></td></tr></table></figure>\n<p>这里定义了两个函数，后者本质上是在任何情况下第一个参数为 5 的 add()版本。尽管从技术上来说 curriedAdd()并非柯里化的函数，但它很好地展示了概念。<br>下面是创建柯里化函数的通用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取传入的参数，第一个参数为进行柯里化的函数，因此要排除</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取返回的函数的参数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> innerArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">//把两个函数的参数合并起来</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> finalArgs = args.concat(innerArgs)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, finalArgs)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>curry()的第一个函数是要进行柯里化的函数，其他值是要传入的值。finalArgs 是合并完的参数，使用 apply()将结果传递给 fn。</p>\n<p>使用如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> curriedAdd = curry(add, <span class=\"number\">5</span>)</span><br><span class=\"line\">alert(curriedAdd(<span class=\"number\">3</span>)) \t\t<span class=\"comment\">//8</span></span><br></pre></td></tr></table></figure>\n<p>在这个例子中，创建了第一个参数为 5 的 add()的柯里化版本。当调用 curriedAdd()并传入 3 时，3 会成为 add()的第二个参数，结果便是 8。</p>\n<p>函数柯里化和函数绑定结合在一起，则为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">fn, context</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取传入的参数，第一个参数为进行柯里化的函数，第二个参数为传入的上下文，因此要排除</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取返回的函数的参数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> innerArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">//把两个函数的参数合并起来</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> finalArgs = args.concat(innerArgs)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fn.apply(context, finalArgs)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当你想除了 event 对象再额外给上面的事件处理程序传递参数时，可以直接再传入一个参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">\tmessage: <span class=\"string\">'Event handled'</span>,</span><br><span class=\"line\">\thandleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, event</span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.message + <span class=\"string\">':'</span> + <span class=\"string\">'name'</span> + <span class=\"string\">':'</span> + event.type)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'my-btn'</span>)</span><br><span class=\"line\">EventUtil.addHandler(btn, <span class=\"string\">'click'</span>, bind(handler.handleClick, handler, <span class=\"string\">'mybtn'</span>))</span><br></pre></td></tr></table></figure>\n<p>在这个更新过的例子中，作为第三个参数传递给 bind()的名字，被传递给了 handler.handleClick()。而 handler.handleClick()页同时接收到 event 对象。</p>\n<p>ECMAScript5 的 bind()方法也实现了函数柯里化，只要在 this 的值之后再传入另一个参数即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">\tmessage: <span class=\"string\">'Event handled'</span>,</span><br><span class=\"line\">\thandleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, event</span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.message + <span class=\"string\">':'</span> + <span class=\"string\">'name'</span> + <span class=\"string\">':'</span> + event.type)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'my-btn'</span>)</span><br><span class=\"line\">EventUtil.addHandler(btn, <span class=\"string\">'click'</span>, handler.handleClick.bind(handler, <span class=\"string\">'mybtn'</span>))</span><br></pre></td></tr></table></figure>"},{"title":"加州旅馆","date":"2021-08-07T14:22:05.000Z","_content":"\n<center>上</center><br/>\n\n<!--more-->\n\n&emsp;&emsp;1977年，我的哥哥突然像得了病似的，不会说话了。\n&emsp;&emsp;那年我十四岁——正是求知欲旺盛的时期。我一整天叽里咕噜地与人接话，交谈，嘴巴像战争里的来福枪，一看见人就疯狂地扫射。那时我的世界里仿佛没有生人这个概念，所有进入我视线的人都是我的朋友。与此相反的是我的哥哥马修——比我大两岁。他是个十分不爱说话的人。我们以一种互补的方式相处，可以说是亲密无间。而那时的哥哥除了沉默寡言，与普通人并没有什么不同。\n&emsp;&emsp;我出生在一个叫迈克多的小镇。如同这个州的其他小镇一样，我的家乡狭小，静谧，大河的支流从小镇的前沿穿行而过。和所有调皮的孩子一般，镇上所有的小孩都是我的朋友——小镇也就几十户人家。我们在河上划船，在河滩上野炊，上镇里最古老的树掏鸟蛋。而每次外出玩耍，我都带上我的哥哥——马修只有一个朋友，那就是我。\n&emsp;&emsp;平静的生活在十四岁那年来了个小插曲：我的哥哥哑巴了。无论别人如何叫他，他都不应，甚至连头也不回，只用点头和摇头来作答，仿佛他的世界只剩下一般疑问句。而作为最亲密的兄弟兼朋友，我也得不到他的任何口头答复。这变化来得毫无征兆。不过，他会用写的方式与我交谈。\n&emsp;&emsp;譬如说，我问他：“马修，你昨晚干嘛老在床上折腾？”他会在纸上写到：“睡不着。”\n&emsp;&emsp;家里人急坏了，带着他到附近的市镇里看病。作为哥哥的好朋友，我也跟着去了。\n&emsp;&emsp;那天清晨，天气很好，一团团白云镶嵌在蓝色的天空。正值夏季，阳光照在身上，有点热，我们都出汗了。不多时，我们来到一座气派的大房子。一个穿着笔挺黑色制服的人带我们进入里面。他在一个房间的门口停下，示意我们进去。\n&emsp;&emsp;一个留着络腮胡须的大夫——中等身材，稍微发胖，头上的毛发像秋天的茅草。他让哥哥站在他前面，不停地查看他的喉咙，五官。他打算让哥哥叫“啊——”，可惜没成功。接着他查看了他的手，再看脚。我询问手脚和哑巴有什么关系，他说：“身体的各部位是相通的。一个地方出了问题，可以从另一个地方窥见。”我想他接下来要看屁股了。不管我如何想象，我总是想不出两者之间有什么关系。\n&emsp;&emsp;半晌，他神色凝重地对爸爸说：“情况不太妙啊……不知是哪里出了问题……或许是喉咙，可我检查不出那里有什么问题。又或许是脚，你知道身体这玩意总是牵一发动全身的。”我正奇怪他为何不说屁股时，听见他摇摇头：“这种情况非常罕见，你们有必要到京都看一下，那里的大夫是出过国的，见过世面的，或许了解过这种病也说不定。”我悄悄问马修：“喂，你屁股疼吗？”他摇了摇头。\n&emsp;&emsp;总之，这一趟是白来了，钱也白花了。至于京都，听家里人说缓一缓。回到镇里，我成了焦点，所有的孩子都跑来问我：“喂，听说你哥哥哑巴了？”我对这些闲言装作听不见，实在被问烦的时候报之以破口大骂：“去你的，你他妈才哑巴呢！”\n\n&emsp;&emsp;然而我的哥哥马修，仿佛一点影响也没有，只是闭口不言，好像嘴巴里有某种神秘的宝物。有时候我甚至想甩他一巴掌，看看他是否会”哇“地一声吐出什么东西来。后来，我开始在纸上写下问题，让他来回答。以下是我们的对话：\n&emsp;&emsp;“马修，你病了吗？”\n&emsp;&emsp;“没有。”\n&emsp;&emsp;“为何你不说话？”\n&emsp;&emsp;“为何我要说话？”\n&emsp;&emsp;“这个……说话可以让别人了解你的想法啊。比如说，你饿了，如果你说：我要吃蛋糕，就会有人递一块草莓蛋糕给你。虽然并不是老有这好运。总之，说话是再正常不过了不是吗？”\n&emsp;&emsp;“有点道理，可我还是不想说话。”\n&emsp;&emsp;“这么着，我跟你打个赌：你要是到下下个礼拜连一句话也不说，我就给你一块草莓蛋糕。要是你说了，就给我两块，怎么样？”\n&emsp;&emsp;“好。”\n&emsp;&emsp;“你输定了，上个月我跟莎莉闹翻了。我发誓一辈子不再理她，不跟她说话了。见鬼，第二天我就主动约她去野炊。我等着你的蛋糕哦”\n&emsp;&emsp;“好。”\n&emsp;&emsp;那时我坚定地认为两块蛋糕我吃定了。然而很久之后我都不曾见他说过一句话，就仿佛夜里的天空从未划过我所企盼的流星。\n\n<center>下</center><br/>\n\n&emsp;&emsp;一个星期前我按例去疗养院看望哥哥。在昏暗的房间里，他依旧是安静，示意要到楼下的院子。那里种着一小片绿色的竹子。金色的夕阳在他面前洒下来。我看着他张开双臂，拥抱沉默的年华。\n&emsp;&emsp;那是我最后一次看到哥哥。两天后我接到疗养院打来的电话，说早上有人发现哥哥躺在床上，已死去多时。\n&emsp;&emsp;我急忙赶到疗养院。医生告诉我死因尚不明确，大概是突然的脑中风。但是我不明白哥哥平时身体没有什么大毛病，为什么上帝会这么急促地给他的人生画上句号。\n&emsp;&emsp;我把哥哥的所有东西都搬回家里。我孤身一人居住，不担心有人会介意。我和哥哥一直是最亲密的兄弟，尽管从二十岁开始他就因为无法跟外界正常沟通而住进了疗养院，尽管我一直都不了解他。\n&emsp;&emsp;人不在了世界依旧运转，我没有多大的伤感。但是有些东西却不可阻挡地出现在脑海。黑暗中我点燃一支烟，想理清些头绪，却发现一点用处也没有。\n\n&emsp;&emsp;哥哥开始做一些令人匪夷所思的事。比如，他会在三更半夜不睡觉一个人呆在黑暗里发呆。走夜路的时候，他必定得选有阴影的地方走。有时候，他会在夜里钻进古老的废弃旧屋。没有人知道他在里面干什么。有一次我忍不住问他到底在那些地方干嘛，怎么不害怕。禁不住我的纠缠，他告诉我一句我不太懂的话，当然，是用写的方式：他在体会孤独。\n&emsp;&emsp;孤独是什么我并不懂。我只知道哥哥再也不会发出声音。冬去秋来，我也习惯了和他在纸上写下一句两句长长短短的字。直到某天我发现他一个人在房间里唱歌。\n&emsp;&emsp;那是老鹰乐队的《加州旅馆》，音乐课的时候老师放给我们听过。当时我觉得旋律很好听，但是歌词我有些弄不明白了：“行驶在昏暗的荒漠公路上，凉风吹过我的头发。温馨的大麻香弥漫在空气中。”虽然如此，我还是喜欢这首歌。没想到，哥哥也喜欢。我激动地拍着门，让哥哥开锁。\n&emsp;&emsp;歌声突然停止了，一瞬间安静得犹如深夜。不一会儿，哥哥打开门。我冲进去，对哥哥喊到：“马修，继续唱，快点……”但是哥哥一脸严肃地拿着一张纸给我看，上面写着：“彼得，你记着，刚才的事情，永远不许对别人说。”\n&emsp;&emsp;从那以后起我再也没有见过哥哥说话。流星在我的夜空中一划而过，然后永远地消失不见，仿佛从来没有出现。多少年了，虽然十四岁那年我就已知道哥哥并不是哑巴，但是一直在怀疑那天听到的是幻觉。我始终没有说出那个秘密，连自己都不知道原因。\n\n&emsp;&emsp;第二天我照常去工作。在一堆人群中穿梭，交谈，微笑，拥抱。心情虽说不上很好，但是也不算沉重。死去的哥哥对我的人生仿佛没有造成什么影响。\n&emsp;&emsp;夜里安静下来的时候，我一个人来到酒吧。我并不经常来，但是不知道为什么今晚冥冥中仿佛有些东西把我牵引到这里。点了一杯鸡尾酒，我在一个单身女孩的旁边坐下。不一会儿，那女孩凑过来：\n&emsp;&emsp;“请我喝一杯？”\n&emsp;&emsp;“喝什么？”\n&emsp;&emsp;“和你一样咯。”\n&emsp;&emsp;我慢慢地喝着酒，跟女孩聊天。她一直在讲她男朋友是如何背着她和另一个女孩勾搭。我在一旁静静地听着。\n&emsp;&emsp;“叫什么？”她突然停下来。\n&emsp;&emsp;“彼得，你呢？”\n&emsp;&emsp;“冬妮亚。”\n&emsp;&emsp;“哦。”\n&emsp;&emsp;喂，你话很少嘛。”\n&emsp;&emsp;“没有啊，只是不想说话。”\n&emsp;&emsp;“喂，彼得，最近在干嘛？有没有发生什么特别的事，类似于你的女朋友出轨的事情？”\n&emsp;&emsp;“我是单身汉哩。”我摇摇头，“不过，前几天我哥哥死了。”\n&emsp;&emsp;“这样啊……真不好意思……话说，你的哥哥也跟你一样这么无聊吗？”\n&emsp;&emsp;我想了想，说：“我的哥哥不是个正常人。”\n&emsp;&emsp;“我喜欢不正常的人，”冬妮亚看着我的眼睛，“还有，我今晚不想回家。”\n\n&emsp;&emsp;次日我醒来的时候，冬妮亚早已起床，正在聚精会神地摆弄着床头柜旁边的东西。\n&emsp;&emsp;“喂，这些东西是？”\n&emsp;&emsp;“我哥哥留下的。”\n&emsp;&emsp;“哦……你哥哥还真是一个奇怪的人。”\n&emsp;&emsp;“怎么讲？”\n&emsp;&emsp;冬妮亚递给我一个本子。那是一本深蓝色封皮的笔记本，把东西带回来的时候我见过，但是没有在意。打开一看，里面什么都没有，只有一句话：\n&emsp;&emsp;彼得，我从来不希求你能理解我，但是我希望有一天你能理解你自己。\n&emsp;&emsp;“喂，彼得，我觉得你跟外面的人有很大的不同哦。”\n&emsp;&emsp;“是吗？”我点燃一支烟。\n&emsp;&emsp;“嗯……一个人的时候孤独吗？”\n&emsp;&emsp;我静静地把烟吸完，刚想回答她。突然间，我听到一个声音，它让我说不出话来。“行驶在昏暗的荒漠公路上，凉风吹过我的头发。温馨的大麻香弥漫在空气中。抬头遥望远方，我看到微弱的灯光……”许久，我站起来，望向窗外，大街上，汽车里，天空中，到处飘荡着沉默的《加州旅馆》。\n<br/>\n&emsp;&emsp;写于2014年。","source":"_posts/加州旅馆.md","raw":"---\ntitle: 加州旅馆\ndate: 2021-08-07 22:22:05\ncategories: 文学\n---\n\n<center>上</center><br/>\n\n<!--more-->\n\n&emsp;&emsp;1977年，我的哥哥突然像得了病似的，不会说话了。\n&emsp;&emsp;那年我十四岁——正是求知欲旺盛的时期。我一整天叽里咕噜地与人接话，交谈，嘴巴像战争里的来福枪，一看见人就疯狂地扫射。那时我的世界里仿佛没有生人这个概念，所有进入我视线的人都是我的朋友。与此相反的是我的哥哥马修——比我大两岁。他是个十分不爱说话的人。我们以一种互补的方式相处，可以说是亲密无间。而那时的哥哥除了沉默寡言，与普通人并没有什么不同。\n&emsp;&emsp;我出生在一个叫迈克多的小镇。如同这个州的其他小镇一样，我的家乡狭小，静谧，大河的支流从小镇的前沿穿行而过。和所有调皮的孩子一般，镇上所有的小孩都是我的朋友——小镇也就几十户人家。我们在河上划船，在河滩上野炊，上镇里最古老的树掏鸟蛋。而每次外出玩耍，我都带上我的哥哥——马修只有一个朋友，那就是我。\n&emsp;&emsp;平静的生活在十四岁那年来了个小插曲：我的哥哥哑巴了。无论别人如何叫他，他都不应，甚至连头也不回，只用点头和摇头来作答，仿佛他的世界只剩下一般疑问句。而作为最亲密的兄弟兼朋友，我也得不到他的任何口头答复。这变化来得毫无征兆。不过，他会用写的方式与我交谈。\n&emsp;&emsp;譬如说，我问他：“马修，你昨晚干嘛老在床上折腾？”他会在纸上写到：“睡不着。”\n&emsp;&emsp;家里人急坏了，带着他到附近的市镇里看病。作为哥哥的好朋友，我也跟着去了。\n&emsp;&emsp;那天清晨，天气很好，一团团白云镶嵌在蓝色的天空。正值夏季，阳光照在身上，有点热，我们都出汗了。不多时，我们来到一座气派的大房子。一个穿着笔挺黑色制服的人带我们进入里面。他在一个房间的门口停下，示意我们进去。\n&emsp;&emsp;一个留着络腮胡须的大夫——中等身材，稍微发胖，头上的毛发像秋天的茅草。他让哥哥站在他前面，不停地查看他的喉咙，五官。他打算让哥哥叫“啊——”，可惜没成功。接着他查看了他的手，再看脚。我询问手脚和哑巴有什么关系，他说：“身体的各部位是相通的。一个地方出了问题，可以从另一个地方窥见。”我想他接下来要看屁股了。不管我如何想象，我总是想不出两者之间有什么关系。\n&emsp;&emsp;半晌，他神色凝重地对爸爸说：“情况不太妙啊……不知是哪里出了问题……或许是喉咙，可我检查不出那里有什么问题。又或许是脚，你知道身体这玩意总是牵一发动全身的。”我正奇怪他为何不说屁股时，听见他摇摇头：“这种情况非常罕见，你们有必要到京都看一下，那里的大夫是出过国的，见过世面的，或许了解过这种病也说不定。”我悄悄问马修：“喂，你屁股疼吗？”他摇了摇头。\n&emsp;&emsp;总之，这一趟是白来了，钱也白花了。至于京都，听家里人说缓一缓。回到镇里，我成了焦点，所有的孩子都跑来问我：“喂，听说你哥哥哑巴了？”我对这些闲言装作听不见，实在被问烦的时候报之以破口大骂：“去你的，你他妈才哑巴呢！”\n\n&emsp;&emsp;然而我的哥哥马修，仿佛一点影响也没有，只是闭口不言，好像嘴巴里有某种神秘的宝物。有时候我甚至想甩他一巴掌，看看他是否会”哇“地一声吐出什么东西来。后来，我开始在纸上写下问题，让他来回答。以下是我们的对话：\n&emsp;&emsp;“马修，你病了吗？”\n&emsp;&emsp;“没有。”\n&emsp;&emsp;“为何你不说话？”\n&emsp;&emsp;“为何我要说话？”\n&emsp;&emsp;“这个……说话可以让别人了解你的想法啊。比如说，你饿了，如果你说：我要吃蛋糕，就会有人递一块草莓蛋糕给你。虽然并不是老有这好运。总之，说话是再正常不过了不是吗？”\n&emsp;&emsp;“有点道理，可我还是不想说话。”\n&emsp;&emsp;“这么着，我跟你打个赌：你要是到下下个礼拜连一句话也不说，我就给你一块草莓蛋糕。要是你说了，就给我两块，怎么样？”\n&emsp;&emsp;“好。”\n&emsp;&emsp;“你输定了，上个月我跟莎莉闹翻了。我发誓一辈子不再理她，不跟她说话了。见鬼，第二天我就主动约她去野炊。我等着你的蛋糕哦”\n&emsp;&emsp;“好。”\n&emsp;&emsp;那时我坚定地认为两块蛋糕我吃定了。然而很久之后我都不曾见他说过一句话，就仿佛夜里的天空从未划过我所企盼的流星。\n\n<center>下</center><br/>\n\n&emsp;&emsp;一个星期前我按例去疗养院看望哥哥。在昏暗的房间里，他依旧是安静，示意要到楼下的院子。那里种着一小片绿色的竹子。金色的夕阳在他面前洒下来。我看着他张开双臂，拥抱沉默的年华。\n&emsp;&emsp;那是我最后一次看到哥哥。两天后我接到疗养院打来的电话，说早上有人发现哥哥躺在床上，已死去多时。\n&emsp;&emsp;我急忙赶到疗养院。医生告诉我死因尚不明确，大概是突然的脑中风。但是我不明白哥哥平时身体没有什么大毛病，为什么上帝会这么急促地给他的人生画上句号。\n&emsp;&emsp;我把哥哥的所有东西都搬回家里。我孤身一人居住，不担心有人会介意。我和哥哥一直是最亲密的兄弟，尽管从二十岁开始他就因为无法跟外界正常沟通而住进了疗养院，尽管我一直都不了解他。\n&emsp;&emsp;人不在了世界依旧运转，我没有多大的伤感。但是有些东西却不可阻挡地出现在脑海。黑暗中我点燃一支烟，想理清些头绪，却发现一点用处也没有。\n\n&emsp;&emsp;哥哥开始做一些令人匪夷所思的事。比如，他会在三更半夜不睡觉一个人呆在黑暗里发呆。走夜路的时候，他必定得选有阴影的地方走。有时候，他会在夜里钻进古老的废弃旧屋。没有人知道他在里面干什么。有一次我忍不住问他到底在那些地方干嘛，怎么不害怕。禁不住我的纠缠，他告诉我一句我不太懂的话，当然，是用写的方式：他在体会孤独。\n&emsp;&emsp;孤独是什么我并不懂。我只知道哥哥再也不会发出声音。冬去秋来，我也习惯了和他在纸上写下一句两句长长短短的字。直到某天我发现他一个人在房间里唱歌。\n&emsp;&emsp;那是老鹰乐队的《加州旅馆》，音乐课的时候老师放给我们听过。当时我觉得旋律很好听，但是歌词我有些弄不明白了：“行驶在昏暗的荒漠公路上，凉风吹过我的头发。温馨的大麻香弥漫在空气中。”虽然如此，我还是喜欢这首歌。没想到，哥哥也喜欢。我激动地拍着门，让哥哥开锁。\n&emsp;&emsp;歌声突然停止了，一瞬间安静得犹如深夜。不一会儿，哥哥打开门。我冲进去，对哥哥喊到：“马修，继续唱，快点……”但是哥哥一脸严肃地拿着一张纸给我看，上面写着：“彼得，你记着，刚才的事情，永远不许对别人说。”\n&emsp;&emsp;从那以后起我再也没有见过哥哥说话。流星在我的夜空中一划而过，然后永远地消失不见，仿佛从来没有出现。多少年了，虽然十四岁那年我就已知道哥哥并不是哑巴，但是一直在怀疑那天听到的是幻觉。我始终没有说出那个秘密，连自己都不知道原因。\n\n&emsp;&emsp;第二天我照常去工作。在一堆人群中穿梭，交谈，微笑，拥抱。心情虽说不上很好，但是也不算沉重。死去的哥哥对我的人生仿佛没有造成什么影响。\n&emsp;&emsp;夜里安静下来的时候，我一个人来到酒吧。我并不经常来，但是不知道为什么今晚冥冥中仿佛有些东西把我牵引到这里。点了一杯鸡尾酒，我在一个单身女孩的旁边坐下。不一会儿，那女孩凑过来：\n&emsp;&emsp;“请我喝一杯？”\n&emsp;&emsp;“喝什么？”\n&emsp;&emsp;“和你一样咯。”\n&emsp;&emsp;我慢慢地喝着酒，跟女孩聊天。她一直在讲她男朋友是如何背着她和另一个女孩勾搭。我在一旁静静地听着。\n&emsp;&emsp;“叫什么？”她突然停下来。\n&emsp;&emsp;“彼得，你呢？”\n&emsp;&emsp;“冬妮亚。”\n&emsp;&emsp;“哦。”\n&emsp;&emsp;喂，你话很少嘛。”\n&emsp;&emsp;“没有啊，只是不想说话。”\n&emsp;&emsp;“喂，彼得，最近在干嘛？有没有发生什么特别的事，类似于你的女朋友出轨的事情？”\n&emsp;&emsp;“我是单身汉哩。”我摇摇头，“不过，前几天我哥哥死了。”\n&emsp;&emsp;“这样啊……真不好意思……话说，你的哥哥也跟你一样这么无聊吗？”\n&emsp;&emsp;我想了想，说：“我的哥哥不是个正常人。”\n&emsp;&emsp;“我喜欢不正常的人，”冬妮亚看着我的眼睛，“还有，我今晚不想回家。”\n\n&emsp;&emsp;次日我醒来的时候，冬妮亚早已起床，正在聚精会神地摆弄着床头柜旁边的东西。\n&emsp;&emsp;“喂，这些东西是？”\n&emsp;&emsp;“我哥哥留下的。”\n&emsp;&emsp;“哦……你哥哥还真是一个奇怪的人。”\n&emsp;&emsp;“怎么讲？”\n&emsp;&emsp;冬妮亚递给我一个本子。那是一本深蓝色封皮的笔记本，把东西带回来的时候我见过，但是没有在意。打开一看，里面什么都没有，只有一句话：\n&emsp;&emsp;彼得，我从来不希求你能理解我，但是我希望有一天你能理解你自己。\n&emsp;&emsp;“喂，彼得，我觉得你跟外面的人有很大的不同哦。”\n&emsp;&emsp;“是吗？”我点燃一支烟。\n&emsp;&emsp;“嗯……一个人的时候孤独吗？”\n&emsp;&emsp;我静静地把烟吸完，刚想回答她。突然间，我听到一个声音，它让我说不出话来。“行驶在昏暗的荒漠公路上，凉风吹过我的头发。温馨的大麻香弥漫在空气中。抬头遥望远方，我看到微弱的灯光……”许久，我站起来，望向窗外，大街上，汽车里，天空中，到处飘荡着沉默的《加州旅馆》。\n<br/>\n&emsp;&emsp;写于2014年。","slug":"加州旅馆","published":1,"updated":"2021-08-07T14:41:51.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm63q00128hsptd3pny7c","content":"<p><center>上</center><br></p>\n<a id=\"more\"></a>\n<p>&emsp;&emsp;1977年，我的哥哥突然像得了病似的，不会说话了。<br>&emsp;&emsp;那年我十四岁——正是求知欲旺盛的时期。我一整天叽里咕噜地与人接话，交谈，嘴巴像战争里的来福枪，一看见人就疯狂地扫射。那时我的世界里仿佛没有生人这个概念，所有进入我视线的人都是我的朋友。与此相反的是我的哥哥马修——比我大两岁。他是个十分不爱说话的人。我们以一种互补的方式相处，可以说是亲密无间。而那时的哥哥除了沉默寡言，与普通人并没有什么不同。<br>&emsp;&emsp;我出生在一个叫迈克多的小镇。如同这个州的其他小镇一样，我的家乡狭小，静谧，大河的支流从小镇的前沿穿行而过。和所有调皮的孩子一般，镇上所有的小孩都是我的朋友——小镇也就几十户人家。我们在河上划船，在河滩上野炊，上镇里最古老的树掏鸟蛋。而每次外出玩耍，我都带上我的哥哥——马修只有一个朋友，那就是我。<br>&emsp;&emsp;平静的生活在十四岁那年来了个小插曲：我的哥哥哑巴了。无论别人如何叫他，他都不应，甚至连头也不回，只用点头和摇头来作答，仿佛他的世界只剩下一般疑问句。而作为最亲密的兄弟兼朋友，我也得不到他的任何口头答复。这变化来得毫无征兆。不过，他会用写的方式与我交谈。<br>&emsp;&emsp;譬如说，我问他：“马修，你昨晚干嘛老在床上折腾？”他会在纸上写到：“睡不着。”<br>&emsp;&emsp;家里人急坏了，带着他到附近的市镇里看病。作为哥哥的好朋友，我也跟着去了。<br>&emsp;&emsp;那天清晨，天气很好，一团团白云镶嵌在蓝色的天空。正值夏季，阳光照在身上，有点热，我们都出汗了。不多时，我们来到一座气派的大房子。一个穿着笔挺黑色制服的人带我们进入里面。他在一个房间的门口停下，示意我们进去。<br>&emsp;&emsp;一个留着络腮胡须的大夫——中等身材，稍微发胖，头上的毛发像秋天的茅草。他让哥哥站在他前面，不停地查看他的喉咙，五官。他打算让哥哥叫“啊——”，可惜没成功。接着他查看了他的手，再看脚。我询问手脚和哑巴有什么关系，他说：“身体的各部位是相通的。一个地方出了问题，可以从另一个地方窥见。”我想他接下来要看屁股了。不管我如何想象，我总是想不出两者之间有什么关系。<br>&emsp;&emsp;半晌，他神色凝重地对爸爸说：“情况不太妙啊……不知是哪里出了问题……或许是喉咙，可我检查不出那里有什么问题。又或许是脚，你知道身体这玩意总是牵一发动全身的。”我正奇怪他为何不说屁股时，听见他摇摇头：“这种情况非常罕见，你们有必要到京都看一下，那里的大夫是出过国的，见过世面的，或许了解过这种病也说不定。”我悄悄问马修：“喂，你屁股疼吗？”他摇了摇头。<br>&emsp;&emsp;总之，这一趟是白来了，钱也白花了。至于京都，听家里人说缓一缓。回到镇里，我成了焦点，所有的孩子都跑来问我：“喂，听说你哥哥哑巴了？”我对这些闲言装作听不见，实在被问烦的时候报之以破口大骂：“去你的，你他妈才哑巴呢！”</p>\n<p>&emsp;&emsp;然而我的哥哥马修，仿佛一点影响也没有，只是闭口不言，好像嘴巴里有某种神秘的宝物。有时候我甚至想甩他一巴掌，看看他是否会”哇“地一声吐出什么东西来。后来，我开始在纸上写下问题，让他来回答。以下是我们的对话：<br>&emsp;&emsp;“马修，你病了吗？”<br>&emsp;&emsp;“没有。”<br>&emsp;&emsp;“为何你不说话？”<br>&emsp;&emsp;“为何我要说话？”<br>&emsp;&emsp;“这个……说话可以让别人了解你的想法啊。比如说，你饿了，如果你说：我要吃蛋糕，就会有人递一块草莓蛋糕给你。虽然并不是老有这好运。总之，说话是再正常不过了不是吗？”<br>&emsp;&emsp;“有点道理，可我还是不想说话。”<br>&emsp;&emsp;“这么着，我跟你打个赌：你要是到下下个礼拜连一句话也不说，我就给你一块草莓蛋糕。要是你说了，就给我两块，怎么样？”<br>&emsp;&emsp;“好。”<br>&emsp;&emsp;“你输定了，上个月我跟莎莉闹翻了。我发誓一辈子不再理她，不跟她说话了。见鬼，第二天我就主动约她去野炊。我等着你的蛋糕哦”<br>&emsp;&emsp;“好。”<br>&emsp;&emsp;那时我坚定地认为两块蛋糕我吃定了。然而很久之后我都不曾见他说过一句话，就仿佛夜里的天空从未划过我所企盼的流星。</p>\n<p><center>下</center><br></p>\n<p>&emsp;&emsp;一个星期前我按例去疗养院看望哥哥。在昏暗的房间里，他依旧是安静，示意要到楼下的院子。那里种着一小片绿色的竹子。金色的夕阳在他面前洒下来。我看着他张开双臂，拥抱沉默的年华。<br>&emsp;&emsp;那是我最后一次看到哥哥。两天后我接到疗养院打来的电话，说早上有人发现哥哥躺在床上，已死去多时。<br>&emsp;&emsp;我急忙赶到疗养院。医生告诉我死因尚不明确，大概是突然的脑中风。但是我不明白哥哥平时身体没有什么大毛病，为什么上帝会这么急促地给他的人生画上句号。<br>&emsp;&emsp;我把哥哥的所有东西都搬回家里。我孤身一人居住，不担心有人会介意。我和哥哥一直是最亲密的兄弟，尽管从二十岁开始他就因为无法跟外界正常沟通而住进了疗养院，尽管我一直都不了解他。<br>&emsp;&emsp;人不在了世界依旧运转，我没有多大的伤感。但是有些东西却不可阻挡地出现在脑海。黑暗中我点燃一支烟，想理清些头绪，却发现一点用处也没有。</p>\n<p>&emsp;&emsp;哥哥开始做一些令人匪夷所思的事。比如，他会在三更半夜不睡觉一个人呆在黑暗里发呆。走夜路的时候，他必定得选有阴影的地方走。有时候，他会在夜里钻进古老的废弃旧屋。没有人知道他在里面干什么。有一次我忍不住问他到底在那些地方干嘛，怎么不害怕。禁不住我的纠缠，他告诉我一句我不太懂的话，当然，是用写的方式：他在体会孤独。<br>&emsp;&emsp;孤独是什么我并不懂。我只知道哥哥再也不会发出声音。冬去秋来，我也习惯了和他在纸上写下一句两句长长短短的字。直到某天我发现他一个人在房间里唱歌。<br>&emsp;&emsp;那是老鹰乐队的《加州旅馆》，音乐课的时候老师放给我们听过。当时我觉得旋律很好听，但是歌词我有些弄不明白了：“行驶在昏暗的荒漠公路上，凉风吹过我的头发。温馨的大麻香弥漫在空气中。”虽然如此，我还是喜欢这首歌。没想到，哥哥也喜欢。我激动地拍着门，让哥哥开锁。<br>&emsp;&emsp;歌声突然停止了，一瞬间安静得犹如深夜。不一会儿，哥哥打开门。我冲进去，对哥哥喊到：“马修，继续唱，快点……”但是哥哥一脸严肃地拿着一张纸给我看，上面写着：“彼得，你记着，刚才的事情，永远不许对别人说。”<br>&emsp;&emsp;从那以后起我再也没有见过哥哥说话。流星在我的夜空中一划而过，然后永远地消失不见，仿佛从来没有出现。多少年了，虽然十四岁那年我就已知道哥哥并不是哑巴，但是一直在怀疑那天听到的是幻觉。我始终没有说出那个秘密，连自己都不知道原因。</p>\n<p>&emsp;&emsp;第二天我照常去工作。在一堆人群中穿梭，交谈，微笑，拥抱。心情虽说不上很好，但是也不算沉重。死去的哥哥对我的人生仿佛没有造成什么影响。<br>&emsp;&emsp;夜里安静下来的时候，我一个人来到酒吧。我并不经常来，但是不知道为什么今晚冥冥中仿佛有些东西把我牵引到这里。点了一杯鸡尾酒，我在一个单身女孩的旁边坐下。不一会儿，那女孩凑过来：<br>&emsp;&emsp;“请我喝一杯？”<br>&emsp;&emsp;“喝什么？”<br>&emsp;&emsp;“和你一样咯。”<br>&emsp;&emsp;我慢慢地喝着酒，跟女孩聊天。她一直在讲她男朋友是如何背着她和另一个女孩勾搭。我在一旁静静地听着。<br>&emsp;&emsp;“叫什么？”她突然停下来。<br>&emsp;&emsp;“彼得，你呢？”<br>&emsp;&emsp;“冬妮亚。”<br>&emsp;&emsp;“哦。”<br>&emsp;&emsp;喂，你话很少嘛。”<br>&emsp;&emsp;“没有啊，只是不想说话。”<br>&emsp;&emsp;“喂，彼得，最近在干嘛？有没有发生什么特别的事，类似于你的女朋友出轨的事情？”<br>&emsp;&emsp;“我是单身汉哩。”我摇摇头，“不过，前几天我哥哥死了。”<br>&emsp;&emsp;“这样啊……真不好意思……话说，你的哥哥也跟你一样这么无聊吗？”<br>&emsp;&emsp;我想了想，说：“我的哥哥不是个正常人。”<br>&emsp;&emsp;“我喜欢不正常的人，”冬妮亚看着我的眼睛，“还有，我今晚不想回家。”</p>\n<p>&emsp;&emsp;次日我醒来的时候，冬妮亚早已起床，正在聚精会神地摆弄着床头柜旁边的东西。<br>&emsp;&emsp;“喂，这些东西是？”<br>&emsp;&emsp;“我哥哥留下的。”<br>&emsp;&emsp;“哦……你哥哥还真是一个奇怪的人。”<br>&emsp;&emsp;“怎么讲？”<br>&emsp;&emsp;冬妮亚递给我一个本子。那是一本深蓝色封皮的笔记本，把东西带回来的时候我见过，但是没有在意。打开一看，里面什么都没有，只有一句话：<br>&emsp;&emsp;彼得，我从来不希求你能理解我，但是我希望有一天你能理解你自己。<br>&emsp;&emsp;“喂，彼得，我觉得你跟外面的人有很大的不同哦。”<br>&emsp;&emsp;“是吗？”我点燃一支烟。<br>&emsp;&emsp;“嗯……一个人的时候孤独吗？”<br>&emsp;&emsp;我静静地把烟吸完，刚想回答她。突然间，我听到一个声音，它让我说不出话来。“行驶在昏暗的荒漠公路上，凉风吹过我的头发。温馨的大麻香弥漫在空气中。抬头遥望远方，我看到微弱的灯光……”许久，我站起来，望向窗外，大街上，汽车里，天空中，到处飘荡着沉默的《加州旅馆》。<br><br><br>&emsp;&emsp;写于2014年。</p>\n","site":{"data":{}},"excerpt":"<p><center>上</center><br></p>","more":"<p>&emsp;&emsp;1977年，我的哥哥突然像得了病似的，不会说话了。<br>&emsp;&emsp;那年我十四岁——正是求知欲旺盛的时期。我一整天叽里咕噜地与人接话，交谈，嘴巴像战争里的来福枪，一看见人就疯狂地扫射。那时我的世界里仿佛没有生人这个概念，所有进入我视线的人都是我的朋友。与此相反的是我的哥哥马修——比我大两岁。他是个十分不爱说话的人。我们以一种互补的方式相处，可以说是亲密无间。而那时的哥哥除了沉默寡言，与普通人并没有什么不同。<br>&emsp;&emsp;我出生在一个叫迈克多的小镇。如同这个州的其他小镇一样，我的家乡狭小，静谧，大河的支流从小镇的前沿穿行而过。和所有调皮的孩子一般，镇上所有的小孩都是我的朋友——小镇也就几十户人家。我们在河上划船，在河滩上野炊，上镇里最古老的树掏鸟蛋。而每次外出玩耍，我都带上我的哥哥——马修只有一个朋友，那就是我。<br>&emsp;&emsp;平静的生活在十四岁那年来了个小插曲：我的哥哥哑巴了。无论别人如何叫他，他都不应，甚至连头也不回，只用点头和摇头来作答，仿佛他的世界只剩下一般疑问句。而作为最亲密的兄弟兼朋友，我也得不到他的任何口头答复。这变化来得毫无征兆。不过，他会用写的方式与我交谈。<br>&emsp;&emsp;譬如说，我问他：“马修，你昨晚干嘛老在床上折腾？”他会在纸上写到：“睡不着。”<br>&emsp;&emsp;家里人急坏了，带着他到附近的市镇里看病。作为哥哥的好朋友，我也跟着去了。<br>&emsp;&emsp;那天清晨，天气很好，一团团白云镶嵌在蓝色的天空。正值夏季，阳光照在身上，有点热，我们都出汗了。不多时，我们来到一座气派的大房子。一个穿着笔挺黑色制服的人带我们进入里面。他在一个房间的门口停下，示意我们进去。<br>&emsp;&emsp;一个留着络腮胡须的大夫——中等身材，稍微发胖，头上的毛发像秋天的茅草。他让哥哥站在他前面，不停地查看他的喉咙，五官。他打算让哥哥叫“啊——”，可惜没成功。接着他查看了他的手，再看脚。我询问手脚和哑巴有什么关系，他说：“身体的各部位是相通的。一个地方出了问题，可以从另一个地方窥见。”我想他接下来要看屁股了。不管我如何想象，我总是想不出两者之间有什么关系。<br>&emsp;&emsp;半晌，他神色凝重地对爸爸说：“情况不太妙啊……不知是哪里出了问题……或许是喉咙，可我检查不出那里有什么问题。又或许是脚，你知道身体这玩意总是牵一发动全身的。”我正奇怪他为何不说屁股时，听见他摇摇头：“这种情况非常罕见，你们有必要到京都看一下，那里的大夫是出过国的，见过世面的，或许了解过这种病也说不定。”我悄悄问马修：“喂，你屁股疼吗？”他摇了摇头。<br>&emsp;&emsp;总之，这一趟是白来了，钱也白花了。至于京都，听家里人说缓一缓。回到镇里，我成了焦点，所有的孩子都跑来问我：“喂，听说你哥哥哑巴了？”我对这些闲言装作听不见，实在被问烦的时候报之以破口大骂：“去你的，你他妈才哑巴呢！”</p>\n<p>&emsp;&emsp;然而我的哥哥马修，仿佛一点影响也没有，只是闭口不言，好像嘴巴里有某种神秘的宝物。有时候我甚至想甩他一巴掌，看看他是否会”哇“地一声吐出什么东西来。后来，我开始在纸上写下问题，让他来回答。以下是我们的对话：<br>&emsp;&emsp;“马修，你病了吗？”<br>&emsp;&emsp;“没有。”<br>&emsp;&emsp;“为何你不说话？”<br>&emsp;&emsp;“为何我要说话？”<br>&emsp;&emsp;“这个……说话可以让别人了解你的想法啊。比如说，你饿了，如果你说：我要吃蛋糕，就会有人递一块草莓蛋糕给你。虽然并不是老有这好运。总之，说话是再正常不过了不是吗？”<br>&emsp;&emsp;“有点道理，可我还是不想说话。”<br>&emsp;&emsp;“这么着，我跟你打个赌：你要是到下下个礼拜连一句话也不说，我就给你一块草莓蛋糕。要是你说了，就给我两块，怎么样？”<br>&emsp;&emsp;“好。”<br>&emsp;&emsp;“你输定了，上个月我跟莎莉闹翻了。我发誓一辈子不再理她，不跟她说话了。见鬼，第二天我就主动约她去野炊。我等着你的蛋糕哦”<br>&emsp;&emsp;“好。”<br>&emsp;&emsp;那时我坚定地认为两块蛋糕我吃定了。然而很久之后我都不曾见他说过一句话，就仿佛夜里的天空从未划过我所企盼的流星。</p>\n<p><center>下</center><br></p>\n<p>&emsp;&emsp;一个星期前我按例去疗养院看望哥哥。在昏暗的房间里，他依旧是安静，示意要到楼下的院子。那里种着一小片绿色的竹子。金色的夕阳在他面前洒下来。我看着他张开双臂，拥抱沉默的年华。<br>&emsp;&emsp;那是我最后一次看到哥哥。两天后我接到疗养院打来的电话，说早上有人发现哥哥躺在床上，已死去多时。<br>&emsp;&emsp;我急忙赶到疗养院。医生告诉我死因尚不明确，大概是突然的脑中风。但是我不明白哥哥平时身体没有什么大毛病，为什么上帝会这么急促地给他的人生画上句号。<br>&emsp;&emsp;我把哥哥的所有东西都搬回家里。我孤身一人居住，不担心有人会介意。我和哥哥一直是最亲密的兄弟，尽管从二十岁开始他就因为无法跟外界正常沟通而住进了疗养院，尽管我一直都不了解他。<br>&emsp;&emsp;人不在了世界依旧运转，我没有多大的伤感。但是有些东西却不可阻挡地出现在脑海。黑暗中我点燃一支烟，想理清些头绪，却发现一点用处也没有。</p>\n<p>&emsp;&emsp;哥哥开始做一些令人匪夷所思的事。比如，他会在三更半夜不睡觉一个人呆在黑暗里发呆。走夜路的时候，他必定得选有阴影的地方走。有时候，他会在夜里钻进古老的废弃旧屋。没有人知道他在里面干什么。有一次我忍不住问他到底在那些地方干嘛，怎么不害怕。禁不住我的纠缠，他告诉我一句我不太懂的话，当然，是用写的方式：他在体会孤独。<br>&emsp;&emsp;孤独是什么我并不懂。我只知道哥哥再也不会发出声音。冬去秋来，我也习惯了和他在纸上写下一句两句长长短短的字。直到某天我发现他一个人在房间里唱歌。<br>&emsp;&emsp;那是老鹰乐队的《加州旅馆》，音乐课的时候老师放给我们听过。当时我觉得旋律很好听，但是歌词我有些弄不明白了：“行驶在昏暗的荒漠公路上，凉风吹过我的头发。温馨的大麻香弥漫在空气中。”虽然如此，我还是喜欢这首歌。没想到，哥哥也喜欢。我激动地拍着门，让哥哥开锁。<br>&emsp;&emsp;歌声突然停止了，一瞬间安静得犹如深夜。不一会儿，哥哥打开门。我冲进去，对哥哥喊到：“马修，继续唱，快点……”但是哥哥一脸严肃地拿着一张纸给我看，上面写着：“彼得，你记着，刚才的事情，永远不许对别人说。”<br>&emsp;&emsp;从那以后起我再也没有见过哥哥说话。流星在我的夜空中一划而过，然后永远地消失不见，仿佛从来没有出现。多少年了，虽然十四岁那年我就已知道哥哥并不是哑巴，但是一直在怀疑那天听到的是幻觉。我始终没有说出那个秘密，连自己都不知道原因。</p>\n<p>&emsp;&emsp;第二天我照常去工作。在一堆人群中穿梭，交谈，微笑，拥抱。心情虽说不上很好，但是也不算沉重。死去的哥哥对我的人生仿佛没有造成什么影响。<br>&emsp;&emsp;夜里安静下来的时候，我一个人来到酒吧。我并不经常来，但是不知道为什么今晚冥冥中仿佛有些东西把我牵引到这里。点了一杯鸡尾酒，我在一个单身女孩的旁边坐下。不一会儿，那女孩凑过来：<br>&emsp;&emsp;“请我喝一杯？”<br>&emsp;&emsp;“喝什么？”<br>&emsp;&emsp;“和你一样咯。”<br>&emsp;&emsp;我慢慢地喝着酒，跟女孩聊天。她一直在讲她男朋友是如何背着她和另一个女孩勾搭。我在一旁静静地听着。<br>&emsp;&emsp;“叫什么？”她突然停下来。<br>&emsp;&emsp;“彼得，你呢？”<br>&emsp;&emsp;“冬妮亚。”<br>&emsp;&emsp;“哦。”<br>&emsp;&emsp;喂，你话很少嘛。”<br>&emsp;&emsp;“没有啊，只是不想说话。”<br>&emsp;&emsp;“喂，彼得，最近在干嘛？有没有发生什么特别的事，类似于你的女朋友出轨的事情？”<br>&emsp;&emsp;“我是单身汉哩。”我摇摇头，“不过，前几天我哥哥死了。”<br>&emsp;&emsp;“这样啊……真不好意思……话说，你的哥哥也跟你一样这么无聊吗？”<br>&emsp;&emsp;我想了想，说：“我的哥哥不是个正常人。”<br>&emsp;&emsp;“我喜欢不正常的人，”冬妮亚看着我的眼睛，“还有，我今晚不想回家。”</p>\n<p>&emsp;&emsp;次日我醒来的时候，冬妮亚早已起床，正在聚精会神地摆弄着床头柜旁边的东西。<br>&emsp;&emsp;“喂，这些东西是？”<br>&emsp;&emsp;“我哥哥留下的。”<br>&emsp;&emsp;“哦……你哥哥还真是一个奇怪的人。”<br>&emsp;&emsp;“怎么讲？”<br>&emsp;&emsp;冬妮亚递给我一个本子。那是一本深蓝色封皮的笔记本，把东西带回来的时候我见过，但是没有在意。打开一看，里面什么都没有，只有一句话：<br>&emsp;&emsp;彼得，我从来不希求你能理解我，但是我希望有一天你能理解你自己。<br>&emsp;&emsp;“喂，彼得，我觉得你跟外面的人有很大的不同哦。”<br>&emsp;&emsp;“是吗？”我点燃一支烟。<br>&emsp;&emsp;“嗯……一个人的时候孤独吗？”<br>&emsp;&emsp;我静静地把烟吸完，刚想回答她。突然间，我听到一个声音，它让我说不出话来。“行驶在昏暗的荒漠公路上，凉风吹过我的头发。温馨的大麻香弥漫在空气中。抬头遥望远方，我看到微弱的灯光……”许久，我站起来，望向窗外，大街上，汽车里，天空中，到处飘荡着沉默的《加州旅馆》。<br><br><br>&emsp;&emsp;写于2014年。</p>"},{"title":"夏","date":"2019-09-19T14:49:42.000Z","_content":"\n&emsp;&emsp;一\n\n<!--more-->\n\n&emsp;&emsp;“爱情是一场宿醉。”\n\n&emsp;&emsp;说这话的时候，我正在街上毫无目的地闲逛。是个阴天，天空阴沉沉的一片。但是没有一点压抑的感觉，反而有些晴天所没有的舒适。正是这个时候，我遇到了夏。\n&emsp;&emsp;坦白地讲，夏并不是那种十分好看的女孩，可以一眼就把人的目光吸引住。跟她同班一个学期之后我甚至想像不出她的样子，只是模糊地记得夏这个名字好几次从我耳边掠过。大抵世上所有安静而又不很出彩的女孩给人的印象总是如此。\n&emsp;&emsp;然而那时候我竟莫名其妙地被吸引住了，以至于忘记了迈步。这令我惊异。我一动不动地看着她弯下身子，递给一个乞讨的老头钱（我没看清多少，据我的估计，大概有十来块钱之多）。老头连胜道谢，双手作揖膜拜。当她站起来的时候，我已经无法继续悠闲地看着来往的行人了。我的世界茫然地上升，上升，像天上的星辰般永不堕落。\n&emsp;&emsp;夏站起身子，朝我迎面走了过来。“嘿！”她说，随即微笑着从我旁边走过。我没来得及回礼，跟她说一声“嗨！”只能眼睁睁地看着她的背影越走越远，消失在人海之中。\n这时候我才注意到，她穿着一件白色连衣裙，长发披在肩后。 \n\n&emsp;&emsp;二\n\n&emsp;&emsp;从那以后我不可能再忽视夏的存在。我注意到她喜欢穿白色衣服，喜欢扎马尾（不知为何那天她没有扎起来），喜欢用手掌遮住嘴巴“格格”地笑，习惯在写字的时候把笔帽抓在手里，习惯在黄昏的时候安静地发呆。\n&emsp;&emsp;但是我没有想要靠近的意思。我思索爱情的本质，心想那是一场骗局，一切真心假意的表白都是变相的索取。我们渴望爱情归根到底只是希望从对方看到自己的影子。这种感觉很美好，却不太真实。我已经过了幻想的年龄了，我需要的是真实的生活。\n&emsp;&emsp;某一天我和朋友们在咖啡馆闲坐。又是一个无聊的午后，我搅拌着杯里的咖啡，无意中看见夏正和一个男生面对面坐在馆中的一个角落里。\n&emsp;&emsp;于是我的视线无法控制地转移到他们身上。夏背靠墙朝外，我可以清楚地看到她穿着一件浅蓝色牛仔衬衫，没有扣上，里边的白色内衣露了出来。她笑着和对面的男生说着话。那男生侧背着我，我无法看清他的全貌，但是可以肯定我不认识他。夏依旧手里抓着白色的餐纸，用来代替平时的笔帽。与往常不同的是她没有扎马尾，长发披在肩头。\n&emsp;&emsp;按理来说，我应该感到难过，嫉妒，甚至愤怒才对。然而我没有。我就坐在那里边喝着咖啡边不时地撇上几眼。夏表现出来的是她很高兴，一直不停地说着话。这在平时几乎很难见到。那个男生却显得有些过分冷静，以至于有可能被认为是漫不经心。\n&emsp;&emsp;大约过了一个钟头，他们站起身子，结账离开。我看着他们手挽手走出咖啡馆，直到再也看不见。\n我转过头，看了看表，时间是下午五点二十一分。\n&emsp;&emsp;“走吧，”我说，“晚上有课。”\n&emsp;&emsp;于是我们也隐没在人群里。\n\n&emsp;&emsp;三\n\n&emsp;&emsp;高中时代我谈过几次恋爱，均以失败告终。这也许很大部分原因要归咎在我身上。我总是无法像别人那样与女孩子甜蜜地交往，逛街，亲吻。大多数时候，我是沉默的，安静地听着对方的诉说。这并不代表我不爱她们。事实上，有一次分手我还为此而伤心流泪。但是不同的人有不同的天性，盖茨比为了一个女人可以做到那么疯狂的事情，我觉得自己无论如何都做不到。就我自己而言，我觉得这并不是我的错。\n&emsp;&emsp;每个星期总有几个下午没课，我照例挑一两个下午去咖啡馆闲坐，打打扑克。没有人同去的时候我就看书，看《挪威的森林》。我喜欢活泼不羁的绿子，喜欢她说：“嘿，渡边君，明天到我家玩一次可好？”可是我再也没有看见夏在那里出现过，没有看见她坐在角落里披着一袭长发，笑得满脸通红。\n&emsp;&emsp;如此这般过了两个多月，我每天在教室里上课，看着夏扎着马尾，抓着笔帽写字，心里却没有渴望。但是不知为何我渐渐对咖啡馆失去了兴趣，觉得那种过分安静的气氛实在折磨人。我渐渐地把精力转向酒吧，每个周末去那里喝几杯啤酒成为我的常态。\n&emsp;&emsp;一个周六晚上，我正一个人喝着冰凉的啤酒，边看着酒吧里吵闹的人群。架在墙上的电视机正在播放着音乐频道。不久之后，王菲出现在屏幕上，正唱着《流年》。酒吧里太吵，很难听清她究竟唱的是什么。然而歌词却清晰可见：\n&emsp;&emsp;“遇见一场烟火的表演，用一场轮回的时间……”\n&emsp;&emsp;歌词太过于虚渺，我没有太大的感觉。但是，“遇见一场烟火的表演”，这句话却令我念念不忘。于是我一面念着这句不知为何的话，一面看着夏走进来。\n&emsp;&emsp;夏是一个人来的，穿着白色上衣和紧身牛仔裤。在橘黄色的灯光下，她的身材显得异常妙曼。然而我所关心的却是她没有扎马尾，长发披了下来。\n&emsp;&emsp;“嘿！”，我向她打了个招呼，“夏！”\n&emsp;&emsp;她转过头，“嗨！”，她说，看了我一眼，“对面有人坐？”\n&emsp;&emsp;“没有。”\n&emsp;&emsp;“可以坐？”\n&emsp;&emsp;“当然。”\n&emsp;&emsp;于是她到柜台上拿了一杯鸡尾酒，坐了下来。\n&emsp;&emsp;“你经常来吗？”她问。\n&emsp;&emsp;“算是吧，每个周末我都来。”\n&emsp;&emsp;“我也差不多，不过我是工作日来的。”\n&emsp;&emsp;“是吗？你好像不这么逃课啊？”\n&emsp;&emsp;“我上完课才来。”\n&emsp;&emsp;那天晚上我们聊了很多，一直到夜半十二点。公寓的门已经关了。不过没什么，我翻墙而过。\n&emsp;&emsp;回到公寓里，我倒头就睡。\n\n&emsp;&emsp;四\n\n&emsp;&emsp;那晚以后，我把周末去酒吧的习惯改为工作日去。在那个时间点我经常遇到夏。渐渐地我们几乎是约定俗成地同时到达。有时候一来就是连续五天。但是我们没有一起来过，从来没有走同一条路。\n&emsp;&emsp;在那些夜晚里，我们喝着酒，伴随着慵懒又吵闹的人声和音乐，时而谈话，时而彼此沉默不语。我们谈到课程，谈到喜欢的电影和书籍，谈《V字仇杀队》，谈《阿黛尔的生活》，谈一切与现实脱轨的梦幻的事物。电视里依旧不厌其烦地播放着音乐节目，唯独没有王菲的《流年》。\n&emsp;&emsp;我曾试着问夏是否单身，为何总是一个人来。然而夏说：“嘿，我说寒，我们能不谈论这个话题么？”\n&emsp;&emsp;“当然可以。我只是随便问问。”我说。\n&emsp;&emsp;一天晚上，我们喝了两杯鸡尾酒之后，夏拉着我要去跳舞。我对舞蹈一窍不通，连连摆手拒绝。但是夏坚持要和我一起跳，僵持到最后，她说：\n&emsp;&emsp;“再这样我可要生气了！”\n&emsp;&emsp;无奈之下，我只好随着夏来到跳舞的人群中。夏引导着我，让我放松点。我随着夏的步伐极不自然的晃动着身体，跟着她在这动感的音乐和炫目的灯光下摇曳。渐渐地我们靠得越来越近，几乎是互相摩擦着彼此的肌肤。我可以清楚地闻到夏的体香，与以往我所接触的女孩相似而又有一丝不同。\n&emsp;&emsp;然而我始终保持着冷静，没有因为这似是而非的挑逗而乱了分寸。这令我感到奇怪，一切青春的定律在夏身上似乎不起作用。对我来说，此时的夏仿佛一个跳舞的机器人，跟周围另外一群机器人一同伴随着这酒吧里迷乱的情绪在我眼前跳跃，跳跃，永不停息。\n&emsp;&emsp;那天晚上夏喝了很多酒，喝完鸡尾酒又喝白兰地，一杯又一杯。我担心她喝坏了身体，更担忧的是她不省人事之后我该送她到哪里。此时的公寓怕是已经关门，我又不能带着一个喝醉酒的女孩在夜里翻墙。\n&emsp;&emsp;“你知道吗？我几乎很少醉过哩。”夏涨着微红的脸对我说。\n&emsp;&emsp;“是的，看得出来，换做我喝这么多早就趴下睡了。”\n&emsp;&emsp;“来，喝完这杯我们再去跳一次。”\n&emsp;&emsp;我无法离开，只能再次跟着夏来到舞池。\n&emsp;&emsp;于是音乐继续，我们摇曳依旧。我看着夏的眼神越来越迷离，仿佛已经脱离到另外一个世界。终于我也在这迷离中失掉了自己，热烈而笨拙地回应着夏狂舞。世界仿佛已经消失不见，我感觉我绷紧已久的神经正慢慢松驰，松驰，直到遥远的末日。\n&emsp;&emsp;到我们离开的时候，夏已经醉得无法行走了。我酒意已深，但还没到不能控制的地步。我扶着夏走在寂静无人的深夜里，街上的路灯照射出两个人的倒影。我思索着接下来应该如何处理。这时夏说：\n&emsp;&emsp;“嘿，我们到旅馆开个房间如何？”\n&emsp;&emsp;“也只能这样了。”我说。\n\n&emsp;&emsp;五\n\n&emsp;&emsp;在旅馆昏黄的灯光下，我和夏极为自然地接吻。我脱下她的衣服，用手指轻轻捏她的乳头。夏的乳房匀称而略为丰满。我把头埋在双峰之间，然后吻遍她的全身。夏的呻吟不时时地响起。\n&emsp;&emsp;不多时，我灭了灯。万籁寂静的黑暗里只听见一阵阵喘息声。当我探至底谷的时候，夏的身子微微一颤。我似乎听到轻轻的叹气声。我抱住她，一边不断地抽动，一边吻着她的耳垂。夏一直抽搐着身体迎合我。整个夜晚她的呼吸声伴随着呻吟声一直在我耳边缭绕，仿佛来自天国的歌声。\n&emsp;&emsp;第二天醒来的时候，身边只剩空枕一个。夏正站在窗台前面边吸着烟，边看着窗外发呆。我洗漱完毕，夏依旧还在看着窗外。\n&emsp;&emsp;“喂，在看什么？”我问。\n&emsp;&emsp;“没有，”她盯着前方，继而转过头来，“抽烟不？”\n&emsp;&emsp;“谢谢，我不抽烟。”\n&emsp;&emsp;“我其实也不抽烟。”\n&emsp;&emsp;“那怎么……”\n&emsp;&emsp;她转过脸去，继续看着窗外我无法体会的东西，“我一直随身携带着香烟，然而几乎没有抽过。但是我不知怎的现在想抽得很，想狠狠地抽它一顿。仿佛我一直携带在身上就为了这一刻。”\n&emsp;&emsp;“那接下来怎么办？继续抽烟还是回去？”，我看了看表，“现在回去上第三节课？”\n&emsp;&emsp;“走吧。”夏扔下快抽完的烟头，把它踩灭。\n&emsp;&emsp;一路上我们都没有说话，仿佛两个不认识的人因一种奇妙的因素走到一起。街上的行人车辆来去匆匆，一点也没有顾及两个醉酒逃学的人。\n&emsp;&emsp;不知为何，一路我都有一种莫名的感觉，感觉夏从来没有醉过，从昨晚到现在，她一直都是清醒的。\n&emsp;&emsp;走进校门口的时候，夏把头发扎了起来。\n\n&emsp;&emsp;六\n\n&emsp;&emsp;那个星期剩下的几天里，我都没有去酒吧，因为要和夏见面。并不是我对夏不再有感觉。事实上，那晚之后我怀念夏的程度，比任何时候都要强烈。我怀念她的体香，她的肌肤，她那柔软的触感，她那进去之后的呻吟声。但是不知道为什么，我就是不想见到她。\n&emsp;&emsp;就这样过了一个多星期。一天晚上，课程结束后，我正收拾书包准备离开。这时候夏走了过来。\n&emsp;&emsp;“现在有空？”\n&emsp;&emsp;我想了想，说：“有。”\n&emsp;&emsp;“跟我去喝一杯？”\n&emsp;&emsp;“走吧。”\n&emsp;&emsp;于是我们一起走到酒吧。酒吧里依旧喧闹不堪，夏拿了几瓶啤酒，我们在角落里坐下。\n&emsp;&emsp;“改喝啤酒了？”我问。\n&emsp;&emsp;“都喝。话说，最近怎么没来？”\n&emsp;&emsp;“有点忙，还有不怎么想来。”\n&emsp;&emsp;“为什么？”夏边喝着啤酒边问。\n&emsp;&emsp;“不知道哪。”\n&emsp;&emsp;“因为和我做爱？”\n&emsp;&emsp;“可能是吧。”我说。\n&emsp;&emsp;“哈哈。”夏把杯里的啤酒倒满，和我碰了杯，一饮而尽。\n&emsp;&emsp;“说说没来的晚上都发生了什么吧。”。\n&emsp;&emsp;“无非就是无聊发呆消磨时间。”\n&emsp;&emsp;那天夜里喝完酒之后，我们都不约而同地走向旅馆。这次彼此都没有醉，我们飞快地脱下对方的衣服，然后扑到床上缠绕在一起。夏的舌头不停地在我身上游走。我报之以用力地抽动。\n&emsp;&emsp;结束之后，我们开着床头灯躺在一起，夏枕着我的手臂。我们望着灰白的天花板发呆。我不知道夏在想什么。在我脑海中展现的是童年的某个片段，我在绿草如茵的足球场上和一群同学踢着足球，蓝天下我们都在奔跑，毫无顾忌地往前冲。那个我喜欢的女孩子正站在足球场边看着。操场上回荡着一阵阵笑声和叫喊声。小学毕业的时候我们分开。六年之后那个女孩得了肝癌死了，我连最后一面都没能见到。这时候我才意识到我的青春也随之逝去，消失在永久的深渊里。\n&emsp;&emsp;“喂，说真的，为什么最近没有来？”夏突然问我。\n&emsp;&emsp;“不是说了么？”\n&emsp;&emsp;“可知道我等了你一个多星期了？”\n&emsp;&emsp;“为什么？”\n&emsp;&emsp;“不知道，可能是没事干吧，反正就是想见你。”\n&emsp;&emsp;“你不会爱上我了吧？”\n&emsp;&emsp;“怎么可能，爱情都是骗人的。”\n&emsp;&emsp;“失恋了？”\n&emsp;&emsp;“之前是。”\n&emsp;&emsp;“什么时候？”\n&emsp;&emsp;“认识你之前。”\n&emsp;&emsp;我轻轻一笑：“那个在咖啡馆坐你前面的就是？”\n&emsp;&emsp;“咖啡馆？我想想，”夏搔了搔头发，“嗯，是的，你知道？”\n&emsp;&emsp;“不知道。”我说，“睡吧，明天不想再逃课了。”\n&emsp;&emsp;“为什么？”\n&emsp;&emsp;“逃课很无聊。”\n&emsp;&emsp;我背对着夏，渐渐地睡着了。\n\n&emsp;&emsp;七\n\n&emsp;&emsp;从那以后，我们每周有两三个晚上在一起。我们在酒吧喝酒，跳舞（我已渐渐自如起来），在旅馆里接吻，做爱。但是，这种事情久了也会令人厌烦。不做爱的晚上，我们躺在床上，亮着床头灯，或谈话，或发呆，或看着窗外的夜空。月亮依旧阴晴圆缺永不回头，夜夜注视着睡着的或失眠的人。\n&emsp;&emsp;在那些日子里，除了第一次外，我们竟没有逃过一节课。每个那样的夜晚之后，第二天我们都准时坐在教室的座位上。夏依旧坐在前排，扎着马尾，穿着白色的衣服，在写字的时候左手抓着笔帽。我依旧坐在后面托着下巴，看着夏坐在那里听课的样子，以及整间教室各做自己事情的人群。\n&emsp;&emsp;一天夜晚，在做爱之后，夏靠在我的胸前，自言自语似的说：“我又谈恋爱了。”\n&emsp;&emsp;“是谁啊？”我问。\n&emsp;&emsp;“黎，认识不？”\n&emsp;&emsp;我摇摇头。\n&emsp;&emsp;“就知道你不认识。”\n&emsp;&emsp;“怎么认识的？”\n&emsp;&emsp;“通过同学，”夏看着天花板，“上周末去参加我同学的生日聚会。玩游戏失败之后受到惩罚，他吻了我的脸来着。然后我们就约会了。”\n&emsp;&emsp;“做爱了？”\n&emsp;&emsp;“没呢，”夏转过脸来看着我，“你介意？”\n&emsp;&emsp;“当然不是。”我说。\n&emsp;&emsp;夏抓住我的手放在她的胸前，说：\n&emsp;&emsp;“我顶喜欢跟你在一起。真的，跟你在一起的时候，我绷紧的心仿佛得到了放松，仿佛一觉睡到自然醒那般舒服。更重要的是，你从来不会要求我做什么。这一点令我非常高兴。”\n&emsp;&emsp;“是吗？我倒是觉得这一点正是我好几次恋爱失败的罪魁祸首呢。”\n&emsp;&emsp;“这个我理解，恋人之间总是需要互相要求的。虽然是必须，但是同时也非常累人。”\n&emsp;&emsp;“好像是。”\n&emsp;&emsp;“讲讲你怎么失败的吧？”夏说道。\n&emsp;&emsp;那天夜里夏讲了很多，她的恋爱经历比我丰富得多，又波澜壮阔得多。她谈过不下十次恋爱，每次的过程都比得上我全部恋爱加在一起。但是她说，她最念念不忘的只有第一次恋爱。\n&emsp;&emsp;“当我第一次把身体献给他的时候，我心里有一种感觉，我的一生将和他脱离不了关系。”\n&emsp;&emsp;“后来呢？”我问。\n&emsp;&emsp;“后来？”，她笑了笑，“后来他就让别的女孩和他脱不了关系。”\n&emsp;&emsp;“真是令人难过。”\n\n&emsp;&emsp;我不知道我们什么时候睡着。当我起床的时候，夏正侧卧在床上看着我。\n&emsp;&emsp;“喂，”她说，“迟到了哦，猪。”\n&emsp;&emsp;“怎么不叫醒我？”我赶紧起身穿衣服。\n&emsp;&emsp;“就是不叫你，你睡觉的时候蛮可爱的。”\n&emsp;&emsp;“是吗，刷牙了没？”\n&emsp;&emsp;“还没。”\n&emsp;&emsp;“弄完赶快走吧。”\n&emsp;&emsp;一路上夏不忘把头发扎起来。是个好天气，阳光灿烂，街道两旁的树木开着不知名的花，散发出阵阵清香。快走到教室的时候，我突然问：\n&emsp;&emsp;“夏，干嘛不跟我谈恋爱？”\n&emsp;&emsp;夏停住了，，像看着一个顽皮的孩子那般笑起来：“拿你当恋人太可惜了。爱情是一场宿醉。”\n&emsp;&emsp;“这可不一定，”我说，“不过，我也觉得你当恋人太浪费了。”\n&emsp;&emsp;说完，我头也不回地走进教室。\n<br/>\n&emsp;&emsp;写于2016年。\n\n\n\n\n\n\n","source":"_posts/夏.md","raw":"---\ntitle: 夏\ndate: 2019-09-19 22:49:42\ncategories: 文学\n---\n\n&emsp;&emsp;一\n\n<!--more-->\n\n&emsp;&emsp;“爱情是一场宿醉。”\n\n&emsp;&emsp;说这话的时候，我正在街上毫无目的地闲逛。是个阴天，天空阴沉沉的一片。但是没有一点压抑的感觉，反而有些晴天所没有的舒适。正是这个时候，我遇到了夏。\n&emsp;&emsp;坦白地讲，夏并不是那种十分好看的女孩，可以一眼就把人的目光吸引住。跟她同班一个学期之后我甚至想像不出她的样子，只是模糊地记得夏这个名字好几次从我耳边掠过。大抵世上所有安静而又不很出彩的女孩给人的印象总是如此。\n&emsp;&emsp;然而那时候我竟莫名其妙地被吸引住了，以至于忘记了迈步。这令我惊异。我一动不动地看着她弯下身子，递给一个乞讨的老头钱（我没看清多少，据我的估计，大概有十来块钱之多）。老头连胜道谢，双手作揖膜拜。当她站起来的时候，我已经无法继续悠闲地看着来往的行人了。我的世界茫然地上升，上升，像天上的星辰般永不堕落。\n&emsp;&emsp;夏站起身子，朝我迎面走了过来。“嘿！”她说，随即微笑着从我旁边走过。我没来得及回礼，跟她说一声“嗨！”只能眼睁睁地看着她的背影越走越远，消失在人海之中。\n这时候我才注意到，她穿着一件白色连衣裙，长发披在肩后。 \n\n&emsp;&emsp;二\n\n&emsp;&emsp;从那以后我不可能再忽视夏的存在。我注意到她喜欢穿白色衣服，喜欢扎马尾（不知为何那天她没有扎起来），喜欢用手掌遮住嘴巴“格格”地笑，习惯在写字的时候把笔帽抓在手里，习惯在黄昏的时候安静地发呆。\n&emsp;&emsp;但是我没有想要靠近的意思。我思索爱情的本质，心想那是一场骗局，一切真心假意的表白都是变相的索取。我们渴望爱情归根到底只是希望从对方看到自己的影子。这种感觉很美好，却不太真实。我已经过了幻想的年龄了，我需要的是真实的生活。\n&emsp;&emsp;某一天我和朋友们在咖啡馆闲坐。又是一个无聊的午后，我搅拌着杯里的咖啡，无意中看见夏正和一个男生面对面坐在馆中的一个角落里。\n&emsp;&emsp;于是我的视线无法控制地转移到他们身上。夏背靠墙朝外，我可以清楚地看到她穿着一件浅蓝色牛仔衬衫，没有扣上，里边的白色内衣露了出来。她笑着和对面的男生说着话。那男生侧背着我，我无法看清他的全貌，但是可以肯定我不认识他。夏依旧手里抓着白色的餐纸，用来代替平时的笔帽。与往常不同的是她没有扎马尾，长发披在肩头。\n&emsp;&emsp;按理来说，我应该感到难过，嫉妒，甚至愤怒才对。然而我没有。我就坐在那里边喝着咖啡边不时地撇上几眼。夏表现出来的是她很高兴，一直不停地说着话。这在平时几乎很难见到。那个男生却显得有些过分冷静，以至于有可能被认为是漫不经心。\n&emsp;&emsp;大约过了一个钟头，他们站起身子，结账离开。我看着他们手挽手走出咖啡馆，直到再也看不见。\n我转过头，看了看表，时间是下午五点二十一分。\n&emsp;&emsp;“走吧，”我说，“晚上有课。”\n&emsp;&emsp;于是我们也隐没在人群里。\n\n&emsp;&emsp;三\n\n&emsp;&emsp;高中时代我谈过几次恋爱，均以失败告终。这也许很大部分原因要归咎在我身上。我总是无法像别人那样与女孩子甜蜜地交往，逛街，亲吻。大多数时候，我是沉默的，安静地听着对方的诉说。这并不代表我不爱她们。事实上，有一次分手我还为此而伤心流泪。但是不同的人有不同的天性，盖茨比为了一个女人可以做到那么疯狂的事情，我觉得自己无论如何都做不到。就我自己而言，我觉得这并不是我的错。\n&emsp;&emsp;每个星期总有几个下午没课，我照例挑一两个下午去咖啡馆闲坐，打打扑克。没有人同去的时候我就看书，看《挪威的森林》。我喜欢活泼不羁的绿子，喜欢她说：“嘿，渡边君，明天到我家玩一次可好？”可是我再也没有看见夏在那里出现过，没有看见她坐在角落里披着一袭长发，笑得满脸通红。\n&emsp;&emsp;如此这般过了两个多月，我每天在教室里上课，看着夏扎着马尾，抓着笔帽写字，心里却没有渴望。但是不知为何我渐渐对咖啡馆失去了兴趣，觉得那种过分安静的气氛实在折磨人。我渐渐地把精力转向酒吧，每个周末去那里喝几杯啤酒成为我的常态。\n&emsp;&emsp;一个周六晚上，我正一个人喝着冰凉的啤酒，边看着酒吧里吵闹的人群。架在墙上的电视机正在播放着音乐频道。不久之后，王菲出现在屏幕上，正唱着《流年》。酒吧里太吵，很难听清她究竟唱的是什么。然而歌词却清晰可见：\n&emsp;&emsp;“遇见一场烟火的表演，用一场轮回的时间……”\n&emsp;&emsp;歌词太过于虚渺，我没有太大的感觉。但是，“遇见一场烟火的表演”，这句话却令我念念不忘。于是我一面念着这句不知为何的话，一面看着夏走进来。\n&emsp;&emsp;夏是一个人来的，穿着白色上衣和紧身牛仔裤。在橘黄色的灯光下，她的身材显得异常妙曼。然而我所关心的却是她没有扎马尾，长发披了下来。\n&emsp;&emsp;“嘿！”，我向她打了个招呼，“夏！”\n&emsp;&emsp;她转过头，“嗨！”，她说，看了我一眼，“对面有人坐？”\n&emsp;&emsp;“没有。”\n&emsp;&emsp;“可以坐？”\n&emsp;&emsp;“当然。”\n&emsp;&emsp;于是她到柜台上拿了一杯鸡尾酒，坐了下来。\n&emsp;&emsp;“你经常来吗？”她问。\n&emsp;&emsp;“算是吧，每个周末我都来。”\n&emsp;&emsp;“我也差不多，不过我是工作日来的。”\n&emsp;&emsp;“是吗？你好像不这么逃课啊？”\n&emsp;&emsp;“我上完课才来。”\n&emsp;&emsp;那天晚上我们聊了很多，一直到夜半十二点。公寓的门已经关了。不过没什么，我翻墙而过。\n&emsp;&emsp;回到公寓里，我倒头就睡。\n\n&emsp;&emsp;四\n\n&emsp;&emsp;那晚以后，我把周末去酒吧的习惯改为工作日去。在那个时间点我经常遇到夏。渐渐地我们几乎是约定俗成地同时到达。有时候一来就是连续五天。但是我们没有一起来过，从来没有走同一条路。\n&emsp;&emsp;在那些夜晚里，我们喝着酒，伴随着慵懒又吵闹的人声和音乐，时而谈话，时而彼此沉默不语。我们谈到课程，谈到喜欢的电影和书籍，谈《V字仇杀队》，谈《阿黛尔的生活》，谈一切与现实脱轨的梦幻的事物。电视里依旧不厌其烦地播放着音乐节目，唯独没有王菲的《流年》。\n&emsp;&emsp;我曾试着问夏是否单身，为何总是一个人来。然而夏说：“嘿，我说寒，我们能不谈论这个话题么？”\n&emsp;&emsp;“当然可以。我只是随便问问。”我说。\n&emsp;&emsp;一天晚上，我们喝了两杯鸡尾酒之后，夏拉着我要去跳舞。我对舞蹈一窍不通，连连摆手拒绝。但是夏坚持要和我一起跳，僵持到最后，她说：\n&emsp;&emsp;“再这样我可要生气了！”\n&emsp;&emsp;无奈之下，我只好随着夏来到跳舞的人群中。夏引导着我，让我放松点。我随着夏的步伐极不自然的晃动着身体，跟着她在这动感的音乐和炫目的灯光下摇曳。渐渐地我们靠得越来越近，几乎是互相摩擦着彼此的肌肤。我可以清楚地闻到夏的体香，与以往我所接触的女孩相似而又有一丝不同。\n&emsp;&emsp;然而我始终保持着冷静，没有因为这似是而非的挑逗而乱了分寸。这令我感到奇怪，一切青春的定律在夏身上似乎不起作用。对我来说，此时的夏仿佛一个跳舞的机器人，跟周围另外一群机器人一同伴随着这酒吧里迷乱的情绪在我眼前跳跃，跳跃，永不停息。\n&emsp;&emsp;那天晚上夏喝了很多酒，喝完鸡尾酒又喝白兰地，一杯又一杯。我担心她喝坏了身体，更担忧的是她不省人事之后我该送她到哪里。此时的公寓怕是已经关门，我又不能带着一个喝醉酒的女孩在夜里翻墙。\n&emsp;&emsp;“你知道吗？我几乎很少醉过哩。”夏涨着微红的脸对我说。\n&emsp;&emsp;“是的，看得出来，换做我喝这么多早就趴下睡了。”\n&emsp;&emsp;“来，喝完这杯我们再去跳一次。”\n&emsp;&emsp;我无法离开，只能再次跟着夏来到舞池。\n&emsp;&emsp;于是音乐继续，我们摇曳依旧。我看着夏的眼神越来越迷离，仿佛已经脱离到另外一个世界。终于我也在这迷离中失掉了自己，热烈而笨拙地回应着夏狂舞。世界仿佛已经消失不见，我感觉我绷紧已久的神经正慢慢松驰，松驰，直到遥远的末日。\n&emsp;&emsp;到我们离开的时候，夏已经醉得无法行走了。我酒意已深，但还没到不能控制的地步。我扶着夏走在寂静无人的深夜里，街上的路灯照射出两个人的倒影。我思索着接下来应该如何处理。这时夏说：\n&emsp;&emsp;“嘿，我们到旅馆开个房间如何？”\n&emsp;&emsp;“也只能这样了。”我说。\n\n&emsp;&emsp;五\n\n&emsp;&emsp;在旅馆昏黄的灯光下，我和夏极为自然地接吻。我脱下她的衣服，用手指轻轻捏她的乳头。夏的乳房匀称而略为丰满。我把头埋在双峰之间，然后吻遍她的全身。夏的呻吟不时时地响起。\n&emsp;&emsp;不多时，我灭了灯。万籁寂静的黑暗里只听见一阵阵喘息声。当我探至底谷的时候，夏的身子微微一颤。我似乎听到轻轻的叹气声。我抱住她，一边不断地抽动，一边吻着她的耳垂。夏一直抽搐着身体迎合我。整个夜晚她的呼吸声伴随着呻吟声一直在我耳边缭绕，仿佛来自天国的歌声。\n&emsp;&emsp;第二天醒来的时候，身边只剩空枕一个。夏正站在窗台前面边吸着烟，边看着窗外发呆。我洗漱完毕，夏依旧还在看着窗外。\n&emsp;&emsp;“喂，在看什么？”我问。\n&emsp;&emsp;“没有，”她盯着前方，继而转过头来，“抽烟不？”\n&emsp;&emsp;“谢谢，我不抽烟。”\n&emsp;&emsp;“我其实也不抽烟。”\n&emsp;&emsp;“那怎么……”\n&emsp;&emsp;她转过脸去，继续看着窗外我无法体会的东西，“我一直随身携带着香烟，然而几乎没有抽过。但是我不知怎的现在想抽得很，想狠狠地抽它一顿。仿佛我一直携带在身上就为了这一刻。”\n&emsp;&emsp;“那接下来怎么办？继续抽烟还是回去？”，我看了看表，“现在回去上第三节课？”\n&emsp;&emsp;“走吧。”夏扔下快抽完的烟头，把它踩灭。\n&emsp;&emsp;一路上我们都没有说话，仿佛两个不认识的人因一种奇妙的因素走到一起。街上的行人车辆来去匆匆，一点也没有顾及两个醉酒逃学的人。\n&emsp;&emsp;不知为何，一路我都有一种莫名的感觉，感觉夏从来没有醉过，从昨晚到现在，她一直都是清醒的。\n&emsp;&emsp;走进校门口的时候，夏把头发扎了起来。\n\n&emsp;&emsp;六\n\n&emsp;&emsp;那个星期剩下的几天里，我都没有去酒吧，因为要和夏见面。并不是我对夏不再有感觉。事实上，那晚之后我怀念夏的程度，比任何时候都要强烈。我怀念她的体香，她的肌肤，她那柔软的触感，她那进去之后的呻吟声。但是不知道为什么，我就是不想见到她。\n&emsp;&emsp;就这样过了一个多星期。一天晚上，课程结束后，我正收拾书包准备离开。这时候夏走了过来。\n&emsp;&emsp;“现在有空？”\n&emsp;&emsp;我想了想，说：“有。”\n&emsp;&emsp;“跟我去喝一杯？”\n&emsp;&emsp;“走吧。”\n&emsp;&emsp;于是我们一起走到酒吧。酒吧里依旧喧闹不堪，夏拿了几瓶啤酒，我们在角落里坐下。\n&emsp;&emsp;“改喝啤酒了？”我问。\n&emsp;&emsp;“都喝。话说，最近怎么没来？”\n&emsp;&emsp;“有点忙，还有不怎么想来。”\n&emsp;&emsp;“为什么？”夏边喝着啤酒边问。\n&emsp;&emsp;“不知道哪。”\n&emsp;&emsp;“因为和我做爱？”\n&emsp;&emsp;“可能是吧。”我说。\n&emsp;&emsp;“哈哈。”夏把杯里的啤酒倒满，和我碰了杯，一饮而尽。\n&emsp;&emsp;“说说没来的晚上都发生了什么吧。”。\n&emsp;&emsp;“无非就是无聊发呆消磨时间。”\n&emsp;&emsp;那天夜里喝完酒之后，我们都不约而同地走向旅馆。这次彼此都没有醉，我们飞快地脱下对方的衣服，然后扑到床上缠绕在一起。夏的舌头不停地在我身上游走。我报之以用力地抽动。\n&emsp;&emsp;结束之后，我们开着床头灯躺在一起，夏枕着我的手臂。我们望着灰白的天花板发呆。我不知道夏在想什么。在我脑海中展现的是童年的某个片段，我在绿草如茵的足球场上和一群同学踢着足球，蓝天下我们都在奔跑，毫无顾忌地往前冲。那个我喜欢的女孩子正站在足球场边看着。操场上回荡着一阵阵笑声和叫喊声。小学毕业的时候我们分开。六年之后那个女孩得了肝癌死了，我连最后一面都没能见到。这时候我才意识到我的青春也随之逝去，消失在永久的深渊里。\n&emsp;&emsp;“喂，说真的，为什么最近没有来？”夏突然问我。\n&emsp;&emsp;“不是说了么？”\n&emsp;&emsp;“可知道我等了你一个多星期了？”\n&emsp;&emsp;“为什么？”\n&emsp;&emsp;“不知道，可能是没事干吧，反正就是想见你。”\n&emsp;&emsp;“你不会爱上我了吧？”\n&emsp;&emsp;“怎么可能，爱情都是骗人的。”\n&emsp;&emsp;“失恋了？”\n&emsp;&emsp;“之前是。”\n&emsp;&emsp;“什么时候？”\n&emsp;&emsp;“认识你之前。”\n&emsp;&emsp;我轻轻一笑：“那个在咖啡馆坐你前面的就是？”\n&emsp;&emsp;“咖啡馆？我想想，”夏搔了搔头发，“嗯，是的，你知道？”\n&emsp;&emsp;“不知道。”我说，“睡吧，明天不想再逃课了。”\n&emsp;&emsp;“为什么？”\n&emsp;&emsp;“逃课很无聊。”\n&emsp;&emsp;我背对着夏，渐渐地睡着了。\n\n&emsp;&emsp;七\n\n&emsp;&emsp;从那以后，我们每周有两三个晚上在一起。我们在酒吧喝酒，跳舞（我已渐渐自如起来），在旅馆里接吻，做爱。但是，这种事情久了也会令人厌烦。不做爱的晚上，我们躺在床上，亮着床头灯，或谈话，或发呆，或看着窗外的夜空。月亮依旧阴晴圆缺永不回头，夜夜注视着睡着的或失眠的人。\n&emsp;&emsp;在那些日子里，除了第一次外，我们竟没有逃过一节课。每个那样的夜晚之后，第二天我们都准时坐在教室的座位上。夏依旧坐在前排，扎着马尾，穿着白色的衣服，在写字的时候左手抓着笔帽。我依旧坐在后面托着下巴，看着夏坐在那里听课的样子，以及整间教室各做自己事情的人群。\n&emsp;&emsp;一天夜晚，在做爱之后，夏靠在我的胸前，自言自语似的说：“我又谈恋爱了。”\n&emsp;&emsp;“是谁啊？”我问。\n&emsp;&emsp;“黎，认识不？”\n&emsp;&emsp;我摇摇头。\n&emsp;&emsp;“就知道你不认识。”\n&emsp;&emsp;“怎么认识的？”\n&emsp;&emsp;“通过同学，”夏看着天花板，“上周末去参加我同学的生日聚会。玩游戏失败之后受到惩罚，他吻了我的脸来着。然后我们就约会了。”\n&emsp;&emsp;“做爱了？”\n&emsp;&emsp;“没呢，”夏转过脸来看着我，“你介意？”\n&emsp;&emsp;“当然不是。”我说。\n&emsp;&emsp;夏抓住我的手放在她的胸前，说：\n&emsp;&emsp;“我顶喜欢跟你在一起。真的，跟你在一起的时候，我绷紧的心仿佛得到了放松，仿佛一觉睡到自然醒那般舒服。更重要的是，你从来不会要求我做什么。这一点令我非常高兴。”\n&emsp;&emsp;“是吗？我倒是觉得这一点正是我好几次恋爱失败的罪魁祸首呢。”\n&emsp;&emsp;“这个我理解，恋人之间总是需要互相要求的。虽然是必须，但是同时也非常累人。”\n&emsp;&emsp;“好像是。”\n&emsp;&emsp;“讲讲你怎么失败的吧？”夏说道。\n&emsp;&emsp;那天夜里夏讲了很多，她的恋爱经历比我丰富得多，又波澜壮阔得多。她谈过不下十次恋爱，每次的过程都比得上我全部恋爱加在一起。但是她说，她最念念不忘的只有第一次恋爱。\n&emsp;&emsp;“当我第一次把身体献给他的时候，我心里有一种感觉，我的一生将和他脱离不了关系。”\n&emsp;&emsp;“后来呢？”我问。\n&emsp;&emsp;“后来？”，她笑了笑，“后来他就让别的女孩和他脱不了关系。”\n&emsp;&emsp;“真是令人难过。”\n\n&emsp;&emsp;我不知道我们什么时候睡着。当我起床的时候，夏正侧卧在床上看着我。\n&emsp;&emsp;“喂，”她说，“迟到了哦，猪。”\n&emsp;&emsp;“怎么不叫醒我？”我赶紧起身穿衣服。\n&emsp;&emsp;“就是不叫你，你睡觉的时候蛮可爱的。”\n&emsp;&emsp;“是吗，刷牙了没？”\n&emsp;&emsp;“还没。”\n&emsp;&emsp;“弄完赶快走吧。”\n&emsp;&emsp;一路上夏不忘把头发扎起来。是个好天气，阳光灿烂，街道两旁的树木开着不知名的花，散发出阵阵清香。快走到教室的时候，我突然问：\n&emsp;&emsp;“夏，干嘛不跟我谈恋爱？”\n&emsp;&emsp;夏停住了，，像看着一个顽皮的孩子那般笑起来：“拿你当恋人太可惜了。爱情是一场宿醉。”\n&emsp;&emsp;“这可不一定，”我说，“不过，我也觉得你当恋人太浪费了。”\n&emsp;&emsp;说完，我头也不回地走进教室。\n<br/>\n&emsp;&emsp;写于2016年。\n\n\n\n\n\n\n","slug":"夏","published":1,"updated":"2021-08-07T14:42:08.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm63t00158hspg69rwjw0","content":"<p>&emsp;&emsp;一</p>\n<a id=\"more\"></a>\n<p>&emsp;&emsp;“爱情是一场宿醉。”</p>\n<p>&emsp;&emsp;说这话的时候，我正在街上毫无目的地闲逛。是个阴天，天空阴沉沉的一片。但是没有一点压抑的感觉，反而有些晴天所没有的舒适。正是这个时候，我遇到了夏。<br>&emsp;&emsp;坦白地讲，夏并不是那种十分好看的女孩，可以一眼就把人的目光吸引住。跟她同班一个学期之后我甚至想像不出她的样子，只是模糊地记得夏这个名字好几次从我耳边掠过。大抵世上所有安静而又不很出彩的女孩给人的印象总是如此。<br>&emsp;&emsp;然而那时候我竟莫名其妙地被吸引住了，以至于忘记了迈步。这令我惊异。我一动不动地看着她弯下身子，递给一个乞讨的老头钱（我没看清多少，据我的估计，大概有十来块钱之多）。老头连胜道谢，双手作揖膜拜。当她站起来的时候，我已经无法继续悠闲地看着来往的行人了。我的世界茫然地上升，上升，像天上的星辰般永不堕落。<br>&emsp;&emsp;夏站起身子，朝我迎面走了过来。“嘿！”她说，随即微笑着从我旁边走过。我没来得及回礼，跟她说一声“嗨！”只能眼睁睁地看着她的背影越走越远，消失在人海之中。<br>这时候我才注意到，她穿着一件白色连衣裙，长发披在肩后。 </p>\n<p>&emsp;&emsp;二</p>\n<p>&emsp;&emsp;从那以后我不可能再忽视夏的存在。我注意到她喜欢穿白色衣服，喜欢扎马尾（不知为何那天她没有扎起来），喜欢用手掌遮住嘴巴“格格”地笑，习惯在写字的时候把笔帽抓在手里，习惯在黄昏的时候安静地发呆。<br>&emsp;&emsp;但是我没有想要靠近的意思。我思索爱情的本质，心想那是一场骗局，一切真心假意的表白都是变相的索取。我们渴望爱情归根到底只是希望从对方看到自己的影子。这种感觉很美好，却不太真实。我已经过了幻想的年龄了，我需要的是真实的生活。<br>&emsp;&emsp;某一天我和朋友们在咖啡馆闲坐。又是一个无聊的午后，我搅拌着杯里的咖啡，无意中看见夏正和一个男生面对面坐在馆中的一个角落里。<br>&emsp;&emsp;于是我的视线无法控制地转移到他们身上。夏背靠墙朝外，我可以清楚地看到她穿着一件浅蓝色牛仔衬衫，没有扣上，里边的白色内衣露了出来。她笑着和对面的男生说着话。那男生侧背着我，我无法看清他的全貌，但是可以肯定我不认识他。夏依旧手里抓着白色的餐纸，用来代替平时的笔帽。与往常不同的是她没有扎马尾，长发披在肩头。<br>&emsp;&emsp;按理来说，我应该感到难过，嫉妒，甚至愤怒才对。然而我没有。我就坐在那里边喝着咖啡边不时地撇上几眼。夏表现出来的是她很高兴，一直不停地说着话。这在平时几乎很难见到。那个男生却显得有些过分冷静，以至于有可能被认为是漫不经心。<br>&emsp;&emsp;大约过了一个钟头，他们站起身子，结账离开。我看着他们手挽手走出咖啡馆，直到再也看不见。<br>我转过头，看了看表，时间是下午五点二十一分。<br>&emsp;&emsp;“走吧，”我说，“晚上有课。”<br>&emsp;&emsp;于是我们也隐没在人群里。</p>\n<p>&emsp;&emsp;三</p>\n<p>&emsp;&emsp;高中时代我谈过几次恋爱，均以失败告终。这也许很大部分原因要归咎在我身上。我总是无法像别人那样与女孩子甜蜜地交往，逛街，亲吻。大多数时候，我是沉默的，安静地听着对方的诉说。这并不代表我不爱她们。事实上，有一次分手我还为此而伤心流泪。但是不同的人有不同的天性，盖茨比为了一个女人可以做到那么疯狂的事情，我觉得自己无论如何都做不到。就我自己而言，我觉得这并不是我的错。<br>&emsp;&emsp;每个星期总有几个下午没课，我照例挑一两个下午去咖啡馆闲坐，打打扑克。没有人同去的时候我就看书，看《挪威的森林》。我喜欢活泼不羁的绿子，喜欢她说：“嘿，渡边君，明天到我家玩一次可好？”可是我再也没有看见夏在那里出现过，没有看见她坐在角落里披着一袭长发，笑得满脸通红。<br>&emsp;&emsp;如此这般过了两个多月，我每天在教室里上课，看着夏扎着马尾，抓着笔帽写字，心里却没有渴望。但是不知为何我渐渐对咖啡馆失去了兴趣，觉得那种过分安静的气氛实在折磨人。我渐渐地把精力转向酒吧，每个周末去那里喝几杯啤酒成为我的常态。<br>&emsp;&emsp;一个周六晚上，我正一个人喝着冰凉的啤酒，边看着酒吧里吵闹的人群。架在墙上的电视机正在播放着音乐频道。不久之后，王菲出现在屏幕上，正唱着《流年》。酒吧里太吵，很难听清她究竟唱的是什么。然而歌词却清晰可见：<br>&emsp;&emsp;“遇见一场烟火的表演，用一场轮回的时间……”<br>&emsp;&emsp;歌词太过于虚渺，我没有太大的感觉。但是，“遇见一场烟火的表演”，这句话却令我念念不忘。于是我一面念着这句不知为何的话，一面看着夏走进来。<br>&emsp;&emsp;夏是一个人来的，穿着白色上衣和紧身牛仔裤。在橘黄色的灯光下，她的身材显得异常妙曼。然而我所关心的却是她没有扎马尾，长发披了下来。<br>&emsp;&emsp;“嘿！”，我向她打了个招呼，“夏！”<br>&emsp;&emsp;她转过头，“嗨！”，她说，看了我一眼，“对面有人坐？”<br>&emsp;&emsp;“没有。”<br>&emsp;&emsp;“可以坐？”<br>&emsp;&emsp;“当然。”<br>&emsp;&emsp;于是她到柜台上拿了一杯鸡尾酒，坐了下来。<br>&emsp;&emsp;“你经常来吗？”她问。<br>&emsp;&emsp;“算是吧，每个周末我都来。”<br>&emsp;&emsp;“我也差不多，不过我是工作日来的。”<br>&emsp;&emsp;“是吗？你好像不这么逃课啊？”<br>&emsp;&emsp;“我上完课才来。”<br>&emsp;&emsp;那天晚上我们聊了很多，一直到夜半十二点。公寓的门已经关了。不过没什么，我翻墙而过。<br>&emsp;&emsp;回到公寓里，我倒头就睡。</p>\n<p>&emsp;&emsp;四</p>\n<p>&emsp;&emsp;那晚以后，我把周末去酒吧的习惯改为工作日去。在那个时间点我经常遇到夏。渐渐地我们几乎是约定俗成地同时到达。有时候一来就是连续五天。但是我们没有一起来过，从来没有走同一条路。<br>&emsp;&emsp;在那些夜晚里，我们喝着酒，伴随着慵懒又吵闹的人声和音乐，时而谈话，时而彼此沉默不语。我们谈到课程，谈到喜欢的电影和书籍，谈《V字仇杀队》，谈《阿黛尔的生活》，谈一切与现实脱轨的梦幻的事物。电视里依旧不厌其烦地播放着音乐节目，唯独没有王菲的《流年》。<br>&emsp;&emsp;我曾试着问夏是否单身，为何总是一个人来。然而夏说：“嘿，我说寒，我们能不谈论这个话题么？”<br>&emsp;&emsp;“当然可以。我只是随便问问。”我说。<br>&emsp;&emsp;一天晚上，我们喝了两杯鸡尾酒之后，夏拉着我要去跳舞。我对舞蹈一窍不通，连连摆手拒绝。但是夏坚持要和我一起跳，僵持到最后，她说：<br>&emsp;&emsp;“再这样我可要生气了！”<br>&emsp;&emsp;无奈之下，我只好随着夏来到跳舞的人群中。夏引导着我，让我放松点。我随着夏的步伐极不自然的晃动着身体，跟着她在这动感的音乐和炫目的灯光下摇曳。渐渐地我们靠得越来越近，几乎是互相摩擦着彼此的肌肤。我可以清楚地闻到夏的体香，与以往我所接触的女孩相似而又有一丝不同。<br>&emsp;&emsp;然而我始终保持着冷静，没有因为这似是而非的挑逗而乱了分寸。这令我感到奇怪，一切青春的定律在夏身上似乎不起作用。对我来说，此时的夏仿佛一个跳舞的机器人，跟周围另外一群机器人一同伴随着这酒吧里迷乱的情绪在我眼前跳跃，跳跃，永不停息。<br>&emsp;&emsp;那天晚上夏喝了很多酒，喝完鸡尾酒又喝白兰地，一杯又一杯。我担心她喝坏了身体，更担忧的是她不省人事之后我该送她到哪里。此时的公寓怕是已经关门，我又不能带着一个喝醉酒的女孩在夜里翻墙。<br>&emsp;&emsp;“你知道吗？我几乎很少醉过哩。”夏涨着微红的脸对我说。<br>&emsp;&emsp;“是的，看得出来，换做我喝这么多早就趴下睡了。”<br>&emsp;&emsp;“来，喝完这杯我们再去跳一次。”<br>&emsp;&emsp;我无法离开，只能再次跟着夏来到舞池。<br>&emsp;&emsp;于是音乐继续，我们摇曳依旧。我看着夏的眼神越来越迷离，仿佛已经脱离到另外一个世界。终于我也在这迷离中失掉了自己，热烈而笨拙地回应着夏狂舞。世界仿佛已经消失不见，我感觉我绷紧已久的神经正慢慢松驰，松驰，直到遥远的末日。<br>&emsp;&emsp;到我们离开的时候，夏已经醉得无法行走了。我酒意已深，但还没到不能控制的地步。我扶着夏走在寂静无人的深夜里，街上的路灯照射出两个人的倒影。我思索着接下来应该如何处理。这时夏说：<br>&emsp;&emsp;“嘿，我们到旅馆开个房间如何？”<br>&emsp;&emsp;“也只能这样了。”我说。</p>\n<p>&emsp;&emsp;五</p>\n<p>&emsp;&emsp;在旅馆昏黄的灯光下，我和夏极为自然地接吻。我脱下她的衣服，用手指轻轻捏她的乳头。夏的乳房匀称而略为丰满。我把头埋在双峰之间，然后吻遍她的全身。夏的呻吟不时时地响起。<br>&emsp;&emsp;不多时，我灭了灯。万籁寂静的黑暗里只听见一阵阵喘息声。当我探至底谷的时候，夏的身子微微一颤。我似乎听到轻轻的叹气声。我抱住她，一边不断地抽动，一边吻着她的耳垂。夏一直抽搐着身体迎合我。整个夜晚她的呼吸声伴随着呻吟声一直在我耳边缭绕，仿佛来自天国的歌声。<br>&emsp;&emsp;第二天醒来的时候，身边只剩空枕一个。夏正站在窗台前面边吸着烟，边看着窗外发呆。我洗漱完毕，夏依旧还在看着窗外。<br>&emsp;&emsp;“喂，在看什么？”我问。<br>&emsp;&emsp;“没有，”她盯着前方，继而转过头来，“抽烟不？”<br>&emsp;&emsp;“谢谢，我不抽烟。”<br>&emsp;&emsp;“我其实也不抽烟。”<br>&emsp;&emsp;“那怎么……”<br>&emsp;&emsp;她转过脸去，继续看着窗外我无法体会的东西，“我一直随身携带着香烟，然而几乎没有抽过。但是我不知怎的现在想抽得很，想狠狠地抽它一顿。仿佛我一直携带在身上就为了这一刻。”<br>&emsp;&emsp;“那接下来怎么办？继续抽烟还是回去？”，我看了看表，“现在回去上第三节课？”<br>&emsp;&emsp;“走吧。”夏扔下快抽完的烟头，把它踩灭。<br>&emsp;&emsp;一路上我们都没有说话，仿佛两个不认识的人因一种奇妙的因素走到一起。街上的行人车辆来去匆匆，一点也没有顾及两个醉酒逃学的人。<br>&emsp;&emsp;不知为何，一路我都有一种莫名的感觉，感觉夏从来没有醉过，从昨晚到现在，她一直都是清醒的。<br>&emsp;&emsp;走进校门口的时候，夏把头发扎了起来。</p>\n<p>&emsp;&emsp;六</p>\n<p>&emsp;&emsp;那个星期剩下的几天里，我都没有去酒吧，因为要和夏见面。并不是我对夏不再有感觉。事实上，那晚之后我怀念夏的程度，比任何时候都要强烈。我怀念她的体香，她的肌肤，她那柔软的触感，她那进去之后的呻吟声。但是不知道为什么，我就是不想见到她。<br>&emsp;&emsp;就这样过了一个多星期。一天晚上，课程结束后，我正收拾书包准备离开。这时候夏走了过来。<br>&emsp;&emsp;“现在有空？”<br>&emsp;&emsp;我想了想，说：“有。”<br>&emsp;&emsp;“跟我去喝一杯？”<br>&emsp;&emsp;“走吧。”<br>&emsp;&emsp;于是我们一起走到酒吧。酒吧里依旧喧闹不堪，夏拿了几瓶啤酒，我们在角落里坐下。<br>&emsp;&emsp;“改喝啤酒了？”我问。<br>&emsp;&emsp;“都喝。话说，最近怎么没来？”<br>&emsp;&emsp;“有点忙，还有不怎么想来。”<br>&emsp;&emsp;“为什么？”夏边喝着啤酒边问。<br>&emsp;&emsp;“不知道哪。”<br>&emsp;&emsp;“因为和我做爱？”<br>&emsp;&emsp;“可能是吧。”我说。<br>&emsp;&emsp;“哈哈。”夏把杯里的啤酒倒满，和我碰了杯，一饮而尽。<br>&emsp;&emsp;“说说没来的晚上都发生了什么吧。”。<br>&emsp;&emsp;“无非就是无聊发呆消磨时间。”<br>&emsp;&emsp;那天夜里喝完酒之后，我们都不约而同地走向旅馆。这次彼此都没有醉，我们飞快地脱下对方的衣服，然后扑到床上缠绕在一起。夏的舌头不停地在我身上游走。我报之以用力地抽动。<br>&emsp;&emsp;结束之后，我们开着床头灯躺在一起，夏枕着我的手臂。我们望着灰白的天花板发呆。我不知道夏在想什么。在我脑海中展现的是童年的某个片段，我在绿草如茵的足球场上和一群同学踢着足球，蓝天下我们都在奔跑，毫无顾忌地往前冲。那个我喜欢的女孩子正站在足球场边看着。操场上回荡着一阵阵笑声和叫喊声。小学毕业的时候我们分开。六年之后那个女孩得了肝癌死了，我连最后一面都没能见到。这时候我才意识到我的青春也随之逝去，消失在永久的深渊里。<br>&emsp;&emsp;“喂，说真的，为什么最近没有来？”夏突然问我。<br>&emsp;&emsp;“不是说了么？”<br>&emsp;&emsp;“可知道我等了你一个多星期了？”<br>&emsp;&emsp;“为什么？”<br>&emsp;&emsp;“不知道，可能是没事干吧，反正就是想见你。”<br>&emsp;&emsp;“你不会爱上我了吧？”<br>&emsp;&emsp;“怎么可能，爱情都是骗人的。”<br>&emsp;&emsp;“失恋了？”<br>&emsp;&emsp;“之前是。”<br>&emsp;&emsp;“什么时候？”<br>&emsp;&emsp;“认识你之前。”<br>&emsp;&emsp;我轻轻一笑：“那个在咖啡馆坐你前面的就是？”<br>&emsp;&emsp;“咖啡馆？我想想，”夏搔了搔头发，“嗯，是的，你知道？”<br>&emsp;&emsp;“不知道。”我说，“睡吧，明天不想再逃课了。”<br>&emsp;&emsp;“为什么？”<br>&emsp;&emsp;“逃课很无聊。”<br>&emsp;&emsp;我背对着夏，渐渐地睡着了。</p>\n<p>&emsp;&emsp;七</p>\n<p>&emsp;&emsp;从那以后，我们每周有两三个晚上在一起。我们在酒吧喝酒，跳舞（我已渐渐自如起来），在旅馆里接吻，做爱。但是，这种事情久了也会令人厌烦。不做爱的晚上，我们躺在床上，亮着床头灯，或谈话，或发呆，或看着窗外的夜空。月亮依旧阴晴圆缺永不回头，夜夜注视着睡着的或失眠的人。<br>&emsp;&emsp;在那些日子里，除了第一次外，我们竟没有逃过一节课。每个那样的夜晚之后，第二天我们都准时坐在教室的座位上。夏依旧坐在前排，扎着马尾，穿着白色的衣服，在写字的时候左手抓着笔帽。我依旧坐在后面托着下巴，看着夏坐在那里听课的样子，以及整间教室各做自己事情的人群。<br>&emsp;&emsp;一天夜晚，在做爱之后，夏靠在我的胸前，自言自语似的说：“我又谈恋爱了。”<br>&emsp;&emsp;“是谁啊？”我问。<br>&emsp;&emsp;“黎，认识不？”<br>&emsp;&emsp;我摇摇头。<br>&emsp;&emsp;“就知道你不认识。”<br>&emsp;&emsp;“怎么认识的？”<br>&emsp;&emsp;“通过同学，”夏看着天花板，“上周末去参加我同学的生日聚会。玩游戏失败之后受到惩罚，他吻了我的脸来着。然后我们就约会了。”<br>&emsp;&emsp;“做爱了？”<br>&emsp;&emsp;“没呢，”夏转过脸来看着我，“你介意？”<br>&emsp;&emsp;“当然不是。”我说。<br>&emsp;&emsp;夏抓住我的手放在她的胸前，说：<br>&emsp;&emsp;“我顶喜欢跟你在一起。真的，跟你在一起的时候，我绷紧的心仿佛得到了放松，仿佛一觉睡到自然醒那般舒服。更重要的是，你从来不会要求我做什么。这一点令我非常高兴。”<br>&emsp;&emsp;“是吗？我倒是觉得这一点正是我好几次恋爱失败的罪魁祸首呢。”<br>&emsp;&emsp;“这个我理解，恋人之间总是需要互相要求的。虽然是必须，但是同时也非常累人。”<br>&emsp;&emsp;“好像是。”<br>&emsp;&emsp;“讲讲你怎么失败的吧？”夏说道。<br>&emsp;&emsp;那天夜里夏讲了很多，她的恋爱经历比我丰富得多，又波澜壮阔得多。她谈过不下十次恋爱，每次的过程都比得上我全部恋爱加在一起。但是她说，她最念念不忘的只有第一次恋爱。<br>&emsp;&emsp;“当我第一次把身体献给他的时候，我心里有一种感觉，我的一生将和他脱离不了关系。”<br>&emsp;&emsp;“后来呢？”我问。<br>&emsp;&emsp;“后来？”，她笑了笑，“后来他就让别的女孩和他脱不了关系。”<br>&emsp;&emsp;“真是令人难过。”</p>\n<p>&emsp;&emsp;我不知道我们什么时候睡着。当我起床的时候，夏正侧卧在床上看着我。<br>&emsp;&emsp;“喂，”她说，“迟到了哦，猪。”<br>&emsp;&emsp;“怎么不叫醒我？”我赶紧起身穿衣服。<br>&emsp;&emsp;“就是不叫你，你睡觉的时候蛮可爱的。”<br>&emsp;&emsp;“是吗，刷牙了没？”<br>&emsp;&emsp;“还没。”<br>&emsp;&emsp;“弄完赶快走吧。”<br>&emsp;&emsp;一路上夏不忘把头发扎起来。是个好天气，阳光灿烂，街道两旁的树木开着不知名的花，散发出阵阵清香。快走到教室的时候，我突然问：<br>&emsp;&emsp;“夏，干嘛不跟我谈恋爱？”<br>&emsp;&emsp;夏停住了，，像看着一个顽皮的孩子那般笑起来：“拿你当恋人太可惜了。爱情是一场宿醉。”<br>&emsp;&emsp;“这可不一定，”我说，“不过，我也觉得你当恋人太浪费了。”<br>&emsp;&emsp;说完，我头也不回地走进教室。<br><br><br>&emsp;&emsp;写于2016年。</p>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;一</p>","more":"<p>&emsp;&emsp;“爱情是一场宿醉。”</p>\n<p>&emsp;&emsp;说这话的时候，我正在街上毫无目的地闲逛。是个阴天，天空阴沉沉的一片。但是没有一点压抑的感觉，反而有些晴天所没有的舒适。正是这个时候，我遇到了夏。<br>&emsp;&emsp;坦白地讲，夏并不是那种十分好看的女孩，可以一眼就把人的目光吸引住。跟她同班一个学期之后我甚至想像不出她的样子，只是模糊地记得夏这个名字好几次从我耳边掠过。大抵世上所有安静而又不很出彩的女孩给人的印象总是如此。<br>&emsp;&emsp;然而那时候我竟莫名其妙地被吸引住了，以至于忘记了迈步。这令我惊异。我一动不动地看着她弯下身子，递给一个乞讨的老头钱（我没看清多少，据我的估计，大概有十来块钱之多）。老头连胜道谢，双手作揖膜拜。当她站起来的时候，我已经无法继续悠闲地看着来往的行人了。我的世界茫然地上升，上升，像天上的星辰般永不堕落。<br>&emsp;&emsp;夏站起身子，朝我迎面走了过来。“嘿！”她说，随即微笑着从我旁边走过。我没来得及回礼，跟她说一声“嗨！”只能眼睁睁地看着她的背影越走越远，消失在人海之中。<br>这时候我才注意到，她穿着一件白色连衣裙，长发披在肩后。 </p>\n<p>&emsp;&emsp;二</p>\n<p>&emsp;&emsp;从那以后我不可能再忽视夏的存在。我注意到她喜欢穿白色衣服，喜欢扎马尾（不知为何那天她没有扎起来），喜欢用手掌遮住嘴巴“格格”地笑，习惯在写字的时候把笔帽抓在手里，习惯在黄昏的时候安静地发呆。<br>&emsp;&emsp;但是我没有想要靠近的意思。我思索爱情的本质，心想那是一场骗局，一切真心假意的表白都是变相的索取。我们渴望爱情归根到底只是希望从对方看到自己的影子。这种感觉很美好，却不太真实。我已经过了幻想的年龄了，我需要的是真实的生活。<br>&emsp;&emsp;某一天我和朋友们在咖啡馆闲坐。又是一个无聊的午后，我搅拌着杯里的咖啡，无意中看见夏正和一个男生面对面坐在馆中的一个角落里。<br>&emsp;&emsp;于是我的视线无法控制地转移到他们身上。夏背靠墙朝外，我可以清楚地看到她穿着一件浅蓝色牛仔衬衫，没有扣上，里边的白色内衣露了出来。她笑着和对面的男生说着话。那男生侧背着我，我无法看清他的全貌，但是可以肯定我不认识他。夏依旧手里抓着白色的餐纸，用来代替平时的笔帽。与往常不同的是她没有扎马尾，长发披在肩头。<br>&emsp;&emsp;按理来说，我应该感到难过，嫉妒，甚至愤怒才对。然而我没有。我就坐在那里边喝着咖啡边不时地撇上几眼。夏表现出来的是她很高兴，一直不停地说着话。这在平时几乎很难见到。那个男生却显得有些过分冷静，以至于有可能被认为是漫不经心。<br>&emsp;&emsp;大约过了一个钟头，他们站起身子，结账离开。我看着他们手挽手走出咖啡馆，直到再也看不见。<br>我转过头，看了看表，时间是下午五点二十一分。<br>&emsp;&emsp;“走吧，”我说，“晚上有课。”<br>&emsp;&emsp;于是我们也隐没在人群里。</p>\n<p>&emsp;&emsp;三</p>\n<p>&emsp;&emsp;高中时代我谈过几次恋爱，均以失败告终。这也许很大部分原因要归咎在我身上。我总是无法像别人那样与女孩子甜蜜地交往，逛街，亲吻。大多数时候，我是沉默的，安静地听着对方的诉说。这并不代表我不爱她们。事实上，有一次分手我还为此而伤心流泪。但是不同的人有不同的天性，盖茨比为了一个女人可以做到那么疯狂的事情，我觉得自己无论如何都做不到。就我自己而言，我觉得这并不是我的错。<br>&emsp;&emsp;每个星期总有几个下午没课，我照例挑一两个下午去咖啡馆闲坐，打打扑克。没有人同去的时候我就看书，看《挪威的森林》。我喜欢活泼不羁的绿子，喜欢她说：“嘿，渡边君，明天到我家玩一次可好？”可是我再也没有看见夏在那里出现过，没有看见她坐在角落里披着一袭长发，笑得满脸通红。<br>&emsp;&emsp;如此这般过了两个多月，我每天在教室里上课，看着夏扎着马尾，抓着笔帽写字，心里却没有渴望。但是不知为何我渐渐对咖啡馆失去了兴趣，觉得那种过分安静的气氛实在折磨人。我渐渐地把精力转向酒吧，每个周末去那里喝几杯啤酒成为我的常态。<br>&emsp;&emsp;一个周六晚上，我正一个人喝着冰凉的啤酒，边看着酒吧里吵闹的人群。架在墙上的电视机正在播放着音乐频道。不久之后，王菲出现在屏幕上，正唱着《流年》。酒吧里太吵，很难听清她究竟唱的是什么。然而歌词却清晰可见：<br>&emsp;&emsp;“遇见一场烟火的表演，用一场轮回的时间……”<br>&emsp;&emsp;歌词太过于虚渺，我没有太大的感觉。但是，“遇见一场烟火的表演”，这句话却令我念念不忘。于是我一面念着这句不知为何的话，一面看着夏走进来。<br>&emsp;&emsp;夏是一个人来的，穿着白色上衣和紧身牛仔裤。在橘黄色的灯光下，她的身材显得异常妙曼。然而我所关心的却是她没有扎马尾，长发披了下来。<br>&emsp;&emsp;“嘿！”，我向她打了个招呼，“夏！”<br>&emsp;&emsp;她转过头，“嗨！”，她说，看了我一眼，“对面有人坐？”<br>&emsp;&emsp;“没有。”<br>&emsp;&emsp;“可以坐？”<br>&emsp;&emsp;“当然。”<br>&emsp;&emsp;于是她到柜台上拿了一杯鸡尾酒，坐了下来。<br>&emsp;&emsp;“你经常来吗？”她问。<br>&emsp;&emsp;“算是吧，每个周末我都来。”<br>&emsp;&emsp;“我也差不多，不过我是工作日来的。”<br>&emsp;&emsp;“是吗？你好像不这么逃课啊？”<br>&emsp;&emsp;“我上完课才来。”<br>&emsp;&emsp;那天晚上我们聊了很多，一直到夜半十二点。公寓的门已经关了。不过没什么，我翻墙而过。<br>&emsp;&emsp;回到公寓里，我倒头就睡。</p>\n<p>&emsp;&emsp;四</p>\n<p>&emsp;&emsp;那晚以后，我把周末去酒吧的习惯改为工作日去。在那个时间点我经常遇到夏。渐渐地我们几乎是约定俗成地同时到达。有时候一来就是连续五天。但是我们没有一起来过，从来没有走同一条路。<br>&emsp;&emsp;在那些夜晚里，我们喝着酒，伴随着慵懒又吵闹的人声和音乐，时而谈话，时而彼此沉默不语。我们谈到课程，谈到喜欢的电影和书籍，谈《V字仇杀队》，谈《阿黛尔的生活》，谈一切与现实脱轨的梦幻的事物。电视里依旧不厌其烦地播放着音乐节目，唯独没有王菲的《流年》。<br>&emsp;&emsp;我曾试着问夏是否单身，为何总是一个人来。然而夏说：“嘿，我说寒，我们能不谈论这个话题么？”<br>&emsp;&emsp;“当然可以。我只是随便问问。”我说。<br>&emsp;&emsp;一天晚上，我们喝了两杯鸡尾酒之后，夏拉着我要去跳舞。我对舞蹈一窍不通，连连摆手拒绝。但是夏坚持要和我一起跳，僵持到最后，她说：<br>&emsp;&emsp;“再这样我可要生气了！”<br>&emsp;&emsp;无奈之下，我只好随着夏来到跳舞的人群中。夏引导着我，让我放松点。我随着夏的步伐极不自然的晃动着身体，跟着她在这动感的音乐和炫目的灯光下摇曳。渐渐地我们靠得越来越近，几乎是互相摩擦着彼此的肌肤。我可以清楚地闻到夏的体香，与以往我所接触的女孩相似而又有一丝不同。<br>&emsp;&emsp;然而我始终保持着冷静，没有因为这似是而非的挑逗而乱了分寸。这令我感到奇怪，一切青春的定律在夏身上似乎不起作用。对我来说，此时的夏仿佛一个跳舞的机器人，跟周围另外一群机器人一同伴随着这酒吧里迷乱的情绪在我眼前跳跃，跳跃，永不停息。<br>&emsp;&emsp;那天晚上夏喝了很多酒，喝完鸡尾酒又喝白兰地，一杯又一杯。我担心她喝坏了身体，更担忧的是她不省人事之后我该送她到哪里。此时的公寓怕是已经关门，我又不能带着一个喝醉酒的女孩在夜里翻墙。<br>&emsp;&emsp;“你知道吗？我几乎很少醉过哩。”夏涨着微红的脸对我说。<br>&emsp;&emsp;“是的，看得出来，换做我喝这么多早就趴下睡了。”<br>&emsp;&emsp;“来，喝完这杯我们再去跳一次。”<br>&emsp;&emsp;我无法离开，只能再次跟着夏来到舞池。<br>&emsp;&emsp;于是音乐继续，我们摇曳依旧。我看着夏的眼神越来越迷离，仿佛已经脱离到另外一个世界。终于我也在这迷离中失掉了自己，热烈而笨拙地回应着夏狂舞。世界仿佛已经消失不见，我感觉我绷紧已久的神经正慢慢松驰，松驰，直到遥远的末日。<br>&emsp;&emsp;到我们离开的时候，夏已经醉得无法行走了。我酒意已深，但还没到不能控制的地步。我扶着夏走在寂静无人的深夜里，街上的路灯照射出两个人的倒影。我思索着接下来应该如何处理。这时夏说：<br>&emsp;&emsp;“嘿，我们到旅馆开个房间如何？”<br>&emsp;&emsp;“也只能这样了。”我说。</p>\n<p>&emsp;&emsp;五</p>\n<p>&emsp;&emsp;在旅馆昏黄的灯光下，我和夏极为自然地接吻。我脱下她的衣服，用手指轻轻捏她的乳头。夏的乳房匀称而略为丰满。我把头埋在双峰之间，然后吻遍她的全身。夏的呻吟不时时地响起。<br>&emsp;&emsp;不多时，我灭了灯。万籁寂静的黑暗里只听见一阵阵喘息声。当我探至底谷的时候，夏的身子微微一颤。我似乎听到轻轻的叹气声。我抱住她，一边不断地抽动，一边吻着她的耳垂。夏一直抽搐着身体迎合我。整个夜晚她的呼吸声伴随着呻吟声一直在我耳边缭绕，仿佛来自天国的歌声。<br>&emsp;&emsp;第二天醒来的时候，身边只剩空枕一个。夏正站在窗台前面边吸着烟，边看着窗外发呆。我洗漱完毕，夏依旧还在看着窗外。<br>&emsp;&emsp;“喂，在看什么？”我问。<br>&emsp;&emsp;“没有，”她盯着前方，继而转过头来，“抽烟不？”<br>&emsp;&emsp;“谢谢，我不抽烟。”<br>&emsp;&emsp;“我其实也不抽烟。”<br>&emsp;&emsp;“那怎么……”<br>&emsp;&emsp;她转过脸去，继续看着窗外我无法体会的东西，“我一直随身携带着香烟，然而几乎没有抽过。但是我不知怎的现在想抽得很，想狠狠地抽它一顿。仿佛我一直携带在身上就为了这一刻。”<br>&emsp;&emsp;“那接下来怎么办？继续抽烟还是回去？”，我看了看表，“现在回去上第三节课？”<br>&emsp;&emsp;“走吧。”夏扔下快抽完的烟头，把它踩灭。<br>&emsp;&emsp;一路上我们都没有说话，仿佛两个不认识的人因一种奇妙的因素走到一起。街上的行人车辆来去匆匆，一点也没有顾及两个醉酒逃学的人。<br>&emsp;&emsp;不知为何，一路我都有一种莫名的感觉，感觉夏从来没有醉过，从昨晚到现在，她一直都是清醒的。<br>&emsp;&emsp;走进校门口的时候，夏把头发扎了起来。</p>\n<p>&emsp;&emsp;六</p>\n<p>&emsp;&emsp;那个星期剩下的几天里，我都没有去酒吧，因为要和夏见面。并不是我对夏不再有感觉。事实上，那晚之后我怀念夏的程度，比任何时候都要强烈。我怀念她的体香，她的肌肤，她那柔软的触感，她那进去之后的呻吟声。但是不知道为什么，我就是不想见到她。<br>&emsp;&emsp;就这样过了一个多星期。一天晚上，课程结束后，我正收拾书包准备离开。这时候夏走了过来。<br>&emsp;&emsp;“现在有空？”<br>&emsp;&emsp;我想了想，说：“有。”<br>&emsp;&emsp;“跟我去喝一杯？”<br>&emsp;&emsp;“走吧。”<br>&emsp;&emsp;于是我们一起走到酒吧。酒吧里依旧喧闹不堪，夏拿了几瓶啤酒，我们在角落里坐下。<br>&emsp;&emsp;“改喝啤酒了？”我问。<br>&emsp;&emsp;“都喝。话说，最近怎么没来？”<br>&emsp;&emsp;“有点忙，还有不怎么想来。”<br>&emsp;&emsp;“为什么？”夏边喝着啤酒边问。<br>&emsp;&emsp;“不知道哪。”<br>&emsp;&emsp;“因为和我做爱？”<br>&emsp;&emsp;“可能是吧。”我说。<br>&emsp;&emsp;“哈哈。”夏把杯里的啤酒倒满，和我碰了杯，一饮而尽。<br>&emsp;&emsp;“说说没来的晚上都发生了什么吧。”。<br>&emsp;&emsp;“无非就是无聊发呆消磨时间。”<br>&emsp;&emsp;那天夜里喝完酒之后，我们都不约而同地走向旅馆。这次彼此都没有醉，我们飞快地脱下对方的衣服，然后扑到床上缠绕在一起。夏的舌头不停地在我身上游走。我报之以用力地抽动。<br>&emsp;&emsp;结束之后，我们开着床头灯躺在一起，夏枕着我的手臂。我们望着灰白的天花板发呆。我不知道夏在想什么。在我脑海中展现的是童年的某个片段，我在绿草如茵的足球场上和一群同学踢着足球，蓝天下我们都在奔跑，毫无顾忌地往前冲。那个我喜欢的女孩子正站在足球场边看着。操场上回荡着一阵阵笑声和叫喊声。小学毕业的时候我们分开。六年之后那个女孩得了肝癌死了，我连最后一面都没能见到。这时候我才意识到我的青春也随之逝去，消失在永久的深渊里。<br>&emsp;&emsp;“喂，说真的，为什么最近没有来？”夏突然问我。<br>&emsp;&emsp;“不是说了么？”<br>&emsp;&emsp;“可知道我等了你一个多星期了？”<br>&emsp;&emsp;“为什么？”<br>&emsp;&emsp;“不知道，可能是没事干吧，反正就是想见你。”<br>&emsp;&emsp;“你不会爱上我了吧？”<br>&emsp;&emsp;“怎么可能，爱情都是骗人的。”<br>&emsp;&emsp;“失恋了？”<br>&emsp;&emsp;“之前是。”<br>&emsp;&emsp;“什么时候？”<br>&emsp;&emsp;“认识你之前。”<br>&emsp;&emsp;我轻轻一笑：“那个在咖啡馆坐你前面的就是？”<br>&emsp;&emsp;“咖啡馆？我想想，”夏搔了搔头发，“嗯，是的，你知道？”<br>&emsp;&emsp;“不知道。”我说，“睡吧，明天不想再逃课了。”<br>&emsp;&emsp;“为什么？”<br>&emsp;&emsp;“逃课很无聊。”<br>&emsp;&emsp;我背对着夏，渐渐地睡着了。</p>\n<p>&emsp;&emsp;七</p>\n<p>&emsp;&emsp;从那以后，我们每周有两三个晚上在一起。我们在酒吧喝酒，跳舞（我已渐渐自如起来），在旅馆里接吻，做爱。但是，这种事情久了也会令人厌烦。不做爱的晚上，我们躺在床上，亮着床头灯，或谈话，或发呆，或看着窗外的夜空。月亮依旧阴晴圆缺永不回头，夜夜注视着睡着的或失眠的人。<br>&emsp;&emsp;在那些日子里，除了第一次外，我们竟没有逃过一节课。每个那样的夜晚之后，第二天我们都准时坐在教室的座位上。夏依旧坐在前排，扎着马尾，穿着白色的衣服，在写字的时候左手抓着笔帽。我依旧坐在后面托着下巴，看着夏坐在那里听课的样子，以及整间教室各做自己事情的人群。<br>&emsp;&emsp;一天夜晚，在做爱之后，夏靠在我的胸前，自言自语似的说：“我又谈恋爱了。”<br>&emsp;&emsp;“是谁啊？”我问。<br>&emsp;&emsp;“黎，认识不？”<br>&emsp;&emsp;我摇摇头。<br>&emsp;&emsp;“就知道你不认识。”<br>&emsp;&emsp;“怎么认识的？”<br>&emsp;&emsp;“通过同学，”夏看着天花板，“上周末去参加我同学的生日聚会。玩游戏失败之后受到惩罚，他吻了我的脸来着。然后我们就约会了。”<br>&emsp;&emsp;“做爱了？”<br>&emsp;&emsp;“没呢，”夏转过脸来看着我，“你介意？”<br>&emsp;&emsp;“当然不是。”我说。<br>&emsp;&emsp;夏抓住我的手放在她的胸前，说：<br>&emsp;&emsp;“我顶喜欢跟你在一起。真的，跟你在一起的时候，我绷紧的心仿佛得到了放松，仿佛一觉睡到自然醒那般舒服。更重要的是，你从来不会要求我做什么。这一点令我非常高兴。”<br>&emsp;&emsp;“是吗？我倒是觉得这一点正是我好几次恋爱失败的罪魁祸首呢。”<br>&emsp;&emsp;“这个我理解，恋人之间总是需要互相要求的。虽然是必须，但是同时也非常累人。”<br>&emsp;&emsp;“好像是。”<br>&emsp;&emsp;“讲讲你怎么失败的吧？”夏说道。<br>&emsp;&emsp;那天夜里夏讲了很多，她的恋爱经历比我丰富得多，又波澜壮阔得多。她谈过不下十次恋爱，每次的过程都比得上我全部恋爱加在一起。但是她说，她最念念不忘的只有第一次恋爱。<br>&emsp;&emsp;“当我第一次把身体献给他的时候，我心里有一种感觉，我的一生将和他脱离不了关系。”<br>&emsp;&emsp;“后来呢？”我问。<br>&emsp;&emsp;“后来？”，她笑了笑，“后来他就让别的女孩和他脱不了关系。”<br>&emsp;&emsp;“真是令人难过。”</p>\n<p>&emsp;&emsp;我不知道我们什么时候睡着。当我起床的时候，夏正侧卧在床上看着我。<br>&emsp;&emsp;“喂，”她说，“迟到了哦，猪。”<br>&emsp;&emsp;“怎么不叫醒我？”我赶紧起身穿衣服。<br>&emsp;&emsp;“就是不叫你，你睡觉的时候蛮可爱的。”<br>&emsp;&emsp;“是吗，刷牙了没？”<br>&emsp;&emsp;“还没。”<br>&emsp;&emsp;“弄完赶快走吧。”<br>&emsp;&emsp;一路上夏不忘把头发扎起来。是个好天气，阳光灿烂，街道两旁的树木开着不知名的花，散发出阵阵清香。快走到教室的时候，我突然问：<br>&emsp;&emsp;“夏，干嘛不跟我谈恋爱？”<br>&emsp;&emsp;夏停住了，，像看着一个顽皮的孩子那般笑起来：“拿你当恋人太可惜了。爱情是一场宿醉。”<br>&emsp;&emsp;“这可不一定，”我说，“不过，我也觉得你当恋人太浪费了。”<br>&emsp;&emsp;说完，我头也不回地走进教室。<br><br><br>&emsp;&emsp;写于2016年。</p>"},{"title":"常用css","date":"2020-05-21T06:39:26.000Z","_content":"\n记录下常用 css\n\n<!--more-->\n\n### 常用 css\n\n```css\nbody,\ndiv,\nul,\nli,\nh1,\nh2,\nh3,\nh4,\nh5,\ninput,\nform,\na,\np,\ntextarea {\n    margin: 0;\n    padding: 0;\n}\nol ul li {\n    list-style: none;\n}\na {\n    text-decoration: none;\n    display: block;\n    color: #fff;\n}\nimg {\n    border: 0;\n    display: block;\n}\n\n/* 清除浮动 */\n.clearfloat {\n    zoom: 1;\n}\n.clearfloat:after {\n    display: block;\n    clear: both;\n    content: \"\";\n    visibility: hidden;\n    height: 0;\n}\n\n/*修改placeholder样式*/\n:-moz-placeholder {\n    /* Mozilla Firefox 4 to 18 */\n    color: hsla(40, 70%, 100%, 0.3) !important;\n    font-size: 14px;\n    opacity: 1; /*火狐浏览器默认opacity小=小于1*/\n}\n::-moz-placeholder {\n    /* Mozilla Firefox 19+ */\n    color: hsla(40, 70%, 100%, 0.3) !important;\n    font-size: 14px;\n    opacity: 1;\n}\n:-ms-input-placeholder {\n    color: #fff !important;\n    font-size: 14px;\n}\n::-webkit-input-placeholder {\n    color: #fff !important;\n    font-size: 14px;\n    opacity: 0.3;\n}\n\n/*单行省略*/\n.ellipsis {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n\n/*多行省略溢出省略号*/\np {\n    position: relative;\n    line-height: 1.4em;\n    /* 3 times the line-height to show 3 lines */\n    height: 4.2em;\n    overflow: hidden;\n}\np::after {\n    content: \"...\";\n    font-weight: bold;\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    padding: 0 20px 1px 45px;\n    background: url(http://css88.b0.upaiyun.com/css88/2014/09/ellipsis_bg.png) repeat-y;\n}\n/*注意：\nheight高度真好是line-height的3倍；\n结束的省略好用了半透明的png做了减淡的效果，或者设置背景颜色；\nIE6-7不显示content内容，所以要兼容IE6-7可以是在内容中加入一个标签，比如用<span class=\"line-clamp\">...</span>去模拟；\n要支持IE8，需要将::after替换成:after；*/\n\n/*webkit内核多行省略*/\n.ellipsis-webkit {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: 2; /* 限制在一个块元素显示的文本的行数 */\n    -webkit-box-orient: vertical;\n}\n\n/*多行文字水平垂直居中（一般是尾部）*/\nfooter {\n    display: table;\n    width: 100%;\n    height: 80px;\n    text-align: center;\n}\nfooter > div {\n    display: table-cell;\n    vertical-align: middle;\n}\nfooter > div > p {\n}\n\n/*绝对定位的div相对父类居中*/\ndiv｛position: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\n｝\n\n/*去掉谷歌浏览器报错Unable to preventDefault inside passive event listener due to target being treated as passive. */\n* {\n    touch-action: pan-y;\n}\n\n/*实现0.5px的线*/\n.line1 {\n    transform: scaleY(0.5);\n    transform-origin: 50% 100%;\n    width: 200px;\n    height: 1px;\n    background: #000;\n}\n.line2 {\n    width: 200px;\n    height: 1px;\n    background: linear-gradient(0deg, #fff, #000);\n}\n.line3 {\n    width: 200px;\n    height: 1px;\n    background: none;\n    box-shadow: 0 0.5px 0 #000;\n}\n\n/*下面每两个一组是相等的*/\n/*当flex取值为一个非负数字，则该数字为flex-grow 值，flex-shrink为1，flex-basis为0% ，使子元素平分空间*/\n.item {\n    flex: 1;\n}\n.item {\n    flex-grow: 1;\n    flex-shrink: 1;\n    flex-basis: 0%;\n}\n\n/*元素会根据自身宽高来设置尺寸。它是完全非弹性的：既不会缩短，也不会伸长来适应 flex 容器。*/\n.item {\n    flex: none;\n}\n.item {\n    flex-grow: 0;\n    flex-shrink: 0;\n    flex-basis: auto;\n}\n\n/*元素会根据自身的宽度与高度来确定尺寸，但是会伸长并吸收 flex 容器中额外的自由空间，也会缩短自身来适应 flex 容器。*/\n.item {\n    flex: auto;\n}\n.item {\n    flex-grow: 1;\n    flex-shrink: 1;\n    flex-basis: auto;\n}\n\n/*针对全面屏的底部安全区域做适配*/\n/*constant()和env()位置不能换*/\n/*env()和constant()函数有个必要的使用前提，H5网页设置viewport-fit=cover的时候才生效，小程序里的viewport-fit默认是cover。*/\n@supports (bottom: constant(safe-area-inset-bottom)) or (bottom: env(safe-area-inset-bottom)) {\n    .body {\n        padding-bottom: constant(safe-area-inset-bottom); /* 兼容 iOS < 11.2 */\n        padding-bottom: env(safe-area-inset-bottom); /* 兼容 iOS >= 11.2 */\n       /* padding-bottom: calc(60px(假设值) + constant(safe-area-inset-bottom));\n        padding-bottom: calc(60px(假设值) + env(safe-area-inset-bottom));*/\n    }\n}\n\n/*三角形*/\n.triangle-up {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-bottom: 100px solid red;\n}\n\n.triangle-down {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-top: 100px solid red;\n}\n\n.triangle-left {\n    width: 0;\n    height: 0;\n    border-top: 50px solid transparent;\n    border-right: 100px solid red;\n    border-bottom: 50px solid transparent;\n}\n\n.triangle-right {\n    width: 0;\n    height: 0;\n    border-top: 50px solid transparent;\n    border-left: 100px solid red;\n    border-bottom: 50px solid transparent;\n}\n\n.triangle-topleft {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-right: 100px solid transparent;\n}\n\n.triangle-topright {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-left: 100px solid transparent;\n}\n\n.triangle-bottomleft {\n    width: 0;\n    height: 0;\n    border-bottom: 100px solid red;\n    border-right: 100px solid transparent;\n}\n\n/*钝角箭头*/\n.right-arrow {\n    width: 44px;\n    height: 44px;\n    border-top: 1px solid #ccc;\n    border-right: 1px solid #ccc;\n    transform: rotate(45deg) skew(30deg, 30deg);\n}\n\n/*纯css实现loading*/\n.loading {\n  width: 20px;\n  height: 20px;\n  border: 2px solid #7d329c;\n  border-bottom: 2px solid transparent;\n  border-radius: 50%;\n  animation: load 1.5s linear infinite;\n}\n\n@keyframes load {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n```\n\n### 兼容性问题\n\n-   IE6 中，第一个浮动到父元素边上的元素，如果含有该方向的 margin 值，那么 margin 会以双倍显示。即：浮动元素的左边距在 IE6 上为所设定的左边距的两倍。这个问题只会发生在浮动行的第一个浮动元素上。准确的说：应该是每一行的第一个元素都会受此影响。\n    为了解决该问题，需要给浮动元素添加属性 display: inline，即可解决。\n\n-   iOS11 中 position:fixed 弹出框中的 input 光标错位的问题  \n    在弹框出现的时候给 body 添加 fixed:\n\n```css\nbody {\n    position: fixed;\n    width: 100%;\n}\n```\n\n    当弹框消失的时候\n    ```css\n    $(\"body\").css(\"position\",\"relative\")\n    ```\n","source":"_posts/常用css.md","raw":"---\ntitle: 常用css\ndate: 2020-05-21 14:39:26\ncategories: 技术\ntags: [前端]\n---\n\n记录下常用 css\n\n<!--more-->\n\n### 常用 css\n\n```css\nbody,\ndiv,\nul,\nli,\nh1,\nh2,\nh3,\nh4,\nh5,\ninput,\nform,\na,\np,\ntextarea {\n    margin: 0;\n    padding: 0;\n}\nol ul li {\n    list-style: none;\n}\na {\n    text-decoration: none;\n    display: block;\n    color: #fff;\n}\nimg {\n    border: 0;\n    display: block;\n}\n\n/* 清除浮动 */\n.clearfloat {\n    zoom: 1;\n}\n.clearfloat:after {\n    display: block;\n    clear: both;\n    content: \"\";\n    visibility: hidden;\n    height: 0;\n}\n\n/*修改placeholder样式*/\n:-moz-placeholder {\n    /* Mozilla Firefox 4 to 18 */\n    color: hsla(40, 70%, 100%, 0.3) !important;\n    font-size: 14px;\n    opacity: 1; /*火狐浏览器默认opacity小=小于1*/\n}\n::-moz-placeholder {\n    /* Mozilla Firefox 19+ */\n    color: hsla(40, 70%, 100%, 0.3) !important;\n    font-size: 14px;\n    opacity: 1;\n}\n:-ms-input-placeholder {\n    color: #fff !important;\n    font-size: 14px;\n}\n::-webkit-input-placeholder {\n    color: #fff !important;\n    font-size: 14px;\n    opacity: 0.3;\n}\n\n/*单行省略*/\n.ellipsis {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n\n/*多行省略溢出省略号*/\np {\n    position: relative;\n    line-height: 1.4em;\n    /* 3 times the line-height to show 3 lines */\n    height: 4.2em;\n    overflow: hidden;\n}\np::after {\n    content: \"...\";\n    font-weight: bold;\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    padding: 0 20px 1px 45px;\n    background: url(http://css88.b0.upaiyun.com/css88/2014/09/ellipsis_bg.png) repeat-y;\n}\n/*注意：\nheight高度真好是line-height的3倍；\n结束的省略好用了半透明的png做了减淡的效果，或者设置背景颜色；\nIE6-7不显示content内容，所以要兼容IE6-7可以是在内容中加入一个标签，比如用<span class=\"line-clamp\">...</span>去模拟；\n要支持IE8，需要将::after替换成:after；*/\n\n/*webkit内核多行省略*/\n.ellipsis-webkit {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: 2; /* 限制在一个块元素显示的文本的行数 */\n    -webkit-box-orient: vertical;\n}\n\n/*多行文字水平垂直居中（一般是尾部）*/\nfooter {\n    display: table;\n    width: 100%;\n    height: 80px;\n    text-align: center;\n}\nfooter > div {\n    display: table-cell;\n    vertical-align: middle;\n}\nfooter > div > p {\n}\n\n/*绝对定位的div相对父类居中*/\ndiv｛position: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\n｝\n\n/*去掉谷歌浏览器报错Unable to preventDefault inside passive event listener due to target being treated as passive. */\n* {\n    touch-action: pan-y;\n}\n\n/*实现0.5px的线*/\n.line1 {\n    transform: scaleY(0.5);\n    transform-origin: 50% 100%;\n    width: 200px;\n    height: 1px;\n    background: #000;\n}\n.line2 {\n    width: 200px;\n    height: 1px;\n    background: linear-gradient(0deg, #fff, #000);\n}\n.line3 {\n    width: 200px;\n    height: 1px;\n    background: none;\n    box-shadow: 0 0.5px 0 #000;\n}\n\n/*下面每两个一组是相等的*/\n/*当flex取值为一个非负数字，则该数字为flex-grow 值，flex-shrink为1，flex-basis为0% ，使子元素平分空间*/\n.item {\n    flex: 1;\n}\n.item {\n    flex-grow: 1;\n    flex-shrink: 1;\n    flex-basis: 0%;\n}\n\n/*元素会根据自身宽高来设置尺寸。它是完全非弹性的：既不会缩短，也不会伸长来适应 flex 容器。*/\n.item {\n    flex: none;\n}\n.item {\n    flex-grow: 0;\n    flex-shrink: 0;\n    flex-basis: auto;\n}\n\n/*元素会根据自身的宽度与高度来确定尺寸，但是会伸长并吸收 flex 容器中额外的自由空间，也会缩短自身来适应 flex 容器。*/\n.item {\n    flex: auto;\n}\n.item {\n    flex-grow: 1;\n    flex-shrink: 1;\n    flex-basis: auto;\n}\n\n/*针对全面屏的底部安全区域做适配*/\n/*constant()和env()位置不能换*/\n/*env()和constant()函数有个必要的使用前提，H5网页设置viewport-fit=cover的时候才生效，小程序里的viewport-fit默认是cover。*/\n@supports (bottom: constant(safe-area-inset-bottom)) or (bottom: env(safe-area-inset-bottom)) {\n    .body {\n        padding-bottom: constant(safe-area-inset-bottom); /* 兼容 iOS < 11.2 */\n        padding-bottom: env(safe-area-inset-bottom); /* 兼容 iOS >= 11.2 */\n       /* padding-bottom: calc(60px(假设值) + constant(safe-area-inset-bottom));\n        padding-bottom: calc(60px(假设值) + env(safe-area-inset-bottom));*/\n    }\n}\n\n/*三角形*/\n.triangle-up {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-bottom: 100px solid red;\n}\n\n.triangle-down {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-top: 100px solid red;\n}\n\n.triangle-left {\n    width: 0;\n    height: 0;\n    border-top: 50px solid transparent;\n    border-right: 100px solid red;\n    border-bottom: 50px solid transparent;\n}\n\n.triangle-right {\n    width: 0;\n    height: 0;\n    border-top: 50px solid transparent;\n    border-left: 100px solid red;\n    border-bottom: 50px solid transparent;\n}\n\n.triangle-topleft {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-right: 100px solid transparent;\n}\n\n.triangle-topright {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-left: 100px solid transparent;\n}\n\n.triangle-bottomleft {\n    width: 0;\n    height: 0;\n    border-bottom: 100px solid red;\n    border-right: 100px solid transparent;\n}\n\n/*钝角箭头*/\n.right-arrow {\n    width: 44px;\n    height: 44px;\n    border-top: 1px solid #ccc;\n    border-right: 1px solid #ccc;\n    transform: rotate(45deg) skew(30deg, 30deg);\n}\n\n/*纯css实现loading*/\n.loading {\n  width: 20px;\n  height: 20px;\n  border: 2px solid #7d329c;\n  border-bottom: 2px solid transparent;\n  border-radius: 50%;\n  animation: load 1.5s linear infinite;\n}\n\n@keyframes load {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n```\n\n### 兼容性问题\n\n-   IE6 中，第一个浮动到父元素边上的元素，如果含有该方向的 margin 值，那么 margin 会以双倍显示。即：浮动元素的左边距在 IE6 上为所设定的左边距的两倍。这个问题只会发生在浮动行的第一个浮动元素上。准确的说：应该是每一行的第一个元素都会受此影响。\n    为了解决该问题，需要给浮动元素添加属性 display: inline，即可解决。\n\n-   iOS11 中 position:fixed 弹出框中的 input 光标错位的问题  \n    在弹框出现的时候给 body 添加 fixed:\n\n```css\nbody {\n    position: fixed;\n    width: 100%;\n}\n```\n\n    当弹框消失的时候\n    ```css\n    $(\"body\").css(\"position\",\"relative\")\n    ```\n","slug":"常用css","published":1,"updated":"2021-08-16T03:31:00.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm63w00198hsp0vt2bm41","content":"<p>记录下常用 css</p>\n<a id=\"more\"></a>\n<h3 id=\"常用-css\"><a href=\"#常用-css\" class=\"headerlink\" title=\"常用 css\"></a>常用 css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">div</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">li</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h5</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">form</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">textarea</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 清除浮动 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.clearfloat</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">zoom</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfloat</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*修改placeholder样式*/</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:-moz-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Mozilla Firefox 4 to 18 */</span></span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">hsla</span>(40, 70%, 100%, 0.3) <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>; <span class=\"comment\">/*火狐浏览器默认opacity小=小于1*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">::-moz-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Mozilla Firefox 19+ */</span></span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">hsla</span>(40, 70%, 100%, 0.3) <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:-ms-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">::-webkit-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0.3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*单行省略*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.ellipsis</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*多行省略溢出省略号*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.4em</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* 3 times the line-height to show 3 lines */</span></span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">4.2em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"...\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">20px</span> <span class=\"number\">1px</span> <span class=\"number\">45px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(http://css88.b0.upaiyun.com/css88/2014/09/ellipsis_bg.png) repeat-y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*注意：</span></span><br><span class=\"line\"><span class=\"comment\">height高度真好是line-height的3倍；</span></span><br><span class=\"line\"><span class=\"comment\">结束的省略好用了半透明的png做了减淡的效果，或者设置背景颜色；</span></span><br><span class=\"line\"><span class=\"comment\">IE6-7不显示content内容，所以要兼容IE6-7可以是在内容中加入一个标签，比如用&lt;span class=\"line-clamp\"&gt;...&lt;/span&gt;去模拟；</span></span><br><span class=\"line\"><span class=\"comment\">要支持IE8，需要将::after替换成:after；*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*webkit内核多行省略*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.ellipsis-webkit</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-line-clamp</span>: <span class=\"number\">2</span>; <span class=\"comment\">/* 限制在一个块元素显示的文本的行数 */</span></span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-orient</span>: vertical;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*多行文字水平垂直居中（一般是尾部）*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">footer</span> &gt; <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">footer</span> &gt; <span class=\"selector-tag\">div</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*绝对定位的div相对父类居中*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span>｛<span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">absolute</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">top</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">left</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">translate</span>(<span class=\"selector-tag\">-50</span>%, <span class=\"selector-tag\">-50</span>%);</span><br><span class=\"line\">｝</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*去掉谷歌浏览器报错Unable to preventDefault inside passive event listener due to target being treated as passive. */</span></span><br><span class=\"line\">* &#123;</span><br><span class=\"line\">    <span class=\"attribute\">touch-action</span>: pan-y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*实现0.5px的线*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.line1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scaleY</span>(0.5);</span><br><span class=\"line\">    <span class=\"attribute\">transform-origin</span>: <span class=\"number\">50%</span> <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.line2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(0deg, #fff, #000);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.line3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0.5px</span> <span class=\"number\">0</span> <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*下面每两个一组是相等的*/</span></span><br><span class=\"line\"><span class=\"comment\">/*当flex取值为一个非负数字，则该数字为flex-grow 值，flex-shrink为1，flex-basis为0% ，使子元素平分空间*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex-basis</span>: <span class=\"number\">0%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*元素会根据自身宽高来设置尺寸。它是完全非弹性的：既不会缩短，也不会伸长来适应 flex 容器。*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-grow</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex-basis</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*元素会根据自身的宽度与高度来确定尺寸，但是会伸长并吸收 flex 容器中额外的自由空间，也会缩短自身来适应 flex 容器。*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex-basis</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*针对全面屏的底部安全区域做适配*/</span></span><br><span class=\"line\"><span class=\"comment\">/*constant()和env()位置不能换*/</span></span><br><span class=\"line\"><span class=\"comment\">/*env()和constant()函数有个必要的使用前提，H5网页设置viewport-fit=cover的时候才生效，小程序里的viewport-fit默认是cover。*/</span></span><br><span class=\"line\">@<span class=\"keyword\">supports</span> (bottom: constant(safe-area-inset-bottom)) or (bottom: env(safe-area-inset-bottom)) &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.body</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">padding-bottom</span>: <span class=\"built_in\">constant</span>(safe-area-inset-bottom); <span class=\"comment\">/* 兼容 iOS &lt; 11.2 */</span></span><br><span class=\"line\">        <span class=\"attribute\">padding-bottom</span>: <span class=\"built_in\">env</span>(safe-area-inset-bottom); <span class=\"comment\">/* 兼容 iOS &gt;= 11.2 */</span></span><br><span class=\"line\">       <span class=\"comment\">/* padding-bottom: calc(60px(假设值) + constant(safe-area-inset-bottom));</span></span><br><span class=\"line\"><span class=\"comment\">        padding-bottom: calc(60px(假设值) + env(safe-area-inset-bottom));*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*三角形*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.triangle-up</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.triangle-down</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.triangle-left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.triangle-right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.triangle-topleft</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.triangle-topright</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">100px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.triangle-bottomleft</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*钝角箭头*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.right-arrow</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">44px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">44px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(45deg) <span class=\"built_in\">skew</span>(30deg, 30deg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*纯css实现loading*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.loading</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#7d329c</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">2px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: load <span class=\"number\">1.5s</span> linear infinite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> load &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(0deg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(360deg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"兼容性问题\"><a href=\"#兼容性问题\" class=\"headerlink\" title=\"兼容性问题\"></a>兼容性问题</h3><ul>\n<li><p>IE6 中，第一个浮动到父元素边上的元素，如果含有该方向的 margin 值，那么 margin 会以双倍显示。即：浮动元素的左边距在 IE6 上为所设定的左边距的两倍。这个问题只会发生在浮动行的第一个浮动元素上。准确的说：应该是每一行的第一个元素都会受此影响。<br>为了解决该问题，需要给浮动元素添加属性 display: inline，即可解决。</p>\n</li>\n<li><p>iOS11 中 position:fixed 弹出框中的 input 光标错位的问题<br>在弹框出现的时候给 body 添加 fixed:</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>当弹框消失的时候\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(\"body\").css(\"position\",\"relative\")</span><br></pre></td></tr></table></figure>\n</code></pre>","site":{"data":{}},"excerpt":"<p>记录下常用 css</p>","more":"<h3 id=\"常用-css\"><a href=\"#常用-css\" class=\"headerlink\" title=\"常用 css\"></a>常用 css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">div</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">li</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h5</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">form</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">textarea</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 清除浮动 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.clearfloat</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">zoom</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfloat</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*修改placeholder样式*/</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:-moz-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Mozilla Firefox 4 to 18 */</span></span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">hsla</span>(40, 70%, 100%, 0.3) <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>; <span class=\"comment\">/*火狐浏览器默认opacity小=小于1*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">::-moz-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Mozilla Firefox 19+ */</span></span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">hsla</span>(40, 70%, 100%, 0.3) <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:-ms-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">::-webkit-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0.3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*单行省略*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.ellipsis</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*多行省略溢出省略号*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.4em</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* 3 times the line-height to show 3 lines */</span></span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">4.2em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"...\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">20px</span> <span class=\"number\">1px</span> <span class=\"number\">45px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(http://css88.b0.upaiyun.com/css88/2014/09/ellipsis_bg.png) repeat-y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*注意：</span></span><br><span class=\"line\"><span class=\"comment\">height高度真好是line-height的3倍；</span></span><br><span class=\"line\"><span class=\"comment\">结束的省略好用了半透明的png做了减淡的效果，或者设置背景颜色；</span></span><br><span class=\"line\"><span class=\"comment\">IE6-7不显示content内容，所以要兼容IE6-7可以是在内容中加入一个标签，比如用&lt;span class=\"line-clamp\"&gt;...&lt;/span&gt;去模拟；</span></span><br><span class=\"line\"><span class=\"comment\">要支持IE8，需要将::after替换成:after；*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*webkit内核多行省略*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.ellipsis-webkit</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-line-clamp</span>: <span class=\"number\">2</span>; <span class=\"comment\">/* 限制在一个块元素显示的文本的行数 */</span></span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-orient</span>: vertical;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*多行文字水平垂直居中（一般是尾部）*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">footer</span> &gt; <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">footer</span> &gt; <span class=\"selector-tag\">div</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*绝对定位的div相对父类居中*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span>｛<span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">absolute</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">top</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">left</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">translate</span>(<span class=\"selector-tag\">-50</span>%, <span class=\"selector-tag\">-50</span>%);</span><br><span class=\"line\">｝</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*去掉谷歌浏览器报错Unable to preventDefault inside passive event listener due to target being treated as passive. */</span></span><br><span class=\"line\">* &#123;</span><br><span class=\"line\">    <span class=\"attribute\">touch-action</span>: pan-y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*实现0.5px的线*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.line1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scaleY</span>(0.5);</span><br><span class=\"line\">    <span class=\"attribute\">transform-origin</span>: <span class=\"number\">50%</span> <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.line2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(0deg, #fff, #000);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.line3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0.5px</span> <span class=\"number\">0</span> <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*下面每两个一组是相等的*/</span></span><br><span class=\"line\"><span class=\"comment\">/*当flex取值为一个非负数字，则该数字为flex-grow 值，flex-shrink为1，flex-basis为0% ，使子元素平分空间*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex-basis</span>: <span class=\"number\">0%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*元素会根据自身宽高来设置尺寸。它是完全非弹性的：既不会缩短，也不会伸长来适应 flex 容器。*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-grow</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex-basis</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*元素会根据自身的宽度与高度来确定尺寸，但是会伸长并吸收 flex 容器中额外的自由空间，也会缩短自身来适应 flex 容器。*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex-basis</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*针对全面屏的底部安全区域做适配*/</span></span><br><span class=\"line\"><span class=\"comment\">/*constant()和env()位置不能换*/</span></span><br><span class=\"line\"><span class=\"comment\">/*env()和constant()函数有个必要的使用前提，H5网页设置viewport-fit=cover的时候才生效，小程序里的viewport-fit默认是cover。*/</span></span><br><span class=\"line\">@<span class=\"keyword\">supports</span> (bottom: constant(safe-area-inset-bottom)) or (bottom: env(safe-area-inset-bottom)) &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.body</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">padding-bottom</span>: <span class=\"built_in\">constant</span>(safe-area-inset-bottom); <span class=\"comment\">/* 兼容 iOS &lt; 11.2 */</span></span><br><span class=\"line\">        <span class=\"attribute\">padding-bottom</span>: <span class=\"built_in\">env</span>(safe-area-inset-bottom); <span class=\"comment\">/* 兼容 iOS &gt;= 11.2 */</span></span><br><span class=\"line\">       <span class=\"comment\">/* padding-bottom: calc(60px(假设值) + constant(safe-area-inset-bottom));</span></span><br><span class=\"line\"><span class=\"comment\">        padding-bottom: calc(60px(假设值) + env(safe-area-inset-bottom));*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*三角形*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.triangle-up</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.triangle-down</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.triangle-left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.triangle-right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.triangle-topleft</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.triangle-topright</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">100px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.triangle-bottomleft</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*钝角箭头*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.right-arrow</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">44px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">44px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(45deg) <span class=\"built_in\">skew</span>(30deg, 30deg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*纯css实现loading*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.loading</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#7d329c</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">2px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: load <span class=\"number\">1.5s</span> linear infinite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> load &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(0deg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(360deg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"兼容性问题\"><a href=\"#兼容性问题\" class=\"headerlink\" title=\"兼容性问题\"></a>兼容性问题</h3><ul>\n<li><p>IE6 中，第一个浮动到父元素边上的元素，如果含有该方向的 margin 值，那么 margin 会以双倍显示。即：浮动元素的左边距在 IE6 上为所设定的左边距的两倍。这个问题只会发生在浮动行的第一个浮动元素上。准确的说：应该是每一行的第一个元素都会受此影响。<br>为了解决该问题，需要给浮动元素添加属性 display: inline，即可解决。</p>\n</li>\n<li><p>iOS11 中 position:fixed 弹出框中的 input 光标错位的问题<br>在弹框出现的时候给 body 添加 fixed:</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>当弹框消失的时候\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(\"body\").css(\"position\",\"relative\")</span><br></pre></td></tr></table></figure>\n</code></pre>"},{"title":"常用命令","date":"2019-10-10T03:22:55.000Z","_content":"\n记录一些常用命令：\n\n<!--more-->\n\n### VIM\n\n#### 删除\n\n删除光标所在行：dd\n删除光标所在行以下 n 行（包括光标行）：ndd（如删除 10 行，则 10dd）\n\n光标移到第一行，然后\n在非插入模式按 10000 后然后点 dd 。\n要嫌笨的话就在非插入模式下\n输入:.,\\$d 一回车就全没了\n\n#### 移动光标\n\n-   移动光标到文件头部 gg\n-   移动光标到文件尾部 shift + g\n-   移动光标到指定行 :行数\n-   移动光标到行首shift + 6\n-   移动光标到行尾shift + 4\n\n#### 在底线命令模式中，基本的命令有\n\n-   :q 不保存,直接退出\n-   :q! 不保存，并强制退出\n-   :e! 放弃所有修改，从上次保存文件开始再编辑\n-   :w 保存文件,但不退出\n-   :w! 强制保存，不退出\n-   :wq 或 x 保存，并退出\n-   :wq! 强制保存，并退出\n-   :按 ESC 键可随时退出底线命令模式。\n\n-   在命令模式下，输入/你要查找的字符\n\n按下回车，可以看到 vim 把光标移动到该字符处\n\n再按 n（小写）查看下一个匹配\n\n按 N(大写）查看上一个匹配\n\n-   从结尾处搜索\n\n？要搜索的字符串或字符\n\n#### 多窗口：\n\n-   vim -o file1 file2 file3（横向分隔）\n-   vim -O file1 file2 file3（纵向分隔）\n-   已打开 file1，则:sp file2(水平分隔)\n-   已打开 file1，则:vsp file2(垂直分隔)\n\n如果 finename 不存在，则会新建该文件并打开。\n\n#### 窗口切换\n\nctrl + w w\n即按住 ctrl 键，再按两下 w 键。\n\n或者 ctrl + w <h|j|k|l>  \n即按住 ctrl 键，按一次 w 键，再按一次表示方向的 h 或 j 或 k 或 l，则光标会切换到当前窗口的 左｜下｜上｜右 侧的窗口\n\n#### 关闭：\n\n关闭光标所在的窗口  \n:q 或 :close\n\n关闭除光标所在的窗口之外的其他窗口  \n:only\n\n关闭所有窗口  \n:qa\n\n#### 撤销\n\nu 撤销上一步的操作\n\nCtrl+r 恢复上一步被撤销的操作\n\n#### 复制粘贴\n\n将光标移动到要复制的文本开始的地方，按 v 进入可视模式。\n\n将光标移动到要复制的文本的结束的地方，按 y 复制。 此时 vim 会自动将光标定位到选中文本的开始的地方，并退出可视模式。\n\n我移动光标到文本结束的地方，按 p 粘贴。\n\n更详细：\n\n复制的命令是 y，即 yank（提起） ，常用的命令如下：\n\n-   y      在使用 v 模式选定了某一块的时候，复制选定块到缓冲区用；\n-   yy    复制整行（nyy 或者 yny ，复制 n 行，n 为数字）；\n-   y^   复制当前到行头的内容；\n-   y\\$    复制当前到行尾的内容；\n-   yw   复制一个 word （nyw 或者 ynw，复制 n 个 word，n 为数字）；\n-   yG    复制至档尾（nyG 或者 ynG，复制到第 n 行，例如 1yG 或者 y1G，复制到档尾）\n\n剪切的命令是 d，即 delete，d 与 y 命令基本类似，所以两个命令用法一样，包括含有数字的用法.\n\n-   d 剪切选定块到缓冲区；\n-   dd 剪切整行\n-   d^ 剪切至行首\n-   d\\$ 剪切至行尾\n-   dw 剪切一个 word\n-   dG 剪切至档尾\n\n粘贴的命令式 p，即 put（放下）\n\n-   p   小写 p 代表贴至游标后（下），因为游标是在具体字符的位置上，所以实际是在该字符的后面\n-   P   大写 P 代表贴至游标前（上）\n-   整行的复制粘贴在游标的上（下）一行，非整行的复制则是粘贴在游标的前（后）\n\n#### 查找\n\n在 normal 模式下按下/即可进入查找模式，输入要查找的字符串并按下回车。 Vim 会跳转到第一个匹配。按下 n 查找下一个，按下 N 查找上一个\n\n### linux 命令\n\n#### 查看\n\n-   `less filename`(查看文件时跳到尾部 shift + g)\n\n-   `more filename`\n\n-   `cat filename`\n\n-   `tac filename`\n\n#### 上传\n\n`rz -y`(-y 是覆盖原文件)\n\n#### 下载\n\n-   下载一个文件: `sz filename`\n\n-   下载多个文件: `sz filename1 filename2`\n\n-   下载 dir 目录下的所有文件，不包含 dir 下的文件夹: `sz dir/*`\n\n#### 解压\n\n##### zip\n\n-   解压：`unzip FileName.zip`\n\n-   压缩：`zip -r FileName.zip name` 将文件夹或文件夹 name 压缩成一个 zip 包(-r 表示递归)\n\n##### rar\n\n-   解包：`unrar x FileName.rar`\n\n-   打包：`rar a FileName.rar name` 将文件夹或文件夹 name 打包成一个 rar 包\n\n##### tar.gz\n\n-   `tar -czvf jpg.tar.gz *.jpg` 把目录里所有 jpg 文件打包成 jpg.tar 后，并且将其用 gzip 压缩，生成一个 gzip 压缩过的包，命名为 jpg.tar.gz(-v 参数用显示压缩或者解压缩的过程)\n\n-   `tar -xzvf file.tar.gz` 解压 tar.gz\n\n#### 文件\n\n-   创建一个新的目录: `mkdir`\n\n-   删除空文件夹: `rmdir`\n\n-   强制删除非空文件: `rm -rf`(`-r` 就是向下递归，不管有多少级目录，一并删除, `-f` 就是直接强行删除，不作任何提示的意思)\n\n-   复制文件或目录: `cp [option] 来源档(source) 目标档(destination)`\n\n-   移动文件与目录，或修改文件与目录的名称: `mv [option] source destination`\n\n-   更改文件后缀名(可以批量),如把 js 文件改成 html 文件： `rename *.js *.html`\n\n-   `mv file1 file2` 把当前目录下的 file1 文件名改成 file2，如果该目录下有 file2，则覆盖以前的 file2 文件。\n\n-   `cp localFile.py new.py` 通过复制原文件来修改命名,localFile.py 修改为 new.py,原文件删除，则再输入命令:`rm localFile.py`\n\n#### 权限\n\n-   `chmod -R 777 /var/home/userid/cc` 设置文件夹权限所有人可读写\n\n### nginx\n\n-   `nginx -t` 检查配置文件是否正确\n\n-   `nginx -s reload` 重启 nginx\n\n### curl\n\n-   get请求:`curl http://127.0.0.1:8080/login?admin&passwd=12345678`\n\n-   post请求:\n\n```\ncurl -H \"Content-type: application/json\" -X POST -d '{\"userid\":\"13521232233\",\"telphone\":\"123456789\",\"username\":\"abc\"}' http://127.0.0.1:4010/users\n```\n","source":"_posts/常用命令.md","raw":"---\ntitle: 常用命令\ndate: 2019-10-10 11:22:55\ncategories: 技术\ntags: [前端]\n---\n\n记录一些常用命令：\n\n<!--more-->\n\n### VIM\n\n#### 删除\n\n删除光标所在行：dd\n删除光标所在行以下 n 行（包括光标行）：ndd（如删除 10 行，则 10dd）\n\n光标移到第一行，然后\n在非插入模式按 10000 后然后点 dd 。\n要嫌笨的话就在非插入模式下\n输入:.,\\$d 一回车就全没了\n\n#### 移动光标\n\n-   移动光标到文件头部 gg\n-   移动光标到文件尾部 shift + g\n-   移动光标到指定行 :行数\n-   移动光标到行首shift + 6\n-   移动光标到行尾shift + 4\n\n#### 在底线命令模式中，基本的命令有\n\n-   :q 不保存,直接退出\n-   :q! 不保存，并强制退出\n-   :e! 放弃所有修改，从上次保存文件开始再编辑\n-   :w 保存文件,但不退出\n-   :w! 强制保存，不退出\n-   :wq 或 x 保存，并退出\n-   :wq! 强制保存，并退出\n-   :按 ESC 键可随时退出底线命令模式。\n\n-   在命令模式下，输入/你要查找的字符\n\n按下回车，可以看到 vim 把光标移动到该字符处\n\n再按 n（小写）查看下一个匹配\n\n按 N(大写）查看上一个匹配\n\n-   从结尾处搜索\n\n？要搜索的字符串或字符\n\n#### 多窗口：\n\n-   vim -o file1 file2 file3（横向分隔）\n-   vim -O file1 file2 file3（纵向分隔）\n-   已打开 file1，则:sp file2(水平分隔)\n-   已打开 file1，则:vsp file2(垂直分隔)\n\n如果 finename 不存在，则会新建该文件并打开。\n\n#### 窗口切换\n\nctrl + w w\n即按住 ctrl 键，再按两下 w 键。\n\n或者 ctrl + w <h|j|k|l>  \n即按住 ctrl 键，按一次 w 键，再按一次表示方向的 h 或 j 或 k 或 l，则光标会切换到当前窗口的 左｜下｜上｜右 侧的窗口\n\n#### 关闭：\n\n关闭光标所在的窗口  \n:q 或 :close\n\n关闭除光标所在的窗口之外的其他窗口  \n:only\n\n关闭所有窗口  \n:qa\n\n#### 撤销\n\nu 撤销上一步的操作\n\nCtrl+r 恢复上一步被撤销的操作\n\n#### 复制粘贴\n\n将光标移动到要复制的文本开始的地方，按 v 进入可视模式。\n\n将光标移动到要复制的文本的结束的地方，按 y 复制。 此时 vim 会自动将光标定位到选中文本的开始的地方，并退出可视模式。\n\n我移动光标到文本结束的地方，按 p 粘贴。\n\n更详细：\n\n复制的命令是 y，即 yank（提起） ，常用的命令如下：\n\n-   y      在使用 v 模式选定了某一块的时候，复制选定块到缓冲区用；\n-   yy    复制整行（nyy 或者 yny ，复制 n 行，n 为数字）；\n-   y^   复制当前到行头的内容；\n-   y\\$    复制当前到行尾的内容；\n-   yw   复制一个 word （nyw 或者 ynw，复制 n 个 word，n 为数字）；\n-   yG    复制至档尾（nyG 或者 ynG，复制到第 n 行，例如 1yG 或者 y1G，复制到档尾）\n\n剪切的命令是 d，即 delete，d 与 y 命令基本类似，所以两个命令用法一样，包括含有数字的用法.\n\n-   d 剪切选定块到缓冲区；\n-   dd 剪切整行\n-   d^ 剪切至行首\n-   d\\$ 剪切至行尾\n-   dw 剪切一个 word\n-   dG 剪切至档尾\n\n粘贴的命令式 p，即 put（放下）\n\n-   p   小写 p 代表贴至游标后（下），因为游标是在具体字符的位置上，所以实际是在该字符的后面\n-   P   大写 P 代表贴至游标前（上）\n-   整行的复制粘贴在游标的上（下）一行，非整行的复制则是粘贴在游标的前（后）\n\n#### 查找\n\n在 normal 模式下按下/即可进入查找模式，输入要查找的字符串并按下回车。 Vim 会跳转到第一个匹配。按下 n 查找下一个，按下 N 查找上一个\n\n### linux 命令\n\n#### 查看\n\n-   `less filename`(查看文件时跳到尾部 shift + g)\n\n-   `more filename`\n\n-   `cat filename`\n\n-   `tac filename`\n\n#### 上传\n\n`rz -y`(-y 是覆盖原文件)\n\n#### 下载\n\n-   下载一个文件: `sz filename`\n\n-   下载多个文件: `sz filename1 filename2`\n\n-   下载 dir 目录下的所有文件，不包含 dir 下的文件夹: `sz dir/*`\n\n#### 解压\n\n##### zip\n\n-   解压：`unzip FileName.zip`\n\n-   压缩：`zip -r FileName.zip name` 将文件夹或文件夹 name 压缩成一个 zip 包(-r 表示递归)\n\n##### rar\n\n-   解包：`unrar x FileName.rar`\n\n-   打包：`rar a FileName.rar name` 将文件夹或文件夹 name 打包成一个 rar 包\n\n##### tar.gz\n\n-   `tar -czvf jpg.tar.gz *.jpg` 把目录里所有 jpg 文件打包成 jpg.tar 后，并且将其用 gzip 压缩，生成一个 gzip 压缩过的包，命名为 jpg.tar.gz(-v 参数用显示压缩或者解压缩的过程)\n\n-   `tar -xzvf file.tar.gz` 解压 tar.gz\n\n#### 文件\n\n-   创建一个新的目录: `mkdir`\n\n-   删除空文件夹: `rmdir`\n\n-   强制删除非空文件: `rm -rf`(`-r` 就是向下递归，不管有多少级目录，一并删除, `-f` 就是直接强行删除，不作任何提示的意思)\n\n-   复制文件或目录: `cp [option] 来源档(source) 目标档(destination)`\n\n-   移动文件与目录，或修改文件与目录的名称: `mv [option] source destination`\n\n-   更改文件后缀名(可以批量),如把 js 文件改成 html 文件： `rename *.js *.html`\n\n-   `mv file1 file2` 把当前目录下的 file1 文件名改成 file2，如果该目录下有 file2，则覆盖以前的 file2 文件。\n\n-   `cp localFile.py new.py` 通过复制原文件来修改命名,localFile.py 修改为 new.py,原文件删除，则再输入命令:`rm localFile.py`\n\n#### 权限\n\n-   `chmod -R 777 /var/home/userid/cc` 设置文件夹权限所有人可读写\n\n### nginx\n\n-   `nginx -t` 检查配置文件是否正确\n\n-   `nginx -s reload` 重启 nginx\n\n### curl\n\n-   get请求:`curl http://127.0.0.1:8080/login?admin&passwd=12345678`\n\n-   post请求:\n\n```\ncurl -H \"Content-type: application/json\" -X POST -d '{\"userid\":\"13521232233\",\"telphone\":\"123456789\",\"username\":\"abc\"}' http://127.0.0.1:4010/users\n```\n","slug":"常用命令","published":1,"updated":"2020-05-21T06:40:22.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm63y001b8hsp2qrfv8s8","content":"<p>记录一些常用命令：</p>\n<a id=\"more\"></a>\n<h3 id=\"VIM\"><a href=\"#VIM\" class=\"headerlink\" title=\"VIM\"></a>VIM</h3><h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>删除光标所在行：dd<br>删除光标所在行以下 n 行（包括光标行）：ndd（如删除 10 行，则 10dd）</p>\n<p>光标移到第一行，然后<br>在非插入模式按 10000 后然后点 dd 。<br>要嫌笨的话就在非插入模式下<br>输入:.,\\$d 一回车就全没了</p>\n<h4 id=\"移动光标\"><a href=\"#移动光标\" class=\"headerlink\" title=\"移动光标\"></a>移动光标</h4><ul>\n<li>移动光标到文件头部 gg</li>\n<li>移动光标到文件尾部 shift + g</li>\n<li>移动光标到指定行 :行数</li>\n<li>移动光标到行首shift + 6</li>\n<li>移动光标到行尾shift + 4</li>\n</ul>\n<h4 id=\"在底线命令模式中，基本的命令有\"><a href=\"#在底线命令模式中，基本的命令有\" class=\"headerlink\" title=\"在底线命令模式中，基本的命令有\"></a>在底线命令模式中，基本的命令有</h4><ul>\n<li>:q 不保存,直接退出</li>\n<li>:q! 不保存，并强制退出</li>\n<li>:e! 放弃所有修改，从上次保存文件开始再编辑</li>\n<li>:w 保存文件,但不退出</li>\n<li>:w! 强制保存，不退出</li>\n<li>:wq 或 x 保存，并退出</li>\n<li>:wq! 强制保存，并退出</li>\n<li><p>:按 ESC 键可随时退出底线命令模式。</p>\n</li>\n<li><p>在命令模式下，输入/你要查找的字符</p>\n</li>\n</ul>\n<p>按下回车，可以看到 vim 把光标移动到该字符处</p>\n<p>再按 n（小写）查看下一个匹配</p>\n<p>按 N(大写）查看上一个匹配</p>\n<ul>\n<li>从结尾处搜索</li>\n</ul>\n<p>？要搜索的字符串或字符</p>\n<h4 id=\"多窗口：\"><a href=\"#多窗口：\" class=\"headerlink\" title=\"多窗口：\"></a>多窗口：</h4><ul>\n<li>vim -o file1 file2 file3（横向分隔）</li>\n<li>vim -O file1 file2 file3（纵向分隔）</li>\n<li>已打开 file1，则:sp file2(水平分隔)</li>\n<li>已打开 file1，则:vsp file2(垂直分隔)</li>\n</ul>\n<p>如果 finename 不存在，则会新建该文件并打开。</p>\n<h4 id=\"窗口切换\"><a href=\"#窗口切换\" class=\"headerlink\" title=\"窗口切换\"></a>窗口切换</h4><p>ctrl + w w<br>即按住 ctrl 键，再按两下 w 键。</p>\n<p>或者 ctrl + w &lt;h|j|k|l&gt;<br>即按住 ctrl 键，按一次 w 键，再按一次表示方向的 h 或 j 或 k 或 l，则光标会切换到当前窗口的 左｜下｜上｜右 侧的窗口</p>\n<h4 id=\"关闭：\"><a href=\"#关闭：\" class=\"headerlink\" title=\"关闭：\"></a>关闭：</h4><p>关闭光标所在的窗口<br>:q 或 :close</p>\n<p>关闭除光标所在的窗口之外的其他窗口<br>:only</p>\n<p>关闭所有窗口<br>:qa</p>\n<h4 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h4><p>u 撤销上一步的操作</p>\n<p>Ctrl+r 恢复上一步被撤销的操作</p>\n<h4 id=\"复制粘贴\"><a href=\"#复制粘贴\" class=\"headerlink\" title=\"复制粘贴\"></a>复制粘贴</h4><p>将光标移动到要复制的文本开始的地方，按 v 进入可视模式。</p>\n<p>将光标移动到要复制的文本的结束的地方，按 y 复制。 此时 vim 会自动将光标定位到选中文本的开始的地方，并退出可视模式。</p>\n<p>我移动光标到文本结束的地方，按 p 粘贴。</p>\n<p>更详细：</p>\n<p>复制的命令是 y，即 yank（提起） ，常用的命令如下：</p>\n<ul>\n<li>y      在使用 v 模式选定了某一块的时候，复制选定块到缓冲区用；</li>\n<li>yy    复制整行（nyy 或者 yny ，复制 n 行，n 为数字）；</li>\n<li>y^   复制当前到行头的内容；</li>\n<li>y\\$    复制当前到行尾的内容；</li>\n<li>yw   复制一个 word （nyw 或者 ynw，复制 n 个 word，n 为数字）；</li>\n<li>yG    复制至档尾（nyG 或者 ynG，复制到第 n 行，例如 1yG 或者 y1G，复制到档尾）</li>\n</ul>\n<p>剪切的命令是 d，即 delete，d 与 y 命令基本类似，所以两个命令用法一样，包括含有数字的用法.</p>\n<ul>\n<li>d 剪切选定块到缓冲区；</li>\n<li>dd 剪切整行</li>\n<li>d^ 剪切至行首</li>\n<li>d\\$ 剪切至行尾</li>\n<li>dw 剪切一个 word</li>\n<li>dG 剪切至档尾</li>\n</ul>\n<p>粘贴的命令式 p，即 put（放下）</p>\n<ul>\n<li>p   小写 p 代表贴至游标后（下），因为游标是在具体字符的位置上，所以实际是在该字符的后面</li>\n<li>P   大写 P 代表贴至游标前（上）</li>\n<li>整行的复制粘贴在游标的上（下）一行，非整行的复制则是粘贴在游标的前（后）</li>\n</ul>\n<h4 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h4><p>在 normal 模式下按下/即可进入查找模式，输入要查找的字符串并按下回车。 Vim 会跳转到第一个匹配。按下 n 查找下一个，按下 N 查找上一个</p>\n<h3 id=\"linux-命令\"><a href=\"#linux-命令\" class=\"headerlink\" title=\"linux 命令\"></a>linux 命令</h3><h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><ul>\n<li><p><code>less filename</code>(查看文件时跳到尾部 shift + g)</p>\n</li>\n<li><p><code>more filename</code></p>\n</li>\n<li><p><code>cat filename</code></p>\n</li>\n<li><p><code>tac filename</code></p>\n</li>\n</ul>\n<h4 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h4><p><code>rz -y</code>(-y 是覆盖原文件)</p>\n<h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><ul>\n<li><p>下载一个文件: <code>sz filename</code></p>\n</li>\n<li><p>下载多个文件: <code>sz filename1 filename2</code></p>\n</li>\n<li><p>下载 dir 目录下的所有文件，不包含 dir 下的文件夹: <code>sz dir/*</code></p>\n</li>\n</ul>\n<h4 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h4><h5 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h5><ul>\n<li><p>解压：<code>unzip FileName.zip</code></p>\n</li>\n<li><p>压缩：<code>zip -r FileName.zip name</code> 将文件夹或文件夹 name 压缩成一个 zip 包(-r 表示递归)</p>\n</li>\n</ul>\n<h5 id=\"rar\"><a href=\"#rar\" class=\"headerlink\" title=\"rar\"></a>rar</h5><ul>\n<li><p>解包：<code>unrar x FileName.rar</code></p>\n</li>\n<li><p>打包：<code>rar a FileName.rar name</code> 将文件夹或文件夹 name 打包成一个 rar 包</p>\n</li>\n</ul>\n<h5 id=\"tar-gz\"><a href=\"#tar-gz\" class=\"headerlink\" title=\"tar.gz\"></a>tar.gz</h5><ul>\n<li><p><code>tar -czvf jpg.tar.gz *.jpg</code> 把目录里所有 jpg 文件打包成 jpg.tar 后，并且将其用 gzip 压缩，生成一个 gzip 压缩过的包，命名为 jpg.tar.gz(-v 参数用显示压缩或者解压缩的过程)</p>\n</li>\n<li><p><code>tar -xzvf file.tar.gz</code> 解压 tar.gz</p>\n</li>\n</ul>\n<h4 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h4><ul>\n<li><p>创建一个新的目录: <code>mkdir</code></p>\n</li>\n<li><p>删除空文件夹: <code>rmdir</code></p>\n</li>\n<li><p>强制删除非空文件: <code>rm -rf</code>(<code>-r</code> 就是向下递归，不管有多少级目录，一并删除, <code>-f</code> 就是直接强行删除，不作任何提示的意思)</p>\n</li>\n<li><p>复制文件或目录: <code>cp [option] 来源档(source) 目标档(destination)</code></p>\n</li>\n<li><p>移动文件与目录，或修改文件与目录的名称: <code>mv [option] source destination</code></p>\n</li>\n<li><p>更改文件后缀名(可以批量),如把 js 文件改成 html 文件： <code>rename *.js *.html</code></p>\n</li>\n<li><p><code>mv file1 file2</code> 把当前目录下的 file1 文件名改成 file2，如果该目录下有 file2，则覆盖以前的 file2 文件。</p>\n</li>\n<li><p><code>cp localFile.py new.py</code> 通过复制原文件来修改命名,localFile.py 修改为 new.py,原文件删除，则再输入命令:<code>rm localFile.py</code></p>\n</li>\n</ul>\n<h4 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h4><ul>\n<li><code>chmod -R 777 /var/home/userid/cc</code> 设置文件夹权限所有人可读写</li>\n</ul>\n<h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><ul>\n<li><p><code>nginx -t</code> 检查配置文件是否正确</p>\n</li>\n<li><p><code>nginx -s reload</code> 重启 nginx</p>\n</li>\n</ul>\n<h3 id=\"curl\"><a href=\"#curl\" class=\"headerlink\" title=\"curl\"></a>curl</h3><ul>\n<li><p>get请求:<code>curl http://127.0.0.1:8080/login?admin&amp;passwd=12345678</code></p>\n</li>\n<li><p>post请求:</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;Content-type: application/json&quot; -X POST -d &apos;&#123;&quot;userid&quot;:&quot;13521232233&quot;,&quot;telphone&quot;:&quot;123456789&quot;,&quot;username&quot;:&quot;abc&quot;&#125;&apos; http://127.0.0.1:4010/users</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>记录一些常用命令：</p>","more":"<h3 id=\"VIM\"><a href=\"#VIM\" class=\"headerlink\" title=\"VIM\"></a>VIM</h3><h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>删除光标所在行：dd<br>删除光标所在行以下 n 行（包括光标行）：ndd（如删除 10 行，则 10dd）</p>\n<p>光标移到第一行，然后<br>在非插入模式按 10000 后然后点 dd 。<br>要嫌笨的话就在非插入模式下<br>输入:.,\\$d 一回车就全没了</p>\n<h4 id=\"移动光标\"><a href=\"#移动光标\" class=\"headerlink\" title=\"移动光标\"></a>移动光标</h4><ul>\n<li>移动光标到文件头部 gg</li>\n<li>移动光标到文件尾部 shift + g</li>\n<li>移动光标到指定行 :行数</li>\n<li>移动光标到行首shift + 6</li>\n<li>移动光标到行尾shift + 4</li>\n</ul>\n<h4 id=\"在底线命令模式中，基本的命令有\"><a href=\"#在底线命令模式中，基本的命令有\" class=\"headerlink\" title=\"在底线命令模式中，基本的命令有\"></a>在底线命令模式中，基本的命令有</h4><ul>\n<li>:q 不保存,直接退出</li>\n<li>:q! 不保存，并强制退出</li>\n<li>:e! 放弃所有修改，从上次保存文件开始再编辑</li>\n<li>:w 保存文件,但不退出</li>\n<li>:w! 强制保存，不退出</li>\n<li>:wq 或 x 保存，并退出</li>\n<li>:wq! 强制保存，并退出</li>\n<li><p>:按 ESC 键可随时退出底线命令模式。</p>\n</li>\n<li><p>在命令模式下，输入/你要查找的字符</p>\n</li>\n</ul>\n<p>按下回车，可以看到 vim 把光标移动到该字符处</p>\n<p>再按 n（小写）查看下一个匹配</p>\n<p>按 N(大写）查看上一个匹配</p>\n<ul>\n<li>从结尾处搜索</li>\n</ul>\n<p>？要搜索的字符串或字符</p>\n<h4 id=\"多窗口：\"><a href=\"#多窗口：\" class=\"headerlink\" title=\"多窗口：\"></a>多窗口：</h4><ul>\n<li>vim -o file1 file2 file3（横向分隔）</li>\n<li>vim -O file1 file2 file3（纵向分隔）</li>\n<li>已打开 file1，则:sp file2(水平分隔)</li>\n<li>已打开 file1，则:vsp file2(垂直分隔)</li>\n</ul>\n<p>如果 finename 不存在，则会新建该文件并打开。</p>\n<h4 id=\"窗口切换\"><a href=\"#窗口切换\" class=\"headerlink\" title=\"窗口切换\"></a>窗口切换</h4><p>ctrl + w w<br>即按住 ctrl 键，再按两下 w 键。</p>\n<p>或者 ctrl + w &lt;h|j|k|l&gt;<br>即按住 ctrl 键，按一次 w 键，再按一次表示方向的 h 或 j 或 k 或 l，则光标会切换到当前窗口的 左｜下｜上｜右 侧的窗口</p>\n<h4 id=\"关闭：\"><a href=\"#关闭：\" class=\"headerlink\" title=\"关闭：\"></a>关闭：</h4><p>关闭光标所在的窗口<br>:q 或 :close</p>\n<p>关闭除光标所在的窗口之外的其他窗口<br>:only</p>\n<p>关闭所有窗口<br>:qa</p>\n<h4 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h4><p>u 撤销上一步的操作</p>\n<p>Ctrl+r 恢复上一步被撤销的操作</p>\n<h4 id=\"复制粘贴\"><a href=\"#复制粘贴\" class=\"headerlink\" title=\"复制粘贴\"></a>复制粘贴</h4><p>将光标移动到要复制的文本开始的地方，按 v 进入可视模式。</p>\n<p>将光标移动到要复制的文本的结束的地方，按 y 复制。 此时 vim 会自动将光标定位到选中文本的开始的地方，并退出可视模式。</p>\n<p>我移动光标到文本结束的地方，按 p 粘贴。</p>\n<p>更详细：</p>\n<p>复制的命令是 y，即 yank（提起） ，常用的命令如下：</p>\n<ul>\n<li>y      在使用 v 模式选定了某一块的时候，复制选定块到缓冲区用；</li>\n<li>yy    复制整行（nyy 或者 yny ，复制 n 行，n 为数字）；</li>\n<li>y^   复制当前到行头的内容；</li>\n<li>y\\$    复制当前到行尾的内容；</li>\n<li>yw   复制一个 word （nyw 或者 ynw，复制 n 个 word，n 为数字）；</li>\n<li>yG    复制至档尾（nyG 或者 ynG，复制到第 n 行，例如 1yG 或者 y1G，复制到档尾）</li>\n</ul>\n<p>剪切的命令是 d，即 delete，d 与 y 命令基本类似，所以两个命令用法一样，包括含有数字的用法.</p>\n<ul>\n<li>d 剪切选定块到缓冲区；</li>\n<li>dd 剪切整行</li>\n<li>d^ 剪切至行首</li>\n<li>d\\$ 剪切至行尾</li>\n<li>dw 剪切一个 word</li>\n<li>dG 剪切至档尾</li>\n</ul>\n<p>粘贴的命令式 p，即 put（放下）</p>\n<ul>\n<li>p   小写 p 代表贴至游标后（下），因为游标是在具体字符的位置上，所以实际是在该字符的后面</li>\n<li>P   大写 P 代表贴至游标前（上）</li>\n<li>整行的复制粘贴在游标的上（下）一行，非整行的复制则是粘贴在游标的前（后）</li>\n</ul>\n<h4 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h4><p>在 normal 模式下按下/即可进入查找模式，输入要查找的字符串并按下回车。 Vim 会跳转到第一个匹配。按下 n 查找下一个，按下 N 查找上一个</p>\n<h3 id=\"linux-命令\"><a href=\"#linux-命令\" class=\"headerlink\" title=\"linux 命令\"></a>linux 命令</h3><h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><ul>\n<li><p><code>less filename</code>(查看文件时跳到尾部 shift + g)</p>\n</li>\n<li><p><code>more filename</code></p>\n</li>\n<li><p><code>cat filename</code></p>\n</li>\n<li><p><code>tac filename</code></p>\n</li>\n</ul>\n<h4 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h4><p><code>rz -y</code>(-y 是覆盖原文件)</p>\n<h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><ul>\n<li><p>下载一个文件: <code>sz filename</code></p>\n</li>\n<li><p>下载多个文件: <code>sz filename1 filename2</code></p>\n</li>\n<li><p>下载 dir 目录下的所有文件，不包含 dir 下的文件夹: <code>sz dir/*</code></p>\n</li>\n</ul>\n<h4 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h4><h5 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h5><ul>\n<li><p>解压：<code>unzip FileName.zip</code></p>\n</li>\n<li><p>压缩：<code>zip -r FileName.zip name</code> 将文件夹或文件夹 name 压缩成一个 zip 包(-r 表示递归)</p>\n</li>\n</ul>\n<h5 id=\"rar\"><a href=\"#rar\" class=\"headerlink\" title=\"rar\"></a>rar</h5><ul>\n<li><p>解包：<code>unrar x FileName.rar</code></p>\n</li>\n<li><p>打包：<code>rar a FileName.rar name</code> 将文件夹或文件夹 name 打包成一个 rar 包</p>\n</li>\n</ul>\n<h5 id=\"tar-gz\"><a href=\"#tar-gz\" class=\"headerlink\" title=\"tar.gz\"></a>tar.gz</h5><ul>\n<li><p><code>tar -czvf jpg.tar.gz *.jpg</code> 把目录里所有 jpg 文件打包成 jpg.tar 后，并且将其用 gzip 压缩，生成一个 gzip 压缩过的包，命名为 jpg.tar.gz(-v 参数用显示压缩或者解压缩的过程)</p>\n</li>\n<li><p><code>tar -xzvf file.tar.gz</code> 解压 tar.gz</p>\n</li>\n</ul>\n<h4 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h4><ul>\n<li><p>创建一个新的目录: <code>mkdir</code></p>\n</li>\n<li><p>删除空文件夹: <code>rmdir</code></p>\n</li>\n<li><p>强制删除非空文件: <code>rm -rf</code>(<code>-r</code> 就是向下递归，不管有多少级目录，一并删除, <code>-f</code> 就是直接强行删除，不作任何提示的意思)</p>\n</li>\n<li><p>复制文件或目录: <code>cp [option] 来源档(source) 目标档(destination)</code></p>\n</li>\n<li><p>移动文件与目录，或修改文件与目录的名称: <code>mv [option] source destination</code></p>\n</li>\n<li><p>更改文件后缀名(可以批量),如把 js 文件改成 html 文件： <code>rename *.js *.html</code></p>\n</li>\n<li><p><code>mv file1 file2</code> 把当前目录下的 file1 文件名改成 file2，如果该目录下有 file2，则覆盖以前的 file2 文件。</p>\n</li>\n<li><p><code>cp localFile.py new.py</code> 通过复制原文件来修改命名,localFile.py 修改为 new.py,原文件删除，则再输入命令:<code>rm localFile.py</code></p>\n</li>\n</ul>\n<h4 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h4><ul>\n<li><code>chmod -R 777 /var/home/userid/cc</code> 设置文件夹权限所有人可读写</li>\n</ul>\n<h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><ul>\n<li><p><code>nginx -t</code> 检查配置文件是否正确</p>\n</li>\n<li><p><code>nginx -s reload</code> 重启 nginx</p>\n</li>\n</ul>\n<h3 id=\"curl\"><a href=\"#curl\" class=\"headerlink\" title=\"curl\"></a>curl</h3><ul>\n<li><p>get请求:<code>curl http://127.0.0.1:8080/login?admin&amp;passwd=12345678</code></p>\n</li>\n<li><p>post请求:</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;Content-type: application/json&quot; -X POST -d &apos;&#123;&quot;userid&quot;:&quot;13521232233&quot;,&quot;telphone&quot;:&quot;123456789&quot;,&quot;username&quot;:&quot;abc&quot;&#125;&apos; http://127.0.0.1:4010/users</span><br></pre></td></tr></table></figure>"},{"title":"拷贝","date":"2018-06-11T12:07:50.000Z","_content":"\n拷贝有两种：浅拷贝和深拷贝。\n\n记录 js 两种拷贝的简单方法。\n\n<!--more-->\n\n### 浅拷贝\n\n```javascript\nlet obj1 = { a: 0, b: { c: 0 } };\nlet obj2 = Object.assign({}, obj1);\nconsole.log(JSON.stringify(obj2)); // { a: 0, b: { c: 0}}\n\nobj1.a = 1;\nconsole.log(JSON.stringify(obj1)); // { a: 1, b: { c: 0}}\nconsole.log(JSON.stringify(obj2)); // { a: 0, b: { c: 0}}\n\nobj2.a = 2;\nconsole.log(JSON.stringify(obj1)); // { a: 1, b: { c: 0}}\nconsole.log(JSON.stringify(obj2)); // { a: 2, b: { c: 0}}\n\nobj2.b.c = 3;\nconsole.log(JSON.stringify(obj1)); // { a: 1, b: { c: 3}}\nconsole.log(JSON.stringify(obj2)); // { a: 2, b: { c: 3}}\n```\n\n### 深拷贝\n\n```javascript\nobj1 = { a: 0, b: { c: 0 } };\nlet obj3 = JSON.parse(JSON.stringify(obj1));\nobj1.a = 4;\nobj1.b.c = 4;\nconsole.log(JSON.stringify(obj3)); // { a: 0, b: { c: 0}}\n\n\nfunction deepClone(obj) {\n    var o;\n    if (typeof obj === \"object\") {\n        if (obj === null) {\n            o = null;\n        } else {\n            if (obj instanceof Array) {\n                o = [];\n                for (var i = 0, len = obj.length; i < len; i++) {\n                    o.push(deepClone(obj[i]));\n                }\n            } else {\n                o = {};\n                for (var j in obj) {\n                    if (obj.hasOwnProperty(j)) o[j] = deepClone(obj[j]);\n                }\n            }\n        }\n    } else {\n        o = obj;\n    }\n    return o;\n}\n```\n","source":"_posts/拷贝.md","raw":"---\ntitle: 拷贝\ndate: 2018-06-11 20:07:50\ncategories: 技术\ntags: 前端\n---\n\n拷贝有两种：浅拷贝和深拷贝。\n\n记录 js 两种拷贝的简单方法。\n\n<!--more-->\n\n### 浅拷贝\n\n```javascript\nlet obj1 = { a: 0, b: { c: 0 } };\nlet obj2 = Object.assign({}, obj1);\nconsole.log(JSON.stringify(obj2)); // { a: 0, b: { c: 0}}\n\nobj1.a = 1;\nconsole.log(JSON.stringify(obj1)); // { a: 1, b: { c: 0}}\nconsole.log(JSON.stringify(obj2)); // { a: 0, b: { c: 0}}\n\nobj2.a = 2;\nconsole.log(JSON.stringify(obj1)); // { a: 1, b: { c: 0}}\nconsole.log(JSON.stringify(obj2)); // { a: 2, b: { c: 0}}\n\nobj2.b.c = 3;\nconsole.log(JSON.stringify(obj1)); // { a: 1, b: { c: 3}}\nconsole.log(JSON.stringify(obj2)); // { a: 2, b: { c: 3}}\n```\n\n### 深拷贝\n\n```javascript\nobj1 = { a: 0, b: { c: 0 } };\nlet obj3 = JSON.parse(JSON.stringify(obj1));\nobj1.a = 4;\nobj1.b.c = 4;\nconsole.log(JSON.stringify(obj3)); // { a: 0, b: { c: 0}}\n\n\nfunction deepClone(obj) {\n    var o;\n    if (typeof obj === \"object\") {\n        if (obj === null) {\n            o = null;\n        } else {\n            if (obj instanceof Array) {\n                o = [];\n                for (var i = 0, len = obj.length; i < len; i++) {\n                    o.push(deepClone(obj[i]));\n                }\n            } else {\n                o = {};\n                for (var j in obj) {\n                    if (obj.hasOwnProperty(j)) o[j] = deepClone(obj[j]);\n                }\n            }\n        }\n    } else {\n        o = obj;\n    }\n    return o;\n}\n```\n","slug":"拷贝","published":1,"updated":"2020-05-11T09:15:19.165Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm641001e8hspgn5p3pkb","content":"<p>拷贝有两种：浅拷贝和深拷贝。</p>\n<p>记录 js 两种拷贝的简单方法。</p>\n<a id=\"more\"></a>\n<h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">0</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">0</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj2)); <span class=\"comment\">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj1.a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj1)); <span class=\"comment\">// &#123; a: 1, b: &#123; c: 0&#125;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj2)); <span class=\"comment\">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj2.a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj1)); <span class=\"comment\">// &#123; a: 1, b: &#123; c: 0&#125;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj2)); <span class=\"comment\">// &#123; a: 2, b: &#123; c: 0&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj2.b.c = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj1)); <span class=\"comment\">// &#123; a: 1, b: &#123; c: 3&#125;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj2)); <span class=\"comment\">// &#123; a: 2, b: &#123; c: 3&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">0</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">0</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj3 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj1));</span><br><span class=\"line\">obj1.a = <span class=\"number\">4</span>;</span><br><span class=\"line\">obj1.b.c = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj3)); <span class=\"comment\">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> o;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            o = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">                o = [];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = obj.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                    o.push(deepClone(obj[i]));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                o = &#123;&#125;;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (obj.hasOwnProperty(j)) o[j] = deepClone(obj[j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        o = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>拷贝有两种：浅拷贝和深拷贝。</p>\n<p>记录 js 两种拷贝的简单方法。</p>","more":"<h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">0</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">0</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj2)); <span class=\"comment\">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj1.a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj1)); <span class=\"comment\">// &#123; a: 1, b: &#123; c: 0&#125;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj2)); <span class=\"comment\">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj2.a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj1)); <span class=\"comment\">// &#123; a: 1, b: &#123; c: 0&#125;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj2)); <span class=\"comment\">// &#123; a: 2, b: &#123; c: 0&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj2.b.c = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj1)); <span class=\"comment\">// &#123; a: 1, b: &#123; c: 3&#125;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj2)); <span class=\"comment\">// &#123; a: 2, b: &#123; c: 3&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">0</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">0</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj3 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj1));</span><br><span class=\"line\">obj1.a = <span class=\"number\">4</span>;</span><br><span class=\"line\">obj1.b.c = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj3)); <span class=\"comment\">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> o;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            o = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">                o = [];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = obj.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                    o.push(deepClone(obj[i]));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                o = &#123;&#125;;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (obj.hasOwnProperty(j)) o[j] = deepClone(obj[j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        o = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"常用js","date":"2021-08-02T08:59:54.000Z","_content":"\n记录下常用 js\n\n<!--more-->\n\n### 常用 js\n\n复制到剪贴板\n\n```js\nfunction copyToClipboard(text, cb) {\n    if (navigator && navigator.clipboard) {\n        navigator.clipboard\n            .writeText(text)\n            .then(() => {\n                cb && cb();\n            })\n            .catch(err => {\n                console.error(\"Could not copy text: \", err);\n            });\n    } else {\n        const dummyElement = document.createElement(\"span\");\n        dummyElement.style.whiteSpace = \"pre\";\n        dummyElement.textContent = text;\n        document.body.appendChild(dummyElement);\n\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        const range = document.createRange();\n        range.selectNode(dummyElement);\n        selection.addRange(range);\n\n        const isSuccess = document.execCommand(\"copy\");\n\n        if (isSuccess) {\n            cb && cb();\n        }\n\n        selection.removeAllRanges();\n        document.body.removeChild(dummyElement);\n    }\n}\n```\n\n```js\n//if value > max, value = max, if value < min, value = min, otherwise value = value\nfunction validValue(value, max, min) {\n    return Math.min(Math.max(value, min), max);\n}\n\n// getClass\nfunction getClassName(parent, className) {\n    var obj = parent.getElementsByTagName(\"*\"); //获取 父级的所有子集\n    var pinS = []; //创建一个数组 用于收集子元素\n    for (var i = 0; i < obj.length; i++) {\n        //遍历子元素、判断类别、压入数组\n        if (obj[i].className == className) {\n            pinS.push(obj[i]);\n        }\n    }\n    return pinS;\n}\n\n// 将对象拼接成 key1=val1&key2=val2&key3=val3 的字符串形式\nfunction objParams(obj) {\n    var result = \"\";\n    var item;\n    for (item in obj) {\n        result += \"&\" + item + \"=\" + encodeURIComponent(obj[item]);\n    }\n\n    if (result) {\n        result = result.slice(1);\n    }\n\n    return result;\n}\n\n//把多维数组变扁平\nvar givenArr = [[1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14, [99]]]]], 10];\nfunction flatten(arr) {\n    while (arr.some(item => Array.isArray(item))) {\n        arr = [].concat(...arr);\n    }\n    return arr;\n}\n\nflatten(givenArr);\n\n// 数组去重合并\nfunction combine(){\n    let arr = [].concat.apply([], arguments);  //没有去重复的新数组\n    return Array.from(new Set(arr));\n}\n\nvar m = [1, 2, 2], n = [2,3,3];\nconsole.log(combine(m,n));\n\n/**\n * @param {Number} time 时间戳\n * @param {String} format 时间格式\n */\nexport function getFormatDate(\n  time = new Date().getTime(),\n  format = 'YY-MM-DD'\n) {\n  const date = new Date(time)\n\n  const year = date.getFullYear(),\n    month = date.getMonth() + 1,\n    day = date.getDate(),\n    hour = date.getHours(),\n    minute = date.getMinutes(),\n    second = date.getSeconds()\n\n  const preArr = Array.apply(null, Array(10)).map(function (elem, index) {\n    return '0' + index\n  })\n\n  const newTime = format\n    .replace(/YY/g, year)\n    .replace(/MM/g, preArr[month] || month)\n    .replace(/DD/g, preArr[day] || day)\n    .replace(/hh/g, preArr[hour] || hour)\n    .replace(/mm/g, preArr[minute] || minute)\n    .replace(/ss/g, preArr[second] || second)\n\n  return newTime\n}\n\n\n/**\n * 时间段格式化（日时分秒）\n * @param remainTime 剩余时间\n */\nexport function remainTimeFormatDHMS(remainTime: number) {\n    const d = Math.floor(remainTime / 864e5);\n    const h = Math.floor((remainTime % 864e5) / 36e5);\n    const m = Math.floor((remainTime % 36e5) / 6e4);\n    const s = Math.floor(((remainTime % 36e5) % 6e4) / 1e3);\n    return { d, h, m, s };\n}\n\n// 取小数后两位，不四舍五入\nfunction getDecimal(n) {\n    return Math.floor(n * 100) / 100;\n}\n\n/**\n * 把数据保存为csv文件\n */\nfunction download(filename, text) {\n  var element = document.createElement(\"a\");\n  element.setAttribute(\"href\", \"data:text/csv;charset=utf-8,\" + encodeURIComponent(text));\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\n\n/**\n * 把canvas转化成图片图片下载下来\n */\nfunction canvasDownLoad(id) {\n  var canvas = document.getElementById(id) as HTMLCanvasElement;\n  var image = new Image();\n  image.src = canvas.toDataURL(\"image/png\");\n\n  var a = document.createElement(\"a\");\n  var event = new MouseEvent(\"click\");\n  a.download = \"下载图片\";\n  a.href = image.src;\n  a.dispatchEvent(event);\n}\n\nfunction getSearchParam(key, url) {\n  return (new RegExp(`[?&]${key}=([^&]+)`).exec(url) || [])[1];\n}\n\n/**\n * 获取元素到页面顶部的距离\n */\nfunction getElementTop(element: HTMLElement): number {\n  let actualTop = element.offsetTop;\n  let current: any = element.offsetParent;\n  while (current !== null) {\n    actualTop += current.offsetTop;\n    current = current.offsetParent;\n  }\n  return actualTop;\n}\n```\n\n### 常用工具\n\nHSTS 是 HTTP 严格传输安全（HTTP Strict Transport Security） 的缩写。 这是一种网站用来声明他们只能使用安全连接（HTTPS）访问的方法。 如果一个网站声明了 HSTS 策略，浏览器必须拒绝所有的 HTTP 连接并阻止用户接受不安全的 SSL 证书。 目前大多数主流浏览器都支持 HSTS。\n\n清除某个域名的 HSTS：\n\n-   谷歌： chrome://net-internals/#hsts，在 Delete domain security policies 下的文本框中输入要删除的域名然后点击删除。\n-   Safari：偏好设置->隐私->管理网站数据->删除对应域名\n","source":"_posts/常用js.md","raw":"---\ntitle: 常用js\ndate: 2021-08-02 16:59:54\ncategories: 技术\ntags: [前端]\n---\n\n记录下常用 js\n\n<!--more-->\n\n### 常用 js\n\n复制到剪贴板\n\n```js\nfunction copyToClipboard(text, cb) {\n    if (navigator && navigator.clipboard) {\n        navigator.clipboard\n            .writeText(text)\n            .then(() => {\n                cb && cb();\n            })\n            .catch(err => {\n                console.error(\"Could not copy text: \", err);\n            });\n    } else {\n        const dummyElement = document.createElement(\"span\");\n        dummyElement.style.whiteSpace = \"pre\";\n        dummyElement.textContent = text;\n        document.body.appendChild(dummyElement);\n\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        const range = document.createRange();\n        range.selectNode(dummyElement);\n        selection.addRange(range);\n\n        const isSuccess = document.execCommand(\"copy\");\n\n        if (isSuccess) {\n            cb && cb();\n        }\n\n        selection.removeAllRanges();\n        document.body.removeChild(dummyElement);\n    }\n}\n```\n\n```js\n//if value > max, value = max, if value < min, value = min, otherwise value = value\nfunction validValue(value, max, min) {\n    return Math.min(Math.max(value, min), max);\n}\n\n// getClass\nfunction getClassName(parent, className) {\n    var obj = parent.getElementsByTagName(\"*\"); //获取 父级的所有子集\n    var pinS = []; //创建一个数组 用于收集子元素\n    for (var i = 0; i < obj.length; i++) {\n        //遍历子元素、判断类别、压入数组\n        if (obj[i].className == className) {\n            pinS.push(obj[i]);\n        }\n    }\n    return pinS;\n}\n\n// 将对象拼接成 key1=val1&key2=val2&key3=val3 的字符串形式\nfunction objParams(obj) {\n    var result = \"\";\n    var item;\n    for (item in obj) {\n        result += \"&\" + item + \"=\" + encodeURIComponent(obj[item]);\n    }\n\n    if (result) {\n        result = result.slice(1);\n    }\n\n    return result;\n}\n\n//把多维数组变扁平\nvar givenArr = [[1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14, [99]]]]], 10];\nfunction flatten(arr) {\n    while (arr.some(item => Array.isArray(item))) {\n        arr = [].concat(...arr);\n    }\n    return arr;\n}\n\nflatten(givenArr);\n\n// 数组去重合并\nfunction combine(){\n    let arr = [].concat.apply([], arguments);  //没有去重复的新数组\n    return Array.from(new Set(arr));\n}\n\nvar m = [1, 2, 2], n = [2,3,3];\nconsole.log(combine(m,n));\n\n/**\n * @param {Number} time 时间戳\n * @param {String} format 时间格式\n */\nexport function getFormatDate(\n  time = new Date().getTime(),\n  format = 'YY-MM-DD'\n) {\n  const date = new Date(time)\n\n  const year = date.getFullYear(),\n    month = date.getMonth() + 1,\n    day = date.getDate(),\n    hour = date.getHours(),\n    minute = date.getMinutes(),\n    second = date.getSeconds()\n\n  const preArr = Array.apply(null, Array(10)).map(function (elem, index) {\n    return '0' + index\n  })\n\n  const newTime = format\n    .replace(/YY/g, year)\n    .replace(/MM/g, preArr[month] || month)\n    .replace(/DD/g, preArr[day] || day)\n    .replace(/hh/g, preArr[hour] || hour)\n    .replace(/mm/g, preArr[minute] || minute)\n    .replace(/ss/g, preArr[second] || second)\n\n  return newTime\n}\n\n\n/**\n * 时间段格式化（日时分秒）\n * @param remainTime 剩余时间\n */\nexport function remainTimeFormatDHMS(remainTime: number) {\n    const d = Math.floor(remainTime / 864e5);\n    const h = Math.floor((remainTime % 864e5) / 36e5);\n    const m = Math.floor((remainTime % 36e5) / 6e4);\n    const s = Math.floor(((remainTime % 36e5) % 6e4) / 1e3);\n    return { d, h, m, s };\n}\n\n// 取小数后两位，不四舍五入\nfunction getDecimal(n) {\n    return Math.floor(n * 100) / 100;\n}\n\n/**\n * 把数据保存为csv文件\n */\nfunction download(filename, text) {\n  var element = document.createElement(\"a\");\n  element.setAttribute(\"href\", \"data:text/csv;charset=utf-8,\" + encodeURIComponent(text));\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\n\n/**\n * 把canvas转化成图片图片下载下来\n */\nfunction canvasDownLoad(id) {\n  var canvas = document.getElementById(id) as HTMLCanvasElement;\n  var image = new Image();\n  image.src = canvas.toDataURL(\"image/png\");\n\n  var a = document.createElement(\"a\");\n  var event = new MouseEvent(\"click\");\n  a.download = \"下载图片\";\n  a.href = image.src;\n  a.dispatchEvent(event);\n}\n\nfunction getSearchParam(key, url) {\n  return (new RegExp(`[?&]${key}=([^&]+)`).exec(url) || [])[1];\n}\n\n/**\n * 获取元素到页面顶部的距离\n */\nfunction getElementTop(element: HTMLElement): number {\n  let actualTop = element.offsetTop;\n  let current: any = element.offsetParent;\n  while (current !== null) {\n    actualTop += current.offsetTop;\n    current = current.offsetParent;\n  }\n  return actualTop;\n}\n```\n\n### 常用工具\n\nHSTS 是 HTTP 严格传输安全（HTTP Strict Transport Security） 的缩写。 这是一种网站用来声明他们只能使用安全连接（HTTPS）访问的方法。 如果一个网站声明了 HSTS 策略，浏览器必须拒绝所有的 HTTP 连接并阻止用户接受不安全的 SSL 证书。 目前大多数主流浏览器都支持 HSTS。\n\n清除某个域名的 HSTS：\n\n-   谷歌： chrome://net-internals/#hsts，在 Delete domain security policies 下的文本框中输入要删除的域名然后点击删除。\n-   Safari：偏好设置->隐私->管理网站数据->删除对应域名\n","slug":"常用js","published":1,"updated":"2022-02-06T11:03:01.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm644001h8hspjuq3ysb1","content":"<p>记录下常用 js</p>\n<a id=\"more\"></a>\n<h3 id=\"常用-js\"><a href=\"#常用-js\" class=\"headerlink\" title=\"常用 js\"></a>常用 js</h3><p>复制到剪贴板</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyToClipboard</span>(<span class=\"params\">text, cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (navigator &amp;&amp; navigator.clipboard) &#123;</span><br><span class=\"line\">        navigator.clipboard</span><br><span class=\"line\">            .writeText(text)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                cb &amp;&amp; cb();</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(<span class=\"string\">\"Could not copy text: \"</span>, err);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> dummyElement = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"span\"</span>);</span><br><span class=\"line\">        dummyElement.style.whiteSpace = <span class=\"string\">\"pre\"</span>;</span><br><span class=\"line\">        dummyElement.textContent = text;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(dummyElement);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> selection = <span class=\"built_in\">window</span>.getSelection();</span><br><span class=\"line\">        selection.removeAllRanges();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> range = <span class=\"built_in\">document</span>.createRange();</span><br><span class=\"line\">        range.selectNode(dummyElement);</span><br><span class=\"line\">        selection.addRange(range);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> isSuccess = <span class=\"built_in\">document</span>.execCommand(<span class=\"string\">\"copy\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSuccess) &#123;</span><br><span class=\"line\">            cb &amp;&amp; cb();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        selection.removeAllRanges();</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeChild(dummyElement);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//if value &gt; max, value = max, if value &lt; min, value = min, otherwise value = value</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validValue</span>(<span class=\"params\">value, max, min</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(<span class=\"built_in\">Math</span>.max(value, min), max);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getClass</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getClassName</span>(<span class=\"params\">parent, className</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = parent.getElementsByTagName(<span class=\"string\">\"*\"</span>); <span class=\"comment\">//获取 父级的所有子集</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pinS = []; <span class=\"comment\">//创建一个数组 用于收集子元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; obj.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历子元素、判断类别、压入数组</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj[i].className == className) &#123;</span><br><span class=\"line\">            pinS.push(obj[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pinS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将对象拼接成 key1=val1&amp;key2=val2&amp;key3=val3 的字符串形式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">objParams</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        result += <span class=\"string\">\"&amp;\"</span> + item + <span class=\"string\">\"=\"</span> + <span class=\"built_in\">encodeURIComponent</span>(obj[item]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">        result = result.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把多维数组变扁平</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> givenArr = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>], [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, [<span class=\"number\">11</span>, <span class=\"number\">12</span>, [<span class=\"number\">12</span>, <span class=\"number\">13</span>, [<span class=\"number\">14</span>, [<span class=\"number\">99</span>]]]]], <span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (arr.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">Array</span>.isArray(item))) &#123;</span><br><span class=\"line\">        arr = [].concat(...arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">flatten(givenArr);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组去重合并</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combine</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [].concat.apply([], <span class=\"built_in\">arguments</span>);  <span class=\"comment\">//没有去重复的新数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>], n = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(combine(m,n));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Number&#125; time 时间戳</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;String&#125; format 时间格式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFormatDate</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  time = new Date(</span>).<span class=\"title\">getTime</span>(<span class=\"params\"></span>),</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">format</span> = '<span class=\"title\">YY</span>-<span class=\"title\">MM</span>-<span class=\"title\">DD</span>'</span></span><br><span class=\"line\"><span class=\"function\">) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> year = date.getFullYear(),</span><br><span class=\"line\">    month = date.getMonth() + <span class=\"number\">1</span>,</span><br><span class=\"line\">    day = date.getDate(),</span><br><span class=\"line\">    hour = date.getHours(),</span><br><span class=\"line\">    minute = date.getMinutes(),</span><br><span class=\"line\">    second = date.getSeconds()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> preArr = <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>)).map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elem, index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'0'</span> + index</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newTime = format</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/YY/g</span>, year)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/MM/g</span>, preArr[month] || month)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/DD/g</span>, preArr[day] || day)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/hh/g</span>, preArr[hour] || hour)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/mm/g</span>, preArr[minute] || minute)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/ss/g</span>, preArr[second] || second)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newTime</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间段格式化（日时分秒）</span></span><br><span class=\"line\"><span class=\"comment\"> * @param remainTime 剩余时间</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remainTimeFormatDHMS</span>(<span class=\"params\">remainTime: number</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> d = <span class=\"built_in\">Math</span>.floor(remainTime / <span class=\"number\">864e5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> h = <span class=\"built_in\">Math</span>.floor((remainTime % <span class=\"number\">864e5</span>) / <span class=\"number\">36e5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> m = <span class=\"built_in\">Math</span>.floor((remainTime % <span class=\"number\">36e5</span>) / <span class=\"number\">6e4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> s = <span class=\"built_in\">Math</span>.floor(((remainTime % <span class=\"number\">36e5</span>) % <span class=\"number\">6e4</span>) / <span class=\"number\">1e3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; d, h, m, s &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取小数后两位，不四舍五入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDecimal</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(n * <span class=\"number\">100</span>) / <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把数据保存为csv文件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">download</span>(<span class=\"params\">filename, text</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">  element.setAttribute(<span class=\"string\">\"href\"</span>, <span class=\"string\">\"data:text/csv;charset=utf-8,\"</span> + <span class=\"built_in\">encodeURIComponent</span>(text));</span><br><span class=\"line\">  element.setAttribute(<span class=\"string\">\"download\"</span>, filename);</span><br><span class=\"line\"></span><br><span class=\"line\">  element.style.display = <span class=\"string\">\"none\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(element);</span><br><span class=\"line\"></span><br><span class=\"line\">  element.click();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.removeChild(element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把canvas转化成图片图片下载下来</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canvasDownLoad</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(id) <span class=\"keyword\">as</span> HTMLCanvasElement;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">  image.src = canvas.toDataURL(<span class=\"string\">\"image/png\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> MouseEvent(<span class=\"string\">\"click\"</span>);</span><br><span class=\"line\">  a.download = <span class=\"string\">\"下载图片\"</span>;</span><br><span class=\"line\">  a.href = image.src;</span><br><span class=\"line\">  a.dispatchEvent(event);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSearchParam</span>(<span class=\"params\">key, url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">`[?&amp;]<span class=\"subst\">$&#123;key&#125;</span>=([^&amp;]+)`</span>).exec(url) || [])[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取元素到页面顶部的距离</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getElementTop</span>(<span class=\"params\">element: HTMLElement</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> actualTop = element.offsetTop;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> current: any = element.offsetParent;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    actualTop += current.offsetTop;</span><br><span class=\"line\">    current = current.offsetParent;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> actualTop;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用工具\"><a href=\"#常用工具\" class=\"headerlink\" title=\"常用工具\"></a>常用工具</h3><p>HSTS 是 HTTP 严格传输安全（HTTP Strict Transport Security） 的缩写。 这是一种网站用来声明他们只能使用安全连接（HTTPS）访问的方法。 如果一个网站声明了 HSTS 策略，浏览器必须拒绝所有的 HTTP 连接并阻止用户接受不安全的 SSL 证书。 目前大多数主流浏览器都支持 HSTS。</p>\n<p>清除某个域名的 HSTS：</p>\n<ul>\n<li>谷歌： chrome://net-internals/#hsts，在 Delete domain security policies 下的文本框中输入要删除的域名然后点击删除。</li>\n<li>Safari：偏好设置-&gt;隐私-&gt;管理网站数据-&gt;删除对应域名</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>记录下常用 js</p>","more":"<h3 id=\"常用-js\"><a href=\"#常用-js\" class=\"headerlink\" title=\"常用 js\"></a>常用 js</h3><p>复制到剪贴板</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyToClipboard</span>(<span class=\"params\">text, cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (navigator &amp;&amp; navigator.clipboard) &#123;</span><br><span class=\"line\">        navigator.clipboard</span><br><span class=\"line\">            .writeText(text)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                cb &amp;&amp; cb();</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(<span class=\"string\">\"Could not copy text: \"</span>, err);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> dummyElement = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"span\"</span>);</span><br><span class=\"line\">        dummyElement.style.whiteSpace = <span class=\"string\">\"pre\"</span>;</span><br><span class=\"line\">        dummyElement.textContent = text;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(dummyElement);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> selection = <span class=\"built_in\">window</span>.getSelection();</span><br><span class=\"line\">        selection.removeAllRanges();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> range = <span class=\"built_in\">document</span>.createRange();</span><br><span class=\"line\">        range.selectNode(dummyElement);</span><br><span class=\"line\">        selection.addRange(range);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> isSuccess = <span class=\"built_in\">document</span>.execCommand(<span class=\"string\">\"copy\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSuccess) &#123;</span><br><span class=\"line\">            cb &amp;&amp; cb();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        selection.removeAllRanges();</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeChild(dummyElement);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//if value &gt; max, value = max, if value &lt; min, value = min, otherwise value = value</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validValue</span>(<span class=\"params\">value, max, min</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(<span class=\"built_in\">Math</span>.max(value, min), max);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getClass</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getClassName</span>(<span class=\"params\">parent, className</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = parent.getElementsByTagName(<span class=\"string\">\"*\"</span>); <span class=\"comment\">//获取 父级的所有子集</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pinS = []; <span class=\"comment\">//创建一个数组 用于收集子元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; obj.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历子元素、判断类别、压入数组</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj[i].className == className) &#123;</span><br><span class=\"line\">            pinS.push(obj[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pinS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将对象拼接成 key1=val1&amp;key2=val2&amp;key3=val3 的字符串形式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">objParams</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        result += <span class=\"string\">\"&amp;\"</span> + item + <span class=\"string\">\"=\"</span> + <span class=\"built_in\">encodeURIComponent</span>(obj[item]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">        result = result.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把多维数组变扁平</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> givenArr = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>], [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, [<span class=\"number\">11</span>, <span class=\"number\">12</span>, [<span class=\"number\">12</span>, <span class=\"number\">13</span>, [<span class=\"number\">14</span>, [<span class=\"number\">99</span>]]]]], <span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (arr.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">Array</span>.isArray(item))) &#123;</span><br><span class=\"line\">        arr = [].concat(...arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">flatten(givenArr);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组去重合并</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combine</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [].concat.apply([], <span class=\"built_in\">arguments</span>);  <span class=\"comment\">//没有去重复的新数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>], n = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(combine(m,n));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Number&#125; time 时间戳</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;String&#125; format 时间格式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFormatDate</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  time = new Date(</span>).<span class=\"title\">getTime</span>(<span class=\"params\"></span>),</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">format</span> = '<span class=\"title\">YY</span>-<span class=\"title\">MM</span>-<span class=\"title\">DD</span>'</span></span><br><span class=\"line\"><span class=\"function\">) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> year = date.getFullYear(),</span><br><span class=\"line\">    month = date.getMonth() + <span class=\"number\">1</span>,</span><br><span class=\"line\">    day = date.getDate(),</span><br><span class=\"line\">    hour = date.getHours(),</span><br><span class=\"line\">    minute = date.getMinutes(),</span><br><span class=\"line\">    second = date.getSeconds()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> preArr = <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>)).map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elem, index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'0'</span> + index</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newTime = format</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/YY/g</span>, year)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/MM/g</span>, preArr[month] || month)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/DD/g</span>, preArr[day] || day)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/hh/g</span>, preArr[hour] || hour)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/mm/g</span>, preArr[minute] || minute)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/ss/g</span>, preArr[second] || second)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newTime</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间段格式化（日时分秒）</span></span><br><span class=\"line\"><span class=\"comment\"> * @param remainTime 剩余时间</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remainTimeFormatDHMS</span>(<span class=\"params\">remainTime: number</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> d = <span class=\"built_in\">Math</span>.floor(remainTime / <span class=\"number\">864e5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> h = <span class=\"built_in\">Math</span>.floor((remainTime % <span class=\"number\">864e5</span>) / <span class=\"number\">36e5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> m = <span class=\"built_in\">Math</span>.floor((remainTime % <span class=\"number\">36e5</span>) / <span class=\"number\">6e4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> s = <span class=\"built_in\">Math</span>.floor(((remainTime % <span class=\"number\">36e5</span>) % <span class=\"number\">6e4</span>) / <span class=\"number\">1e3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; d, h, m, s &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取小数后两位，不四舍五入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDecimal</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(n * <span class=\"number\">100</span>) / <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把数据保存为csv文件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">download</span>(<span class=\"params\">filename, text</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">  element.setAttribute(<span class=\"string\">\"href\"</span>, <span class=\"string\">\"data:text/csv;charset=utf-8,\"</span> + <span class=\"built_in\">encodeURIComponent</span>(text));</span><br><span class=\"line\">  element.setAttribute(<span class=\"string\">\"download\"</span>, filename);</span><br><span class=\"line\"></span><br><span class=\"line\">  element.style.display = <span class=\"string\">\"none\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(element);</span><br><span class=\"line\"></span><br><span class=\"line\">  element.click();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.removeChild(element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把canvas转化成图片图片下载下来</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canvasDownLoad</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(id) <span class=\"keyword\">as</span> HTMLCanvasElement;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">  image.src = canvas.toDataURL(<span class=\"string\">\"image/png\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> MouseEvent(<span class=\"string\">\"click\"</span>);</span><br><span class=\"line\">  a.download = <span class=\"string\">\"下载图片\"</span>;</span><br><span class=\"line\">  a.href = image.src;</span><br><span class=\"line\">  a.dispatchEvent(event);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSearchParam</span>(<span class=\"params\">key, url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">`[?&amp;]<span class=\"subst\">$&#123;key&#125;</span>=([^&amp;]+)`</span>).exec(url) || [])[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取元素到页面顶部的距离</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getElementTop</span>(<span class=\"params\">element: HTMLElement</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> actualTop = element.offsetTop;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> current: any = element.offsetParent;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    actualTop += current.offsetTop;</span><br><span class=\"line\">    current = current.offsetParent;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> actualTop;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用工具\"><a href=\"#常用工具\" class=\"headerlink\" title=\"常用工具\"></a>常用工具</h3><p>HSTS 是 HTTP 严格传输安全（HTTP Strict Transport Security） 的缩写。 这是一种网站用来声明他们只能使用安全连接（HTTPS）访问的方法。 如果一个网站声明了 HSTS 策略，浏览器必须拒绝所有的 HTTP 连接并阻止用户接受不安全的 SSL 证书。 目前大多数主流浏览器都支持 HSTS。</p>\n<p>清除某个域名的 HSTS：</p>\n<ul>\n<li>谷歌： chrome://net-internals/#hsts，在 Delete domain security policies 下的文本框中输入要删除的域名然后点击删除。</li>\n<li>Safari：偏好设置-&gt;隐私-&gt;管理网站数据-&gt;删除对应域名</li>\n</ul>"},{"title":"javascript技巧1","date":"2019-04-26T06:35:44.000Z","_content":"\n最近发现 js 真的有很多奇淫技巧。\n\n### 给函数添加属性\n\n因为 js 一切皆对象，函数其实也是对象，是 Function 的实例。所以也可以给它添加属性。\n\n```javascript\nfunction people() {}\npeople.age = 30;\npeople.say = function() {\n  console.log(\"say\");\n};\nconsole.log(people.age); //30\npeople.say(); //say\n```\n\n<!--more-->\n\n每个函数其实还有几个自带的属性：\nname: 函数名称\nlength: 函数参数个数\nprototype: 函数原型\n利用这个特性，可以写出一些不太常见的代码：\n\n```javascript\nfunction Person() {\n  function man() {\n    man.say();\n  }\n\n  Object.setPrototypeOf(man, proto); //设置man的原型\n  return man;\n}\n\nfunction proto() {}\n\nproto.say = function() {\n  console.log(\"say\");\n};\n\nproto.eat = function() {\n  console.log(\"eat\");\n};\n\nvar chinese = new Person();\nchinese(); //say\nchinese.eat(); //eat\n```\n\n构造函数一般都返回自身实例，但这里 Person 构造函数返回一个函数 man，此函数 man 设置了 proto 为原型，所以 man 可以调用 proto 的方法，因为函数也是对象的一种，所以实例化后的 chinese 既可以作为函数执行，也可以调用自己或原型链的方法。\n\n### 把对象转化为函数\n\n有这么一个对象：\n\n```javascript\nvar app = {};\napp.nickname = \"jack\";\n//app.name = 'jack'\napp.handle = function() {\n  console.log(\"hello \" + this.nickname);\n};\n```\n\n假设要把这个对象传给一个函数，这个函数只能接受一个函数作为对象：\n\n```javascript\nfunction create(fn) {\n  if (typeof fn !== \"function\") {\n    throw TypeError(\"expected fn is a funtion\");\n  }\n\n  console.log(\"create a app!\");\n  fn();\n}\n```\n\n这个时候可以把 app 改造成一个函数：\n\n```javascript\nvar application = function() {\n  application.handle();\n};\nObject.assign(application, app);\n```\n\n这样就可以传入 create 函数了：\n\n```javascript\ncreate(application);\n//create a app!\n//hello jack\n```\n\n注意，当前面的 app 设置了名为 name 的属性时会报错：\"Cannot assign to read only property 'name' of function\"。\n\n这些提取于 express 源码。\n","source":"_posts/javascript技巧1.md","raw":"---\ntitle: javascript技巧1\ndate: 2019-04-26 14:35:44\ncategories: 技术\ntags: 前端\n---\n\n最近发现 js 真的有很多奇淫技巧。\n\n### 给函数添加属性\n\n因为 js 一切皆对象，函数其实也是对象，是 Function 的实例。所以也可以给它添加属性。\n\n```javascript\nfunction people() {}\npeople.age = 30;\npeople.say = function() {\n  console.log(\"say\");\n};\nconsole.log(people.age); //30\npeople.say(); //say\n```\n\n<!--more-->\n\n每个函数其实还有几个自带的属性：\nname: 函数名称\nlength: 函数参数个数\nprototype: 函数原型\n利用这个特性，可以写出一些不太常见的代码：\n\n```javascript\nfunction Person() {\n  function man() {\n    man.say();\n  }\n\n  Object.setPrototypeOf(man, proto); //设置man的原型\n  return man;\n}\n\nfunction proto() {}\n\nproto.say = function() {\n  console.log(\"say\");\n};\n\nproto.eat = function() {\n  console.log(\"eat\");\n};\n\nvar chinese = new Person();\nchinese(); //say\nchinese.eat(); //eat\n```\n\n构造函数一般都返回自身实例，但这里 Person 构造函数返回一个函数 man，此函数 man 设置了 proto 为原型，所以 man 可以调用 proto 的方法，因为函数也是对象的一种，所以实例化后的 chinese 既可以作为函数执行，也可以调用自己或原型链的方法。\n\n### 把对象转化为函数\n\n有这么一个对象：\n\n```javascript\nvar app = {};\napp.nickname = \"jack\";\n//app.name = 'jack'\napp.handle = function() {\n  console.log(\"hello \" + this.nickname);\n};\n```\n\n假设要把这个对象传给一个函数，这个函数只能接受一个函数作为对象：\n\n```javascript\nfunction create(fn) {\n  if (typeof fn !== \"function\") {\n    throw TypeError(\"expected fn is a funtion\");\n  }\n\n  console.log(\"create a app!\");\n  fn();\n}\n```\n\n这个时候可以把 app 改造成一个函数：\n\n```javascript\nvar application = function() {\n  application.handle();\n};\nObject.assign(application, app);\n```\n\n这样就可以传入 create 函数了：\n\n```javascript\ncreate(application);\n//create a app!\n//hello jack\n```\n\n注意，当前面的 app 设置了名为 name 的属性时会报错：\"Cannot assign to read only property 'name' of function\"。\n\n这些提取于 express 源码。\n","slug":"javascript技巧1","published":1,"updated":"2019-05-08T10:35:08.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm647001k8hsp5xjb4vy0","content":"<p>最近发现 js 真的有很多奇淫技巧。</p>\n<h3 id=\"给函数添加属性\"><a href=\"#给函数添加属性\" class=\"headerlink\" title=\"给函数添加属性\"></a>给函数添加属性</h3><p>因为 js 一切皆对象，函数其实也是对象，是 Function 的实例。所以也可以给它添加属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">people</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">people.age = <span class=\"number\">30</span>;</span><br><span class=\"line\">people.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"say\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(people.age); <span class=\"comment\">//30</span></span><br><span class=\"line\">people.say(); <span class=\"comment\">//say</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>每个函数其实还有几个自带的属性：<br>name: 函数名称<br>length: 函数参数个数<br>prototype: 函数原型<br>利用这个特性，可以写出一些不太常见的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">man</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    man.say();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.setPrototypeOf(man, proto); <span class=\"comment\">//设置man的原型</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> man;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proto</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">proto.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"say\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">proto.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"eat\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> chinese = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">chinese(); <span class=\"comment\">//say</span></span><br><span class=\"line\">chinese.eat(); <span class=\"comment\">//eat</span></span><br></pre></td></tr></table></figure>\n<p>构造函数一般都返回自身实例，但这里 Person 构造函数返回一个函数 man，此函数 man 设置了 proto 为原型，所以 man 可以调用 proto 的方法，因为函数也是对象的一种，所以实例化后的 chinese 既可以作为函数执行，也可以调用自己或原型链的方法。</p>\n<h3 id=\"把对象转化为函数\"><a href=\"#把对象转化为函数\" class=\"headerlink\" title=\"把对象转化为函数\"></a>把对象转化为函数</h3><p>有这么一个对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = &#123;&#125;;</span><br><span class=\"line\">app.nickname = <span class=\"string\">\"jack\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//app.name = 'jack'</span></span><br><span class=\"line\">app.handle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.nickname);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>假设要把这个对象传给一个函数，这个函数只能接受一个函数作为对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"expected fn is a funtion\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"create a app!\"</span>);</span><br><span class=\"line\">  fn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个时候可以把 app 改造成一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> application = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  application.handle();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(application, app);</span><br></pre></td></tr></table></figure>\n<p>这样就可以传入 create 函数了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create(application);</span><br><span class=\"line\"><span class=\"comment\">//create a app!</span></span><br><span class=\"line\"><span class=\"comment\">//hello jack</span></span><br></pre></td></tr></table></figure>\n<p>注意，当前面的 app 设置了名为 name 的属性时会报错：”Cannot assign to read only property ‘name’ of function”。</p>\n<p>这些提取于 express 源码。</p>\n","site":{"data":{}},"excerpt":"<p>最近发现 js 真的有很多奇淫技巧。</p>\n<h3 id=\"给函数添加属性\"><a href=\"#给函数添加属性\" class=\"headerlink\" title=\"给函数添加属性\"></a>给函数添加属性</h3><p>因为 js 一切皆对象，函数其实也是对象，是 Function 的实例。所以也可以给它添加属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">people</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">people.age = <span class=\"number\">30</span>;</span><br><span class=\"line\">people.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"say\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(people.age); <span class=\"comment\">//30</span></span><br><span class=\"line\">people.say(); <span class=\"comment\">//say</span></span><br></pre></td></tr></table></figure>","more":"<p>每个函数其实还有几个自带的属性：<br>name: 函数名称<br>length: 函数参数个数<br>prototype: 函数原型<br>利用这个特性，可以写出一些不太常见的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">man</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    man.say();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.setPrototypeOf(man, proto); <span class=\"comment\">//设置man的原型</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> man;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proto</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">proto.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"say\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">proto.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"eat\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> chinese = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">chinese(); <span class=\"comment\">//say</span></span><br><span class=\"line\">chinese.eat(); <span class=\"comment\">//eat</span></span><br></pre></td></tr></table></figure>\n<p>构造函数一般都返回自身实例，但这里 Person 构造函数返回一个函数 man，此函数 man 设置了 proto 为原型，所以 man 可以调用 proto 的方法，因为函数也是对象的一种，所以实例化后的 chinese 既可以作为函数执行，也可以调用自己或原型链的方法。</p>\n<h3 id=\"把对象转化为函数\"><a href=\"#把对象转化为函数\" class=\"headerlink\" title=\"把对象转化为函数\"></a>把对象转化为函数</h3><p>有这么一个对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = &#123;&#125;;</span><br><span class=\"line\">app.nickname = <span class=\"string\">\"jack\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//app.name = 'jack'</span></span><br><span class=\"line\">app.handle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.nickname);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>假设要把这个对象传给一个函数，这个函数只能接受一个函数作为对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"expected fn is a funtion\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"create a app!\"</span>);</span><br><span class=\"line\">  fn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个时候可以把 app 改造成一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> application = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  application.handle();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(application, app);</span><br></pre></td></tr></table></figure>\n<p>这样就可以传入 create 函数了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create(application);</span><br><span class=\"line\"><span class=\"comment\">//create a app!</span></span><br><span class=\"line\"><span class=\"comment\">//hello jack</span></span><br></pre></td></tr></table></figure>\n<p>注意，当前面的 app 设置了名为 name 的属性时会报错：”Cannot assign to read only property ‘name’ of function”。</p>\n<p>这些提取于 express 源码。</p>"},{"title":"防抖和节流","date":"2018-05-26T15:09:05.000Z","_content":"\n整理了一下防抖和节流\n\n### 防抖\n\n很多时候，多次触发事件后，事件处理函数只执行一次，并且是在触发操作结束时执行，我们在监听滚动条位置，控制是否显示返回顶部按钮时，就可以将防抖函数应用其中。\n\n<!--more-->\n\n```javascript\n//定义一个操作函数\nfunction todo(){\n    console.log('date:' + new Date())\n}\n\nfunction debounce(callback, time){\n    var timer\n    return function(){\n        clearTimeout(timer);\n        timer = setTimeout(function(){\n            callback()\n        }, time)\n    }\n}\nwindow.addEventListener('scroll', debounce(todo,50))\n```\n\n### 节流\n\n借助 flag 标志和 setTimeout 实现在一定时间内，只执行一次方法，只有上一次函数执行后，过了规定的时间间隔，才能进行下一次的函数调用。\n\n```javascript\nfunction throttle(callback,time){\n    var flag = true\n    return function(){\n        if(!flag){\n            return\n        }\n        flag = false\n        setTimeout(function(){\n            callback()\n            flag = true\n        }, time)\n    }\n}\nwindow.addEventListener('scroll', throttle(todo,2000)) //两秒执行一次\n```\n","source":"_posts/防抖和节流.md","raw":"---\ntitle: 防抖和节流\ndate: 2018-05-26 23:09:05\ncategories: 技术\ntags: [前端]\n---\n\n整理了一下防抖和节流\n\n### 防抖\n\n很多时候，多次触发事件后，事件处理函数只执行一次，并且是在触发操作结束时执行，我们在监听滚动条位置，控制是否显示返回顶部按钮时，就可以将防抖函数应用其中。\n\n<!--more-->\n\n```javascript\n//定义一个操作函数\nfunction todo(){\n    console.log('date:' + new Date())\n}\n\nfunction debounce(callback, time){\n    var timer\n    return function(){\n        clearTimeout(timer);\n        timer = setTimeout(function(){\n            callback()\n        }, time)\n    }\n}\nwindow.addEventListener('scroll', debounce(todo,50))\n```\n\n### 节流\n\n借助 flag 标志和 setTimeout 实现在一定时间内，只执行一次方法，只有上一次函数执行后，过了规定的时间间隔，才能进行下一次的函数调用。\n\n```javascript\nfunction throttle(callback,time){\n    var flag = true\n    return function(){\n        if(!flag){\n            return\n        }\n        flag = false\n        setTimeout(function(){\n            callback()\n            flag = true\n        }, time)\n    }\n}\nwindow.addEventListener('scroll', throttle(todo,2000)) //两秒执行一次\n```\n","slug":"防抖和节流","published":1,"updated":"2020-12-15T02:49:08.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm649001n8hspun9docfq","content":"<p>整理了一下防抖和节流</p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p>很多时候，多次触发事件后，事件处理函数只执行一次，并且是在触发操作结束时执行，我们在监听滚动条位置，控制是否显示返回顶部按钮时，就可以将防抖函数应用其中。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个操作函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">todo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'date:'</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">callback, time</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        clearTimeout(timer);</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            callback()</span><br><span class=\"line\">        &#125;, time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, debounce(todo,<span class=\"number\">50</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p>借助 flag 标志和 setTimeout 实现在一定时间内，只执行一次方法，只有上一次函数执行后，过了规定的时间间隔，才能进行下一次的函数调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">callback,time</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!flag)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flag = <span class=\"literal\">false</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            callback()</span><br><span class=\"line\">            flag = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;, time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, throttle(todo,<span class=\"number\">2000</span>)) <span class=\"comment\">//两秒执行一次</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>整理了一下防抖和节流</p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p>很多时候，多次触发事件后，事件处理函数只执行一次，并且是在触发操作结束时执行，我们在监听滚动条位置，控制是否显示返回顶部按钮时，就可以将防抖函数应用其中。</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个操作函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">todo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'date:'</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">callback, time</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        clearTimeout(timer);</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            callback()</span><br><span class=\"line\">        &#125;, time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, debounce(todo,<span class=\"number\">50</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p>借助 flag 标志和 setTimeout 实现在一定时间内，只执行一次方法，只有上一次函数执行后，过了规定的时间间隔，才能进行下一次的函数调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">callback,time</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!flag)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flag = <span class=\"literal\">false</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            callback()</span><br><span class=\"line\">            flag = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;, time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, throttle(todo,<span class=\"number\">2000</span>)) <span class=\"comment\">//两秒执行一次</span></span><br></pre></td></tr></table></figure>"},{"title":"知识点总结","date":"2020-07-26T10:27:51.000Z","_content":"常用知识点\n<!-- more -->\n\n### 内置类型\n六个基本类型（es6新增symbol）和引用类型\n\n### 作用域与闭包\n\n### 原型和继承\n\n```javascript\n// 模拟根据原型链查找属性\nfunction  getProp(obj, prop) {\n  let proto = obj;\n  while(proto && proto[prop] === void 0) {\n    proto = proto.__proto__;\n  }\n  return proto === null ? void 0 : obj[prop];\n}\n\n// 模拟new过程\nfunction myNew(constructor, ...args) {\n  const obj = {};\n  obj.__proto__ = constructor.prototype;\n  const ret = constructor.call(obj, ...args);\n  return ret instanceof Object ? ret : obj;\n}\n```\n\n#### es5和es6继承区别：\nes5是先创建子类的实例对象，然后通过Parent.call(this)把父类的属性添加进子实例的this。\nes6是先创建父类的实例对象this，用super()把该this添加到子类，子类原本是没有this，所以不能在super()前使用this。\nes5不能继承原生构造函数的属性，如一个构造函数继承自Array，但也没有length属性。\nes6可以继承原生构造函数的属性。\n\n```javascript\nfunction changeObjProperty(o) {\n  // o这个形参实际可以写成var o = webSite\n  o.siteUrl = \"http://www.baidu.com\"\n  // 指向新的对象了\n  o = new Object()\n  o.siteUrl = \"http://www.google.com\"\n} \nlet webSite = new Object();\nchangeObjProperty(webSite);\nconsole.log(webSite.siteUrl);\n// \"http://www.baidu.com\"\n```\n\n### 浏览器和Node 事件循环的区别\n\n```javascript\nfunction test () {\n   console.log('start')\n    setTimeout(() => {\n        console.log('children2')\n        Promise.resolve().then(() => {console.log('children2-1')})\n    }, 0)\n    setTimeout(() => {\n        console.log('children3')\n        Promise.resolve().then(() => {console.log('children3-1')})\n    }, 0)\n    Promise.resolve().then(() => {console.log('children1')})\n    console.log('end') \n}\n\ntest()\n\n// 以上代码在node11以下版本的执行结果(先执行所有的宏任务，再执行微任务)\n// start\n// end\n// children1\n// children2\n// children3\n// children2-1\n// children3-1\n\n// 以上代码在node11及浏览器的执行结果(顺序执行宏任务和微任务)\n// start\n// end\n// children1\n// children2\n// children2-1\n// children3\n// children3-1\n```\n\n### createObjectURL\n使用window.URL.createObjectURL预览图片，在图片加载成功后需要清除使用的内存window.URL.revokeObjectURL(src);\n\n### 白屏时间和首屏时间\n白屏是指浏览器从响应用户输入网址地址，到浏览器开始显示内容的时间。  \n首屏时间是指浏览器从响应用户输入网络地址，到首屏内容渲染完成的时间。  \n影响白屏时间的因素：网络，服务端性能，前端页面结构设计。  \n影响首屏时间的因素：白屏时间，资源下载执行时间。\n\n简单的计算白屏时间：在`window.onload`里执行`new Date() - performance.timing.navigationStart`，或者获取`performance.now()`\n\n`performance.timing.navigationStart + performance.now()` 约等于 `Date.now()`。\n\n`performance.getEntries()`方法可以查询页面内加载的所有资源的开始时间、耗时等信息，包括css、js、图片、字体文件、异步请求等。\n\n### 关闭页面弹出确认弹窗\n\n```javascript\nwindow.addEventListener('beforeunload', event => {\n  // Cancel the event as stated by the standard.\n  event.preventDefault();\n  // Chrome requires returnValue to be set.\n  event.returnValue = '';\n});\n```\n\n\n\n\n### 兼容性问题\n\n- IE6中，第一个浮动到父元素边上的元素，如果含有该方向的margin值，那么margin会以双倍显示。即：浮动元素的左边距在IE6上为所设定的左边距的两倍。这个问题只会发生在浮动行的第一个浮动元素上。准确的说：应该是每一行的第一个元素都会受此影响。\n为了解决该问题，需要给浮动元素添加属性display: inline，即可解决。\n\n- iOS11中position:fixed弹出框中的input光标错位的问题  \n在弹框出现的时候给body添加fixed:\n```css\nbody{ position: fixed; width: 100%;}\n```\n  当弹框消失的时候\n```css\n$(\"body\").css(\"position\",\"relative\")\n```\n- IOS设置position:fixed，键盘遮住输入框\n\n```javascript\n// 设置一个定时器在输入框获取焦点的时候一直刷新输入框的位置，然后在失去焦点的时候清除\nclearInterval(this.resizeInputInterval);\nthis.resizeInputInterval = setInterval(() => {\n  this.input.scrollIntoView(true); // 元素的顶端将和其所在滚动区的可视区域的顶端对齐\n}, 100);\n```\n\n```javascript\nvar windheight = $(window).height();  /*未唤起键盘时当前窗口高度*/\n$(window).resize(function(){\n   var docheight = $(window).height();  /*唤起键盘时当前窗口高度*/        \n   if(docheight < windheight){            /*当唤起键盘高度小于未唤起键盘高度时执行*/\n      $(\"input\").css(\"position\",\"static\");\n   }else{\n      $(\"input\").css(\"position\",\"fixed\");\n   }           \n});\n// 或者在输入框聚焦失焦时设置position\n```\n\n### 计算机网络\n\n| OSI七层 | TCP/IP4层 | 协议或设备 |\n| ------- | --------- | --- |\n| 应用层 | 应用层  | HTTP |\n| 表示层 | 应用层  |  Telnet |\n| 会话层 | 应用层  |  SMTP, DNS |\n| 传输层 | 传输层 | TCP, UDP |\n| 网络层 | 网络层 | IP,路由器 |\n| 数据链路层 | 数据链路层 | 网桥,交换机 |\n| 物理层 | 物理层 | 网卡 |\n\n\n#### 为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\n\n这是由于服务端的LISTEN状态下的SOCKET当收到SYN报文的建立请求后。它能够把ACK和SYN（ACK起应答作用。而SYN起同步作用）放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，它只表示对方没有数据发送给你了。但服务端可能还需要再发送一些数据给客户端。所以服务端不能立即会关闭SOCKET，先发送ACK客户端，等服务器确认可以关闭了，再发送FIN报文给对方来表示它也能够关闭连接了。服务端这里的ACK报文和FIN报文多数情况下都是分开发送的。\n\nA：B 啊，我不想玩了。\nB：哦，你不想玩了啊，我知道了。\nB：A 啊，好吧，我也不玩了，拜拜。\nA：好的，拜拜。\n\n### IntersectionObserver\n\n```javascript\n//监听area出现在屏幕时做一些事件\nvar io = new IntersectionObserver(function(entries) {\n    entries.forEach(item => {\n        if(item.intersectionRatio > 0) {\n            //Appears on the viewport\n        }else {\n            //Leave in the viewport\n        }\n    });\n});\n\nio.observe(document.getElementById('area'));\n```\n\n### 异步脚本\n\n`<script src=\"script.js\"></script>`\n\n没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。\n\n`<script async src=\"script.js\"></script>`\n\n有 async，加载和渲染后续文档元素的过程将和 script.js 的加载并行（异步）。是乱序执行，不管你声明的顺序如何，只要它加载完了就会立刻执行，执行还是会堵塞文档解析。\n\n`<script defer src=\"myscript.js\"></script>`\n\n有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。会按照加载顺序执行脚本。\n\n### 文件顺序\n\n`为什么通常推荐将 CSS <link> 放置在 <head></head> 之间，而将 JS <script> 放置在 </body> 之前？你知道有哪些例外吗？`\n\n浏览器从上到下依次解析html文档。将 css 文件放到头部， css 文件可以先加载。\n避免先加载 body 内容，导致页面一开始样式错乱，然后闪烁。将 javascript 文件放到底部是因为：\n若将 javascript 文件放到 head 里面，就意味着必须等到所有的 javascript 代码都被 下载、解析和执行完成\n之后才开始呈现页面内容。这样就会造成呈现页面时出现明显的延迟，窗口一片空白。\n为避免这样的问题一般将全部 javascript 文件放到 body 元素中页面内容的后面。\n页面加载的问题，先把页面加载出来，然后再去加载效果，提高用户体验度。\n\nCSS下载不会阻塞DOM的解析，但是阻塞页面渲染。\n`<script>`与`<link>`同时在头部的话，`<script>`在上可能会更好了。因为js可能需要获取css的内容，如果`<link>`在前面的话，本来不会阻塞DOM的解析，但是js会阻塞，然后js又得等待css下载完，结果造成css和js一起阻塞DOM解析。\n\n浏览器遇到 `<script>`且没有defer或async属性的 标签时，会触发页面渲染，因而如果前面CSS资源尚未加载完毕时，浏览器会等待它加载完毕在执行脚本。\n\n### 浏览器缓存\n\nLast-Modified->If-Modified-Since\n\nEtag->If-None-Match\n\n### 输入url到页面展示过程\n\n- dns解析\n  浏览器缓存->操作系统缓存->本地host文件->路由器缓存->网络提供商缓存->顶级DNS服务器/根DNS服务器\n- TCP连接（三次握手）\n- 发送HTTP请求\n  请求头第一行：`GET /www.baidu.com HTTP/1.1`\n- 服务器处理请求\n  反向代理服务器->应用服务器\n- 服务器响应请求\n  响应头第一行：`HTTP/1.1 200 OK`\n- 浏览器解析HTML生成DOM，解析CSS生成CSSOM，执行JavaScript，样式计算，构造布局树，准备绘制列表，光栅化，合成，显示。\n  （构建dom树->构建render树->布局render树->绘制render树）\n\n  整个页面解析过程 大致是这样：\n  HTMLparser  解析dom  -> Recalculate style 解析css stylesheets -> 构建布局树 -> 布局计算 -> 创建分层树 , 创建图层-> 图层绘制成一个绘制列表 （浏览器主进程）-> （合成线程）光栅化，根据视口将图层切分成图块，最后交给GPU进程合成位图，存放在GPU内存中\n  - 连接结束（四次挥手）\n\n### 常用性能优化\n\n- 减少HTTP请求\n- 使用服务器端渲染\n- 静态资源使用cdn\n- css放头部，js放尾部\n- 使用字体图标，小的图片使用base64直接写在css\n- 缓存\n- 压缩文件\n- 懒加载\n- 按需加载\n- 减少重排回流\n- 使用requestAninationFrame代替定时器来实现动画\n\n### webpack性能优化\n\n- 使用DllPlugin动态链接库插件减少基础模块编译次数，其原理是把网页依赖的基础模块抽离出来打包到dll文件中，当需要导入的模块存在于某个dll中时，这个模块不再被打包，而是去dll中获取。原因在于dll中大多包含的是常用的第三方模块，如react、react-dom，所以只要这些模块版本不升级，就只需被编译一次。\n- 使用HappyPack开启多进程Loader转换。在整个构建流程中，最耗时的就是Loader对文件的转换操作了，而运行在Node.js之上的Webpack是单线程模型的，也就是只能一个一个文件进行处理，不能并行处理。HappyPack可以将任务分解给多个子进程，最后将结果发给主进程。JS是单线程模型，只能通过这种多进程的方式提高性能。\n- 压缩代码-JS、ES、CSS\n- 分割代码以按需加载\n\n### 箭头函数与普通函数区别\n\n- 箭头函数是匿名函数，不能作为构造函数，不能使用new\n- 箭头函数没有prototype\n- 普通函数的this非严格模式下指向window，严格模式指向undefined。箭头函数两种模式下都继承自上一层作用域的this。所以对象的方法不宜使用箭头函数，它的this是指向外层函数的，如果没有外层函数则指向全局对象。call()、apply()、bind()也不能改变箭头函数的this。\n- 箭头函数不能使用new.target和arguments，如果是套在普通函数内，则这两个都指向普通函数。\n- 对象的方法不宜使用箭头函数，它的是指向外层函数的，如果没有外层函数则指向全局对象。\n\n### encodeURI和encodeURIComponent\nencodeURI方法不会对下列字符编码  ASCII字母  数字  ~!@#$&*()=:/,;?+'\nencodeURIComponent方法不会对下列字符编码 ASCII字母  数字  ~!*()'\n所以encodeURIComponent比encodeURI编码的范围更大。实际例子来说，encodeURIComponent会把`http://`编码成`http%3A%2F%2F`而encodeURI却不会。\n\n如果你需要编码整个URL，然后需要使用这个URL，那么用encodeURI。\n当你需要编码URL中的参数的时候，那么encodeURIComponent是最好方法。\n\n### react生命周期函数\n\n- 初始化创建组件阶段：\n父组件：constructor -> componentWillMount -> render ->\n子组件：constructor -> componentWillMount -> render -> componentDidMount ->\n父组件：componentDidMount\n- 更新阶段：\n父组件：componentWillUpdate -> render ->\n子组件：componentWillReceiveProps -> componentWillUpdate -> render -> componentDidUpdate ->\n父组件：componentDidUpdate\n- 卸载阶段：\n父组件：componentWillUnmount\n子组件：componentWillUnmount\n\n### 判断数据类型\n\n```javascript\n// 使用typeof\nconsole.log(typeof bool); //boolean\nconsole.log(typeof num);//number\nconsole.log(typeof str);//string\nconsole.log(typeof und);//undefined\nconsole.log(typeof nul);//object\nconsole.log(typeof arr);//object\nconsole.log(typeof obj);//object\nconsole.log(typeof fun);//function\n\n// 使用instanceof ，即使是Boolean，Number,String数据类型也要用new，除了null和undefined\n\n// Object.prototype.toString.call,不能检测非原生构造函数的构造函数名。\nconsole.log(Object.prototype.toString.call(bool));//[object Boolean]\nconsole.log(Object.prototype.toString.call(num));//[object Number]\nconsole.log(Object.prototype.toString.call(str));//[object String]\nconsole.log(Object.prototype.toString.call(und));//[object Undefined]\nconsole.log(Object.prototype.toString.call(nul));//[object Null]\nconsole.log(Object.prototype.toString.call(arr));//[object Array]\nconsole.log(Object.prototype.toString.call(obj));//[object Object]\nconsole.log(Object.prototype.toString.call(fun));//[object Function]\n```\n\n### HTTP2\n\n- 二进制传输。  \nhttp1.x是文本传输。为了保证HTTP不受影响，那就需要在应用层（HTTP2.0）和传输层（TCP or UDP）之间增加一个二进制分帧层。在二进制分帧层上，HTTP2.0会将所有传输的信息分为更小的消息和帧，并采用二进制格式编码，其中HTTP1.x的首部信息会被封装到Headers帧，而Request Body则封装到Data帧。\n- 多路复用。  \n所谓多路复用，即在一个TCP连接中存在多个流，即可以同时发送多个请求，对端可以通过帧中的表示知道该帧属于哪个请求。在客户端，这些帧乱序发送，到对端后再根据每个帧首部的流标识符重新组装。通过该技术，可以避免HTTP旧版本的队头阻塞问题，极大提高传输性能。\n- Header压缩\n- 服务器推送\n- 更安全。  \nHTTP2.0使用了tls的拓展ALPN做为协议升级，除此之外，HTTP2.0对tls的安全性做了近一步加强，通过黑名单机制禁用了几百种不再安全的加密算法。\n\n### webpack原理\n\n1. 先解析webpack配置参数,合并shell中的输入和配置文件如webpack.config.js中的参数,最后生成配置结果;\n\n2. 注册所有配置的插件,好让插件监听webpack构建生命周期的事件节点,并作出响应;\n\n3. 从配置文件中的入口文件entry开始解析文件,构建AST,找出每个文件依赖的文件,递归下去;\n\n4. 在解析文件递归过程中根据文件类型和对应的loader配置找出合适的插件进行解析;\n\n5. 递归结束后得到每个文件的最终结果,根据entry配置生成代码块chunk;\n\n6. 输出所有chunk到文件系统","source":"_posts/知识点总结.md","raw":"---\ntitle: 知识点总结\ndate: 2020-07-26 18:27:51\ncategories: 前端\ntags: 技术\n---\n常用知识点\n<!-- more -->\n\n### 内置类型\n六个基本类型（es6新增symbol）和引用类型\n\n### 作用域与闭包\n\n### 原型和继承\n\n```javascript\n// 模拟根据原型链查找属性\nfunction  getProp(obj, prop) {\n  let proto = obj;\n  while(proto && proto[prop] === void 0) {\n    proto = proto.__proto__;\n  }\n  return proto === null ? void 0 : obj[prop];\n}\n\n// 模拟new过程\nfunction myNew(constructor, ...args) {\n  const obj = {};\n  obj.__proto__ = constructor.prototype;\n  const ret = constructor.call(obj, ...args);\n  return ret instanceof Object ? ret : obj;\n}\n```\n\n#### es5和es6继承区别：\nes5是先创建子类的实例对象，然后通过Parent.call(this)把父类的属性添加进子实例的this。\nes6是先创建父类的实例对象this，用super()把该this添加到子类，子类原本是没有this，所以不能在super()前使用this。\nes5不能继承原生构造函数的属性，如一个构造函数继承自Array，但也没有length属性。\nes6可以继承原生构造函数的属性。\n\n```javascript\nfunction changeObjProperty(o) {\n  // o这个形参实际可以写成var o = webSite\n  o.siteUrl = \"http://www.baidu.com\"\n  // 指向新的对象了\n  o = new Object()\n  o.siteUrl = \"http://www.google.com\"\n} \nlet webSite = new Object();\nchangeObjProperty(webSite);\nconsole.log(webSite.siteUrl);\n// \"http://www.baidu.com\"\n```\n\n### 浏览器和Node 事件循环的区别\n\n```javascript\nfunction test () {\n   console.log('start')\n    setTimeout(() => {\n        console.log('children2')\n        Promise.resolve().then(() => {console.log('children2-1')})\n    }, 0)\n    setTimeout(() => {\n        console.log('children3')\n        Promise.resolve().then(() => {console.log('children3-1')})\n    }, 0)\n    Promise.resolve().then(() => {console.log('children1')})\n    console.log('end') \n}\n\ntest()\n\n// 以上代码在node11以下版本的执行结果(先执行所有的宏任务，再执行微任务)\n// start\n// end\n// children1\n// children2\n// children3\n// children2-1\n// children3-1\n\n// 以上代码在node11及浏览器的执行结果(顺序执行宏任务和微任务)\n// start\n// end\n// children1\n// children2\n// children2-1\n// children3\n// children3-1\n```\n\n### createObjectURL\n使用window.URL.createObjectURL预览图片，在图片加载成功后需要清除使用的内存window.URL.revokeObjectURL(src);\n\n### 白屏时间和首屏时间\n白屏是指浏览器从响应用户输入网址地址，到浏览器开始显示内容的时间。  \n首屏时间是指浏览器从响应用户输入网络地址，到首屏内容渲染完成的时间。  \n影响白屏时间的因素：网络，服务端性能，前端页面结构设计。  \n影响首屏时间的因素：白屏时间，资源下载执行时间。\n\n简单的计算白屏时间：在`window.onload`里执行`new Date() - performance.timing.navigationStart`，或者获取`performance.now()`\n\n`performance.timing.navigationStart + performance.now()` 约等于 `Date.now()`。\n\n`performance.getEntries()`方法可以查询页面内加载的所有资源的开始时间、耗时等信息，包括css、js、图片、字体文件、异步请求等。\n\n### 关闭页面弹出确认弹窗\n\n```javascript\nwindow.addEventListener('beforeunload', event => {\n  // Cancel the event as stated by the standard.\n  event.preventDefault();\n  // Chrome requires returnValue to be set.\n  event.returnValue = '';\n});\n```\n\n\n\n\n### 兼容性问题\n\n- IE6中，第一个浮动到父元素边上的元素，如果含有该方向的margin值，那么margin会以双倍显示。即：浮动元素的左边距在IE6上为所设定的左边距的两倍。这个问题只会发生在浮动行的第一个浮动元素上。准确的说：应该是每一行的第一个元素都会受此影响。\n为了解决该问题，需要给浮动元素添加属性display: inline，即可解决。\n\n- iOS11中position:fixed弹出框中的input光标错位的问题  \n在弹框出现的时候给body添加fixed:\n```css\nbody{ position: fixed; width: 100%;}\n```\n  当弹框消失的时候\n```css\n$(\"body\").css(\"position\",\"relative\")\n```\n- IOS设置position:fixed，键盘遮住输入框\n\n```javascript\n// 设置一个定时器在输入框获取焦点的时候一直刷新输入框的位置，然后在失去焦点的时候清除\nclearInterval(this.resizeInputInterval);\nthis.resizeInputInterval = setInterval(() => {\n  this.input.scrollIntoView(true); // 元素的顶端将和其所在滚动区的可视区域的顶端对齐\n}, 100);\n```\n\n```javascript\nvar windheight = $(window).height();  /*未唤起键盘时当前窗口高度*/\n$(window).resize(function(){\n   var docheight = $(window).height();  /*唤起键盘时当前窗口高度*/        \n   if(docheight < windheight){            /*当唤起键盘高度小于未唤起键盘高度时执行*/\n      $(\"input\").css(\"position\",\"static\");\n   }else{\n      $(\"input\").css(\"position\",\"fixed\");\n   }           \n});\n// 或者在输入框聚焦失焦时设置position\n```\n\n### 计算机网络\n\n| OSI七层 | TCP/IP4层 | 协议或设备 |\n| ------- | --------- | --- |\n| 应用层 | 应用层  | HTTP |\n| 表示层 | 应用层  |  Telnet |\n| 会话层 | 应用层  |  SMTP, DNS |\n| 传输层 | 传输层 | TCP, UDP |\n| 网络层 | 网络层 | IP,路由器 |\n| 数据链路层 | 数据链路层 | 网桥,交换机 |\n| 物理层 | 物理层 | 网卡 |\n\n\n#### 为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\n\n这是由于服务端的LISTEN状态下的SOCKET当收到SYN报文的建立请求后。它能够把ACK和SYN（ACK起应答作用。而SYN起同步作用）放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，它只表示对方没有数据发送给你了。但服务端可能还需要再发送一些数据给客户端。所以服务端不能立即会关闭SOCKET，先发送ACK客户端，等服务器确认可以关闭了，再发送FIN报文给对方来表示它也能够关闭连接了。服务端这里的ACK报文和FIN报文多数情况下都是分开发送的。\n\nA：B 啊，我不想玩了。\nB：哦，你不想玩了啊，我知道了。\nB：A 啊，好吧，我也不玩了，拜拜。\nA：好的，拜拜。\n\n### IntersectionObserver\n\n```javascript\n//监听area出现在屏幕时做一些事件\nvar io = new IntersectionObserver(function(entries) {\n    entries.forEach(item => {\n        if(item.intersectionRatio > 0) {\n            //Appears on the viewport\n        }else {\n            //Leave in the viewport\n        }\n    });\n});\n\nio.observe(document.getElementById('area'));\n```\n\n### 异步脚本\n\n`<script src=\"script.js\"></script>`\n\n没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。\n\n`<script async src=\"script.js\"></script>`\n\n有 async，加载和渲染后续文档元素的过程将和 script.js 的加载并行（异步）。是乱序执行，不管你声明的顺序如何，只要它加载完了就会立刻执行，执行还是会堵塞文档解析。\n\n`<script defer src=\"myscript.js\"></script>`\n\n有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。会按照加载顺序执行脚本。\n\n### 文件顺序\n\n`为什么通常推荐将 CSS <link> 放置在 <head></head> 之间，而将 JS <script> 放置在 </body> 之前？你知道有哪些例外吗？`\n\n浏览器从上到下依次解析html文档。将 css 文件放到头部， css 文件可以先加载。\n避免先加载 body 内容，导致页面一开始样式错乱，然后闪烁。将 javascript 文件放到底部是因为：\n若将 javascript 文件放到 head 里面，就意味着必须等到所有的 javascript 代码都被 下载、解析和执行完成\n之后才开始呈现页面内容。这样就会造成呈现页面时出现明显的延迟，窗口一片空白。\n为避免这样的问题一般将全部 javascript 文件放到 body 元素中页面内容的后面。\n页面加载的问题，先把页面加载出来，然后再去加载效果，提高用户体验度。\n\nCSS下载不会阻塞DOM的解析，但是阻塞页面渲染。\n`<script>`与`<link>`同时在头部的话，`<script>`在上可能会更好了。因为js可能需要获取css的内容，如果`<link>`在前面的话，本来不会阻塞DOM的解析，但是js会阻塞，然后js又得等待css下载完，结果造成css和js一起阻塞DOM解析。\n\n浏览器遇到 `<script>`且没有defer或async属性的 标签时，会触发页面渲染，因而如果前面CSS资源尚未加载完毕时，浏览器会等待它加载完毕在执行脚本。\n\n### 浏览器缓存\n\nLast-Modified->If-Modified-Since\n\nEtag->If-None-Match\n\n### 输入url到页面展示过程\n\n- dns解析\n  浏览器缓存->操作系统缓存->本地host文件->路由器缓存->网络提供商缓存->顶级DNS服务器/根DNS服务器\n- TCP连接（三次握手）\n- 发送HTTP请求\n  请求头第一行：`GET /www.baidu.com HTTP/1.1`\n- 服务器处理请求\n  反向代理服务器->应用服务器\n- 服务器响应请求\n  响应头第一行：`HTTP/1.1 200 OK`\n- 浏览器解析HTML生成DOM，解析CSS生成CSSOM，执行JavaScript，样式计算，构造布局树，准备绘制列表，光栅化，合成，显示。\n  （构建dom树->构建render树->布局render树->绘制render树）\n\n  整个页面解析过程 大致是这样：\n  HTMLparser  解析dom  -> Recalculate style 解析css stylesheets -> 构建布局树 -> 布局计算 -> 创建分层树 , 创建图层-> 图层绘制成一个绘制列表 （浏览器主进程）-> （合成线程）光栅化，根据视口将图层切分成图块，最后交给GPU进程合成位图，存放在GPU内存中\n  - 连接结束（四次挥手）\n\n### 常用性能优化\n\n- 减少HTTP请求\n- 使用服务器端渲染\n- 静态资源使用cdn\n- css放头部，js放尾部\n- 使用字体图标，小的图片使用base64直接写在css\n- 缓存\n- 压缩文件\n- 懒加载\n- 按需加载\n- 减少重排回流\n- 使用requestAninationFrame代替定时器来实现动画\n\n### webpack性能优化\n\n- 使用DllPlugin动态链接库插件减少基础模块编译次数，其原理是把网页依赖的基础模块抽离出来打包到dll文件中，当需要导入的模块存在于某个dll中时，这个模块不再被打包，而是去dll中获取。原因在于dll中大多包含的是常用的第三方模块，如react、react-dom，所以只要这些模块版本不升级，就只需被编译一次。\n- 使用HappyPack开启多进程Loader转换。在整个构建流程中，最耗时的就是Loader对文件的转换操作了，而运行在Node.js之上的Webpack是单线程模型的，也就是只能一个一个文件进行处理，不能并行处理。HappyPack可以将任务分解给多个子进程，最后将结果发给主进程。JS是单线程模型，只能通过这种多进程的方式提高性能。\n- 压缩代码-JS、ES、CSS\n- 分割代码以按需加载\n\n### 箭头函数与普通函数区别\n\n- 箭头函数是匿名函数，不能作为构造函数，不能使用new\n- 箭头函数没有prototype\n- 普通函数的this非严格模式下指向window，严格模式指向undefined。箭头函数两种模式下都继承自上一层作用域的this。所以对象的方法不宜使用箭头函数，它的this是指向外层函数的，如果没有外层函数则指向全局对象。call()、apply()、bind()也不能改变箭头函数的this。\n- 箭头函数不能使用new.target和arguments，如果是套在普通函数内，则这两个都指向普通函数。\n- 对象的方法不宜使用箭头函数，它的是指向外层函数的，如果没有外层函数则指向全局对象。\n\n### encodeURI和encodeURIComponent\nencodeURI方法不会对下列字符编码  ASCII字母  数字  ~!@#$&*()=:/,;?+'\nencodeURIComponent方法不会对下列字符编码 ASCII字母  数字  ~!*()'\n所以encodeURIComponent比encodeURI编码的范围更大。实际例子来说，encodeURIComponent会把`http://`编码成`http%3A%2F%2F`而encodeURI却不会。\n\n如果你需要编码整个URL，然后需要使用这个URL，那么用encodeURI。\n当你需要编码URL中的参数的时候，那么encodeURIComponent是最好方法。\n\n### react生命周期函数\n\n- 初始化创建组件阶段：\n父组件：constructor -> componentWillMount -> render ->\n子组件：constructor -> componentWillMount -> render -> componentDidMount ->\n父组件：componentDidMount\n- 更新阶段：\n父组件：componentWillUpdate -> render ->\n子组件：componentWillReceiveProps -> componentWillUpdate -> render -> componentDidUpdate ->\n父组件：componentDidUpdate\n- 卸载阶段：\n父组件：componentWillUnmount\n子组件：componentWillUnmount\n\n### 判断数据类型\n\n```javascript\n// 使用typeof\nconsole.log(typeof bool); //boolean\nconsole.log(typeof num);//number\nconsole.log(typeof str);//string\nconsole.log(typeof und);//undefined\nconsole.log(typeof nul);//object\nconsole.log(typeof arr);//object\nconsole.log(typeof obj);//object\nconsole.log(typeof fun);//function\n\n// 使用instanceof ，即使是Boolean，Number,String数据类型也要用new，除了null和undefined\n\n// Object.prototype.toString.call,不能检测非原生构造函数的构造函数名。\nconsole.log(Object.prototype.toString.call(bool));//[object Boolean]\nconsole.log(Object.prototype.toString.call(num));//[object Number]\nconsole.log(Object.prototype.toString.call(str));//[object String]\nconsole.log(Object.prototype.toString.call(und));//[object Undefined]\nconsole.log(Object.prototype.toString.call(nul));//[object Null]\nconsole.log(Object.prototype.toString.call(arr));//[object Array]\nconsole.log(Object.prototype.toString.call(obj));//[object Object]\nconsole.log(Object.prototype.toString.call(fun));//[object Function]\n```\n\n### HTTP2\n\n- 二进制传输。  \nhttp1.x是文本传输。为了保证HTTP不受影响，那就需要在应用层（HTTP2.0）和传输层（TCP or UDP）之间增加一个二进制分帧层。在二进制分帧层上，HTTP2.0会将所有传输的信息分为更小的消息和帧，并采用二进制格式编码，其中HTTP1.x的首部信息会被封装到Headers帧，而Request Body则封装到Data帧。\n- 多路复用。  \n所谓多路复用，即在一个TCP连接中存在多个流，即可以同时发送多个请求，对端可以通过帧中的表示知道该帧属于哪个请求。在客户端，这些帧乱序发送，到对端后再根据每个帧首部的流标识符重新组装。通过该技术，可以避免HTTP旧版本的队头阻塞问题，极大提高传输性能。\n- Header压缩\n- 服务器推送\n- 更安全。  \nHTTP2.0使用了tls的拓展ALPN做为协议升级，除此之外，HTTP2.0对tls的安全性做了近一步加强，通过黑名单机制禁用了几百种不再安全的加密算法。\n\n### webpack原理\n\n1. 先解析webpack配置参数,合并shell中的输入和配置文件如webpack.config.js中的参数,最后生成配置结果;\n\n2. 注册所有配置的插件,好让插件监听webpack构建生命周期的事件节点,并作出响应;\n\n3. 从配置文件中的入口文件entry开始解析文件,构建AST,找出每个文件依赖的文件,递归下去;\n\n4. 在解析文件递归过程中根据文件类型和对应的loader配置找出合适的插件进行解析;\n\n5. 递归结束后得到每个文件的最终结果,根据entry配置生成代码块chunk;\n\n6. 输出所有chunk到文件系统","slug":"知识点总结","published":1,"updated":"2022-09-22T12:37:21.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm64c001q8hspni7tu9rj","content":"<p>常用知识点<br><a id=\"more\"></a></p>\n<h3 id=\"内置类型\"><a href=\"#内置类型\" class=\"headerlink\" title=\"内置类型\"></a>内置类型</h3><p>六个基本类型（es6新增symbol）和引用类型</p>\n<h3 id=\"作用域与闭包\"><a href=\"#作用域与闭包\" class=\"headerlink\" title=\"作用域与闭包\"></a>作用域与闭包</h3><h3 id=\"原型和继承\"><a href=\"#原型和继承\" class=\"headerlink\" title=\"原型和继承\"></a>原型和继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟根据原型链查找属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">getProp</span>(<span class=\"params\">obj, prop</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> proto = obj;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(proto &amp;&amp; proto[prop] === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    proto = proto.__proto__;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> proto === <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : obj[prop];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模拟new过程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myNew</span>(<span class=\"params\">constructor, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\">  obj.__proto__ = <span class=\"keyword\">constructor</span>.prototype;</span><br><span class=\"line\">  const ret = <span class=\"keyword\">constructor</span>.call(obj, ...args);</span><br><span class=\"line\">  return ret instanceof Object ? ret : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"es5和es6继承区别：\"><a href=\"#es5和es6继承区别：\" class=\"headerlink\" title=\"es5和es6继承区别：\"></a>es5和es6继承区别：</h4><p>es5是先创建子类的实例对象，然后通过Parent.call(this)把父类的属性添加进子实例的this。<br>es6是先创建父类的实例对象this，用super()把该this添加到子类，子类原本是没有this，所以不能在super()前使用this。<br>es5不能继承原生构造函数的属性，如一个构造函数继承自Array，但也没有length属性。<br>es6可以继承原生构造函数的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeObjProperty</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// o这个形参实际可以写成var o = webSite</span></span><br><span class=\"line\">  o.siteUrl = <span class=\"string\">\"http://www.baidu.com\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 指向新的对象了</span></span><br><span class=\"line\">  o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\">  o.siteUrl = <span class=\"string\">\"http://www.google.com\"</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">let</span> webSite = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">changeObjProperty(webSite);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(webSite.siteUrl);</span><br><span class=\"line\"><span class=\"comment\">// \"http://www.baidu.com\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"浏览器和Node-事件循环的区别\"><a href=\"#浏览器和Node-事件循环的区别\" class=\"headerlink\" title=\"浏览器和Node 事件循环的区别\"></a>浏览器和Node 事件循环的区别</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'children2'</span>)</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'children2-1'</span>)&#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'children3'</span>)</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'children3-1'</span>)&#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'children1'</span>)&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上代码在node11以下版本的执行结果(先执行所有的宏任务，再执行微任务)</span></span><br><span class=\"line\"><span class=\"comment\">// start</span></span><br><span class=\"line\"><span class=\"comment\">// end</span></span><br><span class=\"line\"><span class=\"comment\">// children1</span></span><br><span class=\"line\"><span class=\"comment\">// children2</span></span><br><span class=\"line\"><span class=\"comment\">// children3</span></span><br><span class=\"line\"><span class=\"comment\">// children2-1</span></span><br><span class=\"line\"><span class=\"comment\">// children3-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上代码在node11及浏览器的执行结果(顺序执行宏任务和微任务)</span></span><br><span class=\"line\"><span class=\"comment\">// start</span></span><br><span class=\"line\"><span class=\"comment\">// end</span></span><br><span class=\"line\"><span class=\"comment\">// children1</span></span><br><span class=\"line\"><span class=\"comment\">// children2</span></span><br><span class=\"line\"><span class=\"comment\">// children2-1</span></span><br><span class=\"line\"><span class=\"comment\">// children3</span></span><br><span class=\"line\"><span class=\"comment\">// children3-1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"createObjectURL\"><a href=\"#createObjectURL\" class=\"headerlink\" title=\"createObjectURL\"></a>createObjectURL</h3><p>使用window.URL.createObjectURL预览图片，在图片加载成功后需要清除使用的内存window.URL.revokeObjectURL(src);</p>\n<h3 id=\"白屏时间和首屏时间\"><a href=\"#白屏时间和首屏时间\" class=\"headerlink\" title=\"白屏时间和首屏时间\"></a>白屏时间和首屏时间</h3><p>白屏是指浏览器从响应用户输入网址地址，到浏览器开始显示内容的时间。<br>首屏时间是指浏览器从响应用户输入网络地址，到首屏内容渲染完成的时间。<br>影响白屏时间的因素：网络，服务端性能，前端页面结构设计。<br>影响首屏时间的因素：白屏时间，资源下载执行时间。</p>\n<p>简单的计算白屏时间：在<code>window.onload</code>里执行<code>new Date() - performance.timing.navigationStart</code>，或者获取<code>performance.now()</code></p>\n<p><code>performance.timing.navigationStart + performance.now()</code> 约等于 <code>Date.now()</code>。</p>\n<p><code>performance.getEntries()</code>方法可以查询页面内加载的所有资源的开始时间、耗时等信息，包括css、js、图片、字体文件、异步请求等。</p>\n<h3 id=\"关闭页面弹出确认弹窗\"><a href=\"#关闭页面弹出确认弹窗\" class=\"headerlink\" title=\"关闭页面弹出确认弹窗\"></a>关闭页面弹出确认弹窗</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'beforeunload'</span>, event =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Cancel the event as stated by the standard.</span></span><br><span class=\"line\">  event.preventDefault();</span><br><span class=\"line\">  <span class=\"comment\">// Chrome requires returnValue to be set.</span></span><br><span class=\"line\">  event.returnValue = <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"兼容性问题\"><a href=\"#兼容性问题\" class=\"headerlink\" title=\"兼容性问题\"></a>兼容性问题</h3><ul>\n<li><p>IE6中，第一个浮动到父元素边上的元素，如果含有该方向的margin值，那么margin会以双倍显示。即：浮动元素的左边距在IE6上为所设定的左边距的两倍。这个问题只会发生在浮动行的第一个浮动元素上。准确的说：应该是每一行的第一个元素都会受此影响。<br>为了解决该问题，需要给浮动元素添加属性display: inline，即可解决。</p>\n</li>\n<li><p>iOS11中position:fixed弹出框中的input光标错位的问题<br>在弹框出现的时候给body添加fixed:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123; <span class=\"attribute\">position</span>: fixed; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>当弹框消失的时候</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(\"body\").css(\"position\",\"relative\")</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>IOS设置position:fixed，键盘遮住输入框</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置一个定时器在输入框获取焦点的时候一直刷新输入框的位置，然后在失去焦点的时候清除</span></span><br><span class=\"line\">clearInterval(<span class=\"keyword\">this</span>.resizeInputInterval);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.resizeInputInterval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.input.scrollIntoView(<span class=\"literal\">true</span>); <span class=\"comment\">// 元素的顶端将和其所在滚动区的可视区域的顶端对齐</span></span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> windheight = $(<span class=\"built_in\">window</span>).height();  <span class=\"comment\">/*未唤起键盘时当前窗口高度*/</span></span><br><span class=\"line\">$(<span class=\"built_in\">window</span>).resize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> docheight = $(<span class=\"built_in\">window</span>).height();  <span class=\"comment\">/*唤起键盘时当前窗口高度*/</span>        </span><br><span class=\"line\">   <span class=\"keyword\">if</span>(docheight &lt; windheight)&#123;            <span class=\"comment\">/*当唤起键盘高度小于未唤起键盘高度时执行*/</span></span><br><span class=\"line\">      $(<span class=\"string\">\"input\"</span>).css(<span class=\"string\">\"position\"</span>,<span class=\"string\">\"static\"</span>);</span><br><span class=\"line\">   &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">\"input\"</span>).css(<span class=\"string\">\"position\"</span>,<span class=\"string\">\"fixed\"</span>);</span><br><span class=\"line\">   &#125;           </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 或者在输入框聚焦失焦时设置position</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h3><table>\n<thead>\n<tr>\n<th>OSI七层</th>\n<th>TCP/IP4层</th>\n<th>协议或设备</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层</td>\n<td>应用层</td>\n<td>HTTP</td>\n</tr>\n<tr>\n<td>表示层</td>\n<td>应用层</td>\n<td>Telnet</td>\n</tr>\n<tr>\n<td>会话层</td>\n<td>应用层</td>\n<td>SMTP, DNS</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>传输层</td>\n<td>TCP, UDP</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>网络层</td>\n<td>IP,路由器</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>数据链路层</td>\n<td>网桥,交换机</td>\n</tr>\n<tr>\n<td>物理层</td>\n<td>物理层</td>\n<td>网卡</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\"><a href=\"#为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\" class=\"headerlink\" title=\"为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\"></a>为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？</h4><p>这是由于服务端的LISTEN状态下的SOCKET当收到SYN报文的建立请求后。它能够把ACK和SYN（ACK起应答作用。而SYN起同步作用）放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，它只表示对方没有数据发送给你了。但服务端可能还需要再发送一些数据给客户端。所以服务端不能立即会关闭SOCKET，先发送ACK客户端，等服务器确认可以关闭了，再发送FIN报文给对方来表示它也能够关闭连接了。服务端这里的ACK报文和FIN报文多数情况下都是分开发送的。</p>\n<p>A：B 啊，我不想玩了。<br>B：哦，你不想玩了啊，我知道了。<br>B：A 啊，好吧，我也不玩了，拜拜。<br>A：好的，拜拜。</p>\n<h3 id=\"IntersectionObserver\"><a href=\"#IntersectionObserver\" class=\"headerlink\" title=\"IntersectionObserver\"></a>IntersectionObserver</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//监听area出现在屏幕时做一些事件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> io = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">entries</span>) </span>&#123;</span><br><span class=\"line\">    entries.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(item.intersectionRatio &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Appears on the viewport</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Leave in the viewport</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">io.observe(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'area'</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"异步脚本\"><a href=\"#异步脚本\" class=\"headerlink\" title=\"异步脚本\"></a>异步脚本</h3><p><code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。</p>\n<p><code>&lt;script async src=&quot;script.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>有 async，加载和渲染后续文档元素的过程将和 script.js 的加载并行（异步）。是乱序执行，不管你声明的顺序如何，只要它加载完了就会立刻执行，执行还是会堵塞文档解析。</p>\n<p><code>&lt;script defer src=&quot;myscript.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。会按照加载顺序执行脚本。</p>\n<h3 id=\"文件顺序\"><a href=\"#文件顺序\" class=\"headerlink\" title=\"文件顺序\"></a>文件顺序</h3><p><code>为什么通常推荐将 CSS &lt;link&gt; 放置在 &lt;head&gt;&lt;/head&gt; 之间，而将 JS &lt;script&gt; 放置在 &lt;/body&gt; 之前？你知道有哪些例外吗？</code></p>\n<p>浏览器从上到下依次解析html文档。将 css 文件放到头部， css 文件可以先加载。<br>避免先加载 body 内容，导致页面一开始样式错乱，然后闪烁。将 javascript 文件放到底部是因为：<br>若将 javascript 文件放到 head 里面，就意味着必须等到所有的 javascript 代码都被 下载、解析和执行完成<br>之后才开始呈现页面内容。这样就会造成呈现页面时出现明显的延迟，窗口一片空白。<br>为避免这样的问题一般将全部 javascript 文件放到 body 元素中页面内容的后面。<br>页面加载的问题，先把页面加载出来，然后再去加载效果，提高用户体验度。</p>\n<p>CSS下载不会阻塞DOM的解析，但是阻塞页面渲染。<br><code>&lt;script&gt;</code>与<code>&lt;link&gt;</code>同时在头部的话，<code>&lt;script&gt;</code>在上可能会更好了。因为js可能需要获取css的内容，如果<code>&lt;link&gt;</code>在前面的话，本来不会阻塞DOM的解析，但是js会阻塞，然后js又得等待css下载完，结果造成css和js一起阻塞DOM解析。</p>\n<p>浏览器遇到 <code>&lt;script&gt;</code>且没有defer或async属性的 标签时，会触发页面渲染，因而如果前面CSS资源尚未加载完毕时，浏览器会等待它加载完毕在执行脚本。</p>\n<h3 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h3><p>Last-Modified-&gt;If-Modified-Since</p>\n<p>Etag-&gt;If-None-Match</p>\n<h3 id=\"输入url到页面展示过程\"><a href=\"#输入url到页面展示过程\" class=\"headerlink\" title=\"输入url到页面展示过程\"></a>输入url到页面展示过程</h3><ul>\n<li>dns解析<br>浏览器缓存-&gt;操作系统缓存-&gt;本地host文件-&gt;路由器缓存-&gt;网络提供商缓存-&gt;顶级DNS服务器/根DNS服务器</li>\n<li>TCP连接（三次握手）</li>\n<li>发送HTTP请求<br>请求头第一行：<code>GET /www.baidu.com HTTP/1.1</code></li>\n<li>服务器处理请求<br>反向代理服务器-&gt;应用服务器</li>\n<li>服务器响应请求<br>响应头第一行：<code>HTTP/1.1 200 OK</code></li>\n<li><p>浏览器解析HTML生成DOM，解析CSS生成CSSOM，执行JavaScript，样式计算，构造布局树，准备绘制列表，光栅化，合成，显示。<br>（构建dom树-&gt;构建render树-&gt;布局render树-&gt;绘制render树）</p>\n<p>整个页面解析过程 大致是这样：<br>HTMLparser  解析dom  -&gt; Recalculate style 解析css stylesheets -&gt; 构建布局树 -&gt; 布局计算 -&gt; 创建分层树 , 创建图层-&gt; 图层绘制成一个绘制列表 （浏览器主进程）-&gt; （合成线程）光栅化，根据视口将图层切分成图块，最后交给GPU进程合成位图，存放在GPU内存中</p>\n<ul>\n<li>连接结束（四次挥手）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常用性能优化\"><a href=\"#常用性能优化\" class=\"headerlink\" title=\"常用性能优化\"></a>常用性能优化</h3><ul>\n<li>减少HTTP请求</li>\n<li>使用服务器端渲染</li>\n<li>静态资源使用cdn</li>\n<li>css放头部，js放尾部</li>\n<li>使用字体图标，小的图片使用base64直接写在css</li>\n<li>缓存</li>\n<li>压缩文件</li>\n<li>懒加载</li>\n<li>按需加载</li>\n<li>减少重排回流</li>\n<li>使用requestAninationFrame代替定时器来实现动画</li>\n</ul>\n<h3 id=\"webpack性能优化\"><a href=\"#webpack性能优化\" class=\"headerlink\" title=\"webpack性能优化\"></a>webpack性能优化</h3><ul>\n<li>使用DllPlugin动态链接库插件减少基础模块编译次数，其原理是把网页依赖的基础模块抽离出来打包到dll文件中，当需要导入的模块存在于某个dll中时，这个模块不再被打包，而是去dll中获取。原因在于dll中大多包含的是常用的第三方模块，如react、react-dom，所以只要这些模块版本不升级，就只需被编译一次。</li>\n<li>使用HappyPack开启多进程Loader转换。在整个构建流程中，最耗时的就是Loader对文件的转换操作了，而运行在Node.js之上的Webpack是单线程模型的，也就是只能一个一个文件进行处理，不能并行处理。HappyPack可以将任务分解给多个子进程，最后将结果发给主进程。JS是单线程模型，只能通过这种多进程的方式提高性能。</li>\n<li>压缩代码-JS、ES、CSS</li>\n<li>分割代码以按需加载</li>\n</ul>\n<h3 id=\"箭头函数与普通函数区别\"><a href=\"#箭头函数与普通函数区别\" class=\"headerlink\" title=\"箭头函数与普通函数区别\"></a>箭头函数与普通函数区别</h3><ul>\n<li>箭头函数是匿名函数，不能作为构造函数，不能使用new</li>\n<li>箭头函数没有prototype</li>\n<li>普通函数的this非严格模式下指向window，严格模式指向undefined。箭头函数两种模式下都继承自上一层作用域的this。所以对象的方法不宜使用箭头函数，它的this是指向外层函数的，如果没有外层函数则指向全局对象。call()、apply()、bind()也不能改变箭头函数的this。</li>\n<li>箭头函数不能使用new.target和arguments，如果是套在普通函数内，则这两个都指向普通函数。</li>\n<li>对象的方法不宜使用箭头函数，它的是指向外层函数的，如果没有外层函数则指向全局对象。</li>\n</ul>\n<h3 id=\"encodeURI和encodeURIComponent\"><a href=\"#encodeURI和encodeURIComponent\" class=\"headerlink\" title=\"encodeURI和encodeURIComponent\"></a>encodeURI和encodeURIComponent</h3><p>encodeURI方法不会对下列字符编码  ASCII字母  数字  ~!@#$&amp;<em>()=:/,;?+’<br>encodeURIComponent方法不会对下列字符编码 ASCII字母  数字  ~!</em>()’<br>所以encodeURIComponent比encodeURI编码的范围更大。实际例子来说，encodeURIComponent会把<code>http://</code>编码成<code>http%3A%2F%2F</code>而encodeURI却不会。</p>\n<p>如果你需要编码整个URL，然后需要使用这个URL，那么用encodeURI。<br>当你需要编码URL中的参数的时候，那么encodeURIComponent是最好方法。</p>\n<h3 id=\"react生命周期函数\"><a href=\"#react生命周期函数\" class=\"headerlink\" title=\"react生命周期函数\"></a>react生命周期函数</h3><ul>\n<li>初始化创建组件阶段：<br>父组件：constructor -&gt; componentWillMount -&gt; render -&gt;<br>子组件：constructor -&gt; componentWillMount -&gt; render -&gt; componentDidMount -&gt;<br>父组件：componentDidMount</li>\n<li>更新阶段：<br>父组件：componentWillUpdate -&gt; render -&gt;<br>子组件：componentWillReceiveProps -&gt; componentWillUpdate -&gt; render -&gt; componentDidUpdate -&gt;<br>父组件：componentDidUpdate</li>\n<li>卸载阶段：<br>父组件：componentWillUnmount<br>子组件：componentWillUnmount</li>\n</ul>\n<h3 id=\"判断数据类型\"><a href=\"#判断数据类型\" class=\"headerlink\" title=\"判断数据类型\"></a>判断数据类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用typeof</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> bool); <span class=\"comment\">//boolean</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> num);<span class=\"comment\">//number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> str);<span class=\"comment\">//string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> und);<span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> nul);<span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> arr);<span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> obj);<span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> fun);<span class=\"comment\">//function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用instanceof ，即使是Boolean，Number,String数据类型也要用new，除了null和undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object.prototype.toString.call,不能检测非原生构造函数的构造函数名。</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(bool));<span class=\"comment\">//[object Boolean]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(num));<span class=\"comment\">//[object Number]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(str));<span class=\"comment\">//[object String]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(und));<span class=\"comment\">//[object Undefined]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(nul));<span class=\"comment\">//[object Null]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(arr));<span class=\"comment\">//[object Array]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(obj));<span class=\"comment\">//[object Object]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(fun));<span class=\"comment\">//[object Function]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"HTTP2\"><a href=\"#HTTP2\" class=\"headerlink\" title=\"HTTP2\"></a>HTTP2</h3><ul>\n<li>二进制传输。<br>http1.x是文本传输。为了保证HTTP不受影响，那就需要在应用层（HTTP2.0）和传输层（TCP or UDP）之间增加一个二进制分帧层。在二进制分帧层上，HTTP2.0会将所有传输的信息分为更小的消息和帧，并采用二进制格式编码，其中HTTP1.x的首部信息会被封装到Headers帧，而Request Body则封装到Data帧。</li>\n<li>多路复用。<br>所谓多路复用，即在一个TCP连接中存在多个流，即可以同时发送多个请求，对端可以通过帧中的表示知道该帧属于哪个请求。在客户端，这些帧乱序发送，到对端后再根据每个帧首部的流标识符重新组装。通过该技术，可以避免HTTP旧版本的队头阻塞问题，极大提高传输性能。</li>\n<li>Header压缩</li>\n<li>服务器推送</li>\n<li>更安全。<br>HTTP2.0使用了tls的拓展ALPN做为协议升级，除此之外，HTTP2.0对tls的安全性做了近一步加强，通过黑名单机制禁用了几百种不再安全的加密算法。</li>\n</ul>\n<h3 id=\"webpack原理\"><a href=\"#webpack原理\" class=\"headerlink\" title=\"webpack原理\"></a>webpack原理</h3><ol>\n<li><p>先解析webpack配置参数,合并shell中的输入和配置文件如webpack.config.js中的参数,最后生成配置结果;</p>\n</li>\n<li><p>注册所有配置的插件,好让插件监听webpack构建生命周期的事件节点,并作出响应;</p>\n</li>\n<li><p>从配置文件中的入口文件entry开始解析文件,构建AST,找出每个文件依赖的文件,递归下去;</p>\n</li>\n<li><p>在解析文件递归过程中根据文件类型和对应的loader配置找出合适的插件进行解析;</p>\n</li>\n<li><p>递归结束后得到每个文件的最终结果,根据entry配置生成代码块chunk;</p>\n</li>\n<li><p>输出所有chunk到文件系统</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>常用知识点<br>","more":"</p>\n<h3 id=\"内置类型\"><a href=\"#内置类型\" class=\"headerlink\" title=\"内置类型\"></a>内置类型</h3><p>六个基本类型（es6新增symbol）和引用类型</p>\n<h3 id=\"作用域与闭包\"><a href=\"#作用域与闭包\" class=\"headerlink\" title=\"作用域与闭包\"></a>作用域与闭包</h3><h3 id=\"原型和继承\"><a href=\"#原型和继承\" class=\"headerlink\" title=\"原型和继承\"></a>原型和继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟根据原型链查找属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">getProp</span>(<span class=\"params\">obj, prop</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> proto = obj;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(proto &amp;&amp; proto[prop] === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    proto = proto.__proto__;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> proto === <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : obj[prop];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模拟new过程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myNew</span>(<span class=\"params\">constructor, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\">  obj.__proto__ = <span class=\"keyword\">constructor</span>.prototype;</span><br><span class=\"line\">  const ret = <span class=\"keyword\">constructor</span>.call(obj, ...args);</span><br><span class=\"line\">  return ret instanceof Object ? ret : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"es5和es6继承区别：\"><a href=\"#es5和es6继承区别：\" class=\"headerlink\" title=\"es5和es6继承区别：\"></a>es5和es6继承区别：</h4><p>es5是先创建子类的实例对象，然后通过Parent.call(this)把父类的属性添加进子实例的this。<br>es6是先创建父类的实例对象this，用super()把该this添加到子类，子类原本是没有this，所以不能在super()前使用this。<br>es5不能继承原生构造函数的属性，如一个构造函数继承自Array，但也没有length属性。<br>es6可以继承原生构造函数的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeObjProperty</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// o这个形参实际可以写成var o = webSite</span></span><br><span class=\"line\">  o.siteUrl = <span class=\"string\">\"http://www.baidu.com\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 指向新的对象了</span></span><br><span class=\"line\">  o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\">  o.siteUrl = <span class=\"string\">\"http://www.google.com\"</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">let</span> webSite = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">changeObjProperty(webSite);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(webSite.siteUrl);</span><br><span class=\"line\"><span class=\"comment\">// \"http://www.baidu.com\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"浏览器和Node-事件循环的区别\"><a href=\"#浏览器和Node-事件循环的区别\" class=\"headerlink\" title=\"浏览器和Node 事件循环的区别\"></a>浏览器和Node 事件循环的区别</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'children2'</span>)</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'children2-1'</span>)&#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'children3'</span>)</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'children3-1'</span>)&#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'children1'</span>)&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上代码在node11以下版本的执行结果(先执行所有的宏任务，再执行微任务)</span></span><br><span class=\"line\"><span class=\"comment\">// start</span></span><br><span class=\"line\"><span class=\"comment\">// end</span></span><br><span class=\"line\"><span class=\"comment\">// children1</span></span><br><span class=\"line\"><span class=\"comment\">// children2</span></span><br><span class=\"line\"><span class=\"comment\">// children3</span></span><br><span class=\"line\"><span class=\"comment\">// children2-1</span></span><br><span class=\"line\"><span class=\"comment\">// children3-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上代码在node11及浏览器的执行结果(顺序执行宏任务和微任务)</span></span><br><span class=\"line\"><span class=\"comment\">// start</span></span><br><span class=\"line\"><span class=\"comment\">// end</span></span><br><span class=\"line\"><span class=\"comment\">// children1</span></span><br><span class=\"line\"><span class=\"comment\">// children2</span></span><br><span class=\"line\"><span class=\"comment\">// children2-1</span></span><br><span class=\"line\"><span class=\"comment\">// children3</span></span><br><span class=\"line\"><span class=\"comment\">// children3-1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"createObjectURL\"><a href=\"#createObjectURL\" class=\"headerlink\" title=\"createObjectURL\"></a>createObjectURL</h3><p>使用window.URL.createObjectURL预览图片，在图片加载成功后需要清除使用的内存window.URL.revokeObjectURL(src);</p>\n<h3 id=\"白屏时间和首屏时间\"><a href=\"#白屏时间和首屏时间\" class=\"headerlink\" title=\"白屏时间和首屏时间\"></a>白屏时间和首屏时间</h3><p>白屏是指浏览器从响应用户输入网址地址，到浏览器开始显示内容的时间。<br>首屏时间是指浏览器从响应用户输入网络地址，到首屏内容渲染完成的时间。<br>影响白屏时间的因素：网络，服务端性能，前端页面结构设计。<br>影响首屏时间的因素：白屏时间，资源下载执行时间。</p>\n<p>简单的计算白屏时间：在<code>window.onload</code>里执行<code>new Date() - performance.timing.navigationStart</code>，或者获取<code>performance.now()</code></p>\n<p><code>performance.timing.navigationStart + performance.now()</code> 约等于 <code>Date.now()</code>。</p>\n<p><code>performance.getEntries()</code>方法可以查询页面内加载的所有资源的开始时间、耗时等信息，包括css、js、图片、字体文件、异步请求等。</p>\n<h3 id=\"关闭页面弹出确认弹窗\"><a href=\"#关闭页面弹出确认弹窗\" class=\"headerlink\" title=\"关闭页面弹出确认弹窗\"></a>关闭页面弹出确认弹窗</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'beforeunload'</span>, event =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Cancel the event as stated by the standard.</span></span><br><span class=\"line\">  event.preventDefault();</span><br><span class=\"line\">  <span class=\"comment\">// Chrome requires returnValue to be set.</span></span><br><span class=\"line\">  event.returnValue = <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"兼容性问题\"><a href=\"#兼容性问题\" class=\"headerlink\" title=\"兼容性问题\"></a>兼容性问题</h3><ul>\n<li><p>IE6中，第一个浮动到父元素边上的元素，如果含有该方向的margin值，那么margin会以双倍显示。即：浮动元素的左边距在IE6上为所设定的左边距的两倍。这个问题只会发生在浮动行的第一个浮动元素上。准确的说：应该是每一行的第一个元素都会受此影响。<br>为了解决该问题，需要给浮动元素添加属性display: inline，即可解决。</p>\n</li>\n<li><p>iOS11中position:fixed弹出框中的input光标错位的问题<br>在弹框出现的时候给body添加fixed:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123; <span class=\"attribute\">position</span>: fixed; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>当弹框消失的时候</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(\"body\").css(\"position\",\"relative\")</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>IOS设置position:fixed，键盘遮住输入框</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置一个定时器在输入框获取焦点的时候一直刷新输入框的位置，然后在失去焦点的时候清除</span></span><br><span class=\"line\">clearInterval(<span class=\"keyword\">this</span>.resizeInputInterval);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.resizeInputInterval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.input.scrollIntoView(<span class=\"literal\">true</span>); <span class=\"comment\">// 元素的顶端将和其所在滚动区的可视区域的顶端对齐</span></span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> windheight = $(<span class=\"built_in\">window</span>).height();  <span class=\"comment\">/*未唤起键盘时当前窗口高度*/</span></span><br><span class=\"line\">$(<span class=\"built_in\">window</span>).resize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> docheight = $(<span class=\"built_in\">window</span>).height();  <span class=\"comment\">/*唤起键盘时当前窗口高度*/</span>        </span><br><span class=\"line\">   <span class=\"keyword\">if</span>(docheight &lt; windheight)&#123;            <span class=\"comment\">/*当唤起键盘高度小于未唤起键盘高度时执行*/</span></span><br><span class=\"line\">      $(<span class=\"string\">\"input\"</span>).css(<span class=\"string\">\"position\"</span>,<span class=\"string\">\"static\"</span>);</span><br><span class=\"line\">   &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">\"input\"</span>).css(<span class=\"string\">\"position\"</span>,<span class=\"string\">\"fixed\"</span>);</span><br><span class=\"line\">   &#125;           </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 或者在输入框聚焦失焦时设置position</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h3><table>\n<thead>\n<tr>\n<th>OSI七层</th>\n<th>TCP/IP4层</th>\n<th>协议或设备</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层</td>\n<td>应用层</td>\n<td>HTTP</td>\n</tr>\n<tr>\n<td>表示层</td>\n<td>应用层</td>\n<td>Telnet</td>\n</tr>\n<tr>\n<td>会话层</td>\n<td>应用层</td>\n<td>SMTP, DNS</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>传输层</td>\n<td>TCP, UDP</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>网络层</td>\n<td>IP,路由器</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>数据链路层</td>\n<td>网桥,交换机</td>\n</tr>\n<tr>\n<td>物理层</td>\n<td>物理层</td>\n<td>网卡</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\"><a href=\"#为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\" class=\"headerlink\" title=\"为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\"></a>为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？</h4><p>这是由于服务端的LISTEN状态下的SOCKET当收到SYN报文的建立请求后。它能够把ACK和SYN（ACK起应答作用。而SYN起同步作用）放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，它只表示对方没有数据发送给你了。但服务端可能还需要再发送一些数据给客户端。所以服务端不能立即会关闭SOCKET，先发送ACK客户端，等服务器确认可以关闭了，再发送FIN报文给对方来表示它也能够关闭连接了。服务端这里的ACK报文和FIN报文多数情况下都是分开发送的。</p>\n<p>A：B 啊，我不想玩了。<br>B：哦，你不想玩了啊，我知道了。<br>B：A 啊，好吧，我也不玩了，拜拜。<br>A：好的，拜拜。</p>\n<h3 id=\"IntersectionObserver\"><a href=\"#IntersectionObserver\" class=\"headerlink\" title=\"IntersectionObserver\"></a>IntersectionObserver</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//监听area出现在屏幕时做一些事件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> io = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">entries</span>) </span>&#123;</span><br><span class=\"line\">    entries.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(item.intersectionRatio &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Appears on the viewport</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Leave in the viewport</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">io.observe(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'area'</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"异步脚本\"><a href=\"#异步脚本\" class=\"headerlink\" title=\"异步脚本\"></a>异步脚本</h3><p><code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。</p>\n<p><code>&lt;script async src=&quot;script.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>有 async，加载和渲染后续文档元素的过程将和 script.js 的加载并行（异步）。是乱序执行，不管你声明的顺序如何，只要它加载完了就会立刻执行，执行还是会堵塞文档解析。</p>\n<p><code>&lt;script defer src=&quot;myscript.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。会按照加载顺序执行脚本。</p>\n<h3 id=\"文件顺序\"><a href=\"#文件顺序\" class=\"headerlink\" title=\"文件顺序\"></a>文件顺序</h3><p><code>为什么通常推荐将 CSS &lt;link&gt; 放置在 &lt;head&gt;&lt;/head&gt; 之间，而将 JS &lt;script&gt; 放置在 &lt;/body&gt; 之前？你知道有哪些例外吗？</code></p>\n<p>浏览器从上到下依次解析html文档。将 css 文件放到头部， css 文件可以先加载。<br>避免先加载 body 内容，导致页面一开始样式错乱，然后闪烁。将 javascript 文件放到底部是因为：<br>若将 javascript 文件放到 head 里面，就意味着必须等到所有的 javascript 代码都被 下载、解析和执行完成<br>之后才开始呈现页面内容。这样就会造成呈现页面时出现明显的延迟，窗口一片空白。<br>为避免这样的问题一般将全部 javascript 文件放到 body 元素中页面内容的后面。<br>页面加载的问题，先把页面加载出来，然后再去加载效果，提高用户体验度。</p>\n<p>CSS下载不会阻塞DOM的解析，但是阻塞页面渲染。<br><code>&lt;script&gt;</code>与<code>&lt;link&gt;</code>同时在头部的话，<code>&lt;script&gt;</code>在上可能会更好了。因为js可能需要获取css的内容，如果<code>&lt;link&gt;</code>在前面的话，本来不会阻塞DOM的解析，但是js会阻塞，然后js又得等待css下载完，结果造成css和js一起阻塞DOM解析。</p>\n<p>浏览器遇到 <code>&lt;script&gt;</code>且没有defer或async属性的 标签时，会触发页面渲染，因而如果前面CSS资源尚未加载完毕时，浏览器会等待它加载完毕在执行脚本。</p>\n<h3 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h3><p>Last-Modified-&gt;If-Modified-Since</p>\n<p>Etag-&gt;If-None-Match</p>\n<h3 id=\"输入url到页面展示过程\"><a href=\"#输入url到页面展示过程\" class=\"headerlink\" title=\"输入url到页面展示过程\"></a>输入url到页面展示过程</h3><ul>\n<li>dns解析<br>浏览器缓存-&gt;操作系统缓存-&gt;本地host文件-&gt;路由器缓存-&gt;网络提供商缓存-&gt;顶级DNS服务器/根DNS服务器</li>\n<li>TCP连接（三次握手）</li>\n<li>发送HTTP请求<br>请求头第一行：<code>GET /www.baidu.com HTTP/1.1</code></li>\n<li>服务器处理请求<br>反向代理服务器-&gt;应用服务器</li>\n<li>服务器响应请求<br>响应头第一行：<code>HTTP/1.1 200 OK</code></li>\n<li><p>浏览器解析HTML生成DOM，解析CSS生成CSSOM，执行JavaScript，样式计算，构造布局树，准备绘制列表，光栅化，合成，显示。<br>（构建dom树-&gt;构建render树-&gt;布局render树-&gt;绘制render树）</p>\n<p>整个页面解析过程 大致是这样：<br>HTMLparser  解析dom  -&gt; Recalculate style 解析css stylesheets -&gt; 构建布局树 -&gt; 布局计算 -&gt; 创建分层树 , 创建图层-&gt; 图层绘制成一个绘制列表 （浏览器主进程）-&gt; （合成线程）光栅化，根据视口将图层切分成图块，最后交给GPU进程合成位图，存放在GPU内存中</p>\n<ul>\n<li>连接结束（四次挥手）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常用性能优化\"><a href=\"#常用性能优化\" class=\"headerlink\" title=\"常用性能优化\"></a>常用性能优化</h3><ul>\n<li>减少HTTP请求</li>\n<li>使用服务器端渲染</li>\n<li>静态资源使用cdn</li>\n<li>css放头部，js放尾部</li>\n<li>使用字体图标，小的图片使用base64直接写在css</li>\n<li>缓存</li>\n<li>压缩文件</li>\n<li>懒加载</li>\n<li>按需加载</li>\n<li>减少重排回流</li>\n<li>使用requestAninationFrame代替定时器来实现动画</li>\n</ul>\n<h3 id=\"webpack性能优化\"><a href=\"#webpack性能优化\" class=\"headerlink\" title=\"webpack性能优化\"></a>webpack性能优化</h3><ul>\n<li>使用DllPlugin动态链接库插件减少基础模块编译次数，其原理是把网页依赖的基础模块抽离出来打包到dll文件中，当需要导入的模块存在于某个dll中时，这个模块不再被打包，而是去dll中获取。原因在于dll中大多包含的是常用的第三方模块，如react、react-dom，所以只要这些模块版本不升级，就只需被编译一次。</li>\n<li>使用HappyPack开启多进程Loader转换。在整个构建流程中，最耗时的就是Loader对文件的转换操作了，而运行在Node.js之上的Webpack是单线程模型的，也就是只能一个一个文件进行处理，不能并行处理。HappyPack可以将任务分解给多个子进程，最后将结果发给主进程。JS是单线程模型，只能通过这种多进程的方式提高性能。</li>\n<li>压缩代码-JS、ES、CSS</li>\n<li>分割代码以按需加载</li>\n</ul>\n<h3 id=\"箭头函数与普通函数区别\"><a href=\"#箭头函数与普通函数区别\" class=\"headerlink\" title=\"箭头函数与普通函数区别\"></a>箭头函数与普通函数区别</h3><ul>\n<li>箭头函数是匿名函数，不能作为构造函数，不能使用new</li>\n<li>箭头函数没有prototype</li>\n<li>普通函数的this非严格模式下指向window，严格模式指向undefined。箭头函数两种模式下都继承自上一层作用域的this。所以对象的方法不宜使用箭头函数，它的this是指向外层函数的，如果没有外层函数则指向全局对象。call()、apply()、bind()也不能改变箭头函数的this。</li>\n<li>箭头函数不能使用new.target和arguments，如果是套在普通函数内，则这两个都指向普通函数。</li>\n<li>对象的方法不宜使用箭头函数，它的是指向外层函数的，如果没有外层函数则指向全局对象。</li>\n</ul>\n<h3 id=\"encodeURI和encodeURIComponent\"><a href=\"#encodeURI和encodeURIComponent\" class=\"headerlink\" title=\"encodeURI和encodeURIComponent\"></a>encodeURI和encodeURIComponent</h3><p>encodeURI方法不会对下列字符编码  ASCII字母  数字  ~!@#$&amp;<em>()=:/,;?+’<br>encodeURIComponent方法不会对下列字符编码 ASCII字母  数字  ~!</em>()’<br>所以encodeURIComponent比encodeURI编码的范围更大。实际例子来说，encodeURIComponent会把<code>http://</code>编码成<code>http%3A%2F%2F</code>而encodeURI却不会。</p>\n<p>如果你需要编码整个URL，然后需要使用这个URL，那么用encodeURI。<br>当你需要编码URL中的参数的时候，那么encodeURIComponent是最好方法。</p>\n<h3 id=\"react生命周期函数\"><a href=\"#react生命周期函数\" class=\"headerlink\" title=\"react生命周期函数\"></a>react生命周期函数</h3><ul>\n<li>初始化创建组件阶段：<br>父组件：constructor -&gt; componentWillMount -&gt; render -&gt;<br>子组件：constructor -&gt; componentWillMount -&gt; render -&gt; componentDidMount -&gt;<br>父组件：componentDidMount</li>\n<li>更新阶段：<br>父组件：componentWillUpdate -&gt; render -&gt;<br>子组件：componentWillReceiveProps -&gt; componentWillUpdate -&gt; render -&gt; componentDidUpdate -&gt;<br>父组件：componentDidUpdate</li>\n<li>卸载阶段：<br>父组件：componentWillUnmount<br>子组件：componentWillUnmount</li>\n</ul>\n<h3 id=\"判断数据类型\"><a href=\"#判断数据类型\" class=\"headerlink\" title=\"判断数据类型\"></a>判断数据类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用typeof</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> bool); <span class=\"comment\">//boolean</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> num);<span class=\"comment\">//number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> str);<span class=\"comment\">//string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> und);<span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> nul);<span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> arr);<span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> obj);<span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> fun);<span class=\"comment\">//function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用instanceof ，即使是Boolean，Number,String数据类型也要用new，除了null和undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object.prototype.toString.call,不能检测非原生构造函数的构造函数名。</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(bool));<span class=\"comment\">//[object Boolean]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(num));<span class=\"comment\">//[object Number]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(str));<span class=\"comment\">//[object String]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(und));<span class=\"comment\">//[object Undefined]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(nul));<span class=\"comment\">//[object Null]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(arr));<span class=\"comment\">//[object Array]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(obj));<span class=\"comment\">//[object Object]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(fun));<span class=\"comment\">//[object Function]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"HTTP2\"><a href=\"#HTTP2\" class=\"headerlink\" title=\"HTTP2\"></a>HTTP2</h3><ul>\n<li>二进制传输。<br>http1.x是文本传输。为了保证HTTP不受影响，那就需要在应用层（HTTP2.0）和传输层（TCP or UDP）之间增加一个二进制分帧层。在二进制分帧层上，HTTP2.0会将所有传输的信息分为更小的消息和帧，并采用二进制格式编码，其中HTTP1.x的首部信息会被封装到Headers帧，而Request Body则封装到Data帧。</li>\n<li>多路复用。<br>所谓多路复用，即在一个TCP连接中存在多个流，即可以同时发送多个请求，对端可以通过帧中的表示知道该帧属于哪个请求。在客户端，这些帧乱序发送，到对端后再根据每个帧首部的流标识符重新组装。通过该技术，可以避免HTTP旧版本的队头阻塞问题，极大提高传输性能。</li>\n<li>Header压缩</li>\n<li>服务器推送</li>\n<li>更安全。<br>HTTP2.0使用了tls的拓展ALPN做为协议升级，除此之外，HTTP2.0对tls的安全性做了近一步加强，通过黑名单机制禁用了几百种不再安全的加密算法。</li>\n</ul>\n<h3 id=\"webpack原理\"><a href=\"#webpack原理\" class=\"headerlink\" title=\"webpack原理\"></a>webpack原理</h3><ol>\n<li><p>先解析webpack配置参数,合并shell中的输入和配置文件如webpack.config.js中的参数,最后生成配置结果;</p>\n</li>\n<li><p>注册所有配置的插件,好让插件监听webpack构建生命周期的事件节点,并作出响应;</p>\n</li>\n<li><p>从配置文件中的入口文件entry开始解析文件,构建AST,找出每个文件依赖的文件,递归下去;</p>\n</li>\n<li><p>在解析文件递归过程中根据文件类型和对应的loader配置找出合适的插件进行解析;</p>\n</li>\n<li><p>递归结束后得到每个文件的最终结果,根据entry配置生成代码块chunk;</p>\n</li>\n<li><p>输出所有chunk到文件系统</p>\n</li>\n</ol>"},{"title":"风声","date":"2018-12-03T13:00:59.000Z","_content":"\n<br/>\n\n<!--more-->\n\n&emsp;&emsp;风往哪里吹，哪里的天就黑了。星星在哪里闪，哪里的天就亮了。你往哪里走，哪里的我便沉默了。\n&emsp;&emsp;但是我不能明，不能明白这一切，不能明白天为什么还是黑的，星星还是没有出现。偶然的一阵风吹过，带来一时的迷乱，令我不能自已。\n&emsp;&emsp;然而我不能忍，不能忍受所谓尔尔。世界是美好的，令人沉醉的。在这美好与沉醉之中，有一种不适感，这令我困惑，难以自持。\n&emsp;&emsp;所以我沉默，愈沉默愈说愈多的话。这话令我感到欣慰，然而总有一丝悲哀。仿佛这是从天上而来，带着一个使命，来使我枉然，以至顿悟。\n&emsp;&emsp;我倾听那风声，风声中带有一时的情绪。那情绪不能持久，而变幻莫测。在这变化中我时而狂笑，时而哭泣，时而分明。我不能看清这世界，这世界是一阵风声，风有尘埃，永不落败，令我癫狂不已。\n&emsp;&emsp;我自随风而去。\n","source":"_posts/风声.md","raw":"---\ntitle: 风声\ndate: 2018-12-03 21:00:59\ncategories: 心情\n---\n\n<br/>\n\n<!--more-->\n\n&emsp;&emsp;风往哪里吹，哪里的天就黑了。星星在哪里闪，哪里的天就亮了。你往哪里走，哪里的我便沉默了。\n&emsp;&emsp;但是我不能明，不能明白这一切，不能明白天为什么还是黑的，星星还是没有出现。偶然的一阵风吹过，带来一时的迷乱，令我不能自已。\n&emsp;&emsp;然而我不能忍，不能忍受所谓尔尔。世界是美好的，令人沉醉的。在这美好与沉醉之中，有一种不适感，这令我困惑，难以自持。\n&emsp;&emsp;所以我沉默，愈沉默愈说愈多的话。这话令我感到欣慰，然而总有一丝悲哀。仿佛这是从天上而来，带着一个使命，来使我枉然，以至顿悟。\n&emsp;&emsp;我倾听那风声，风声中带有一时的情绪。那情绪不能持久，而变幻莫测。在这变化中我时而狂笑，时而哭泣，时而分明。我不能看清这世界，这世界是一阵风声，风有尘埃，永不落败，令我癫狂不已。\n&emsp;&emsp;我自随风而去。\n","slug":"风声","published":1,"updated":"2022-02-18T14:18:31.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm64g001t8hspv96w0lfh","content":"<p><br></p>\n<a id=\"more\"></a>\n<p>&emsp;&emsp;风往哪里吹，哪里的天就黑了。星星在哪里闪，哪里的天就亮了。你往哪里走，哪里的我便沉默了。<br>&emsp;&emsp;但是我不能明，不能明白这一切，不能明白天为什么还是黑的，星星还是没有出现。偶然的一阵风吹过，带来一时的迷乱，令我不能自已。<br>&emsp;&emsp;然而我不能忍，不能忍受所谓尔尔。世界是美好的，令人沉醉的。在这美好与沉醉之中，有一种不适感，这令我困惑，难以自持。<br>&emsp;&emsp;所以我沉默，愈沉默愈说愈多的话。这话令我感到欣慰，然而总有一丝悲哀。仿佛这是从天上而来，带着一个使命，来使我枉然，以至顿悟。<br>&emsp;&emsp;我倾听那风声，风声中带有一时的情绪。那情绪不能持久，而变幻莫测。在这变化中我时而狂笑，时而哭泣，时而分明。我不能看清这世界，这世界是一阵风声，风有尘埃，永不落败，令我癫狂不已。<br>&emsp;&emsp;我自随风而去。</p>\n","site":{"data":{}},"excerpt":"<p><br></p>","more":"<p>&emsp;&emsp;风往哪里吹，哪里的天就黑了。星星在哪里闪，哪里的天就亮了。你往哪里走，哪里的我便沉默了。<br>&emsp;&emsp;但是我不能明，不能明白这一切，不能明白天为什么还是黑的，星星还是没有出现。偶然的一阵风吹过，带来一时的迷乱，令我不能自已。<br>&emsp;&emsp;然而我不能忍，不能忍受所谓尔尔。世界是美好的，令人沉醉的。在这美好与沉醉之中，有一种不适感，这令我困惑，难以自持。<br>&emsp;&emsp;所以我沉默，愈沉默愈说愈多的话。这话令我感到欣慰，然而总有一丝悲哀。仿佛这是从天上而来，带着一个使命，来使我枉然，以至顿悟。<br>&emsp;&emsp;我倾听那风声，风声中带有一时的情绪。那情绪不能持久，而变幻莫测。在这变化中我时而狂笑，时而哭泣，时而分明。我不能看清这世界，这世界是一阵风声，风有尘埃，永不落败，令我癫狂不已。<br>&emsp;&emsp;我自随风而去。</p>"},{"title":"风是月","date":"2022-02-18T14:14:08.000Z","_content":"\n&emsp;&emsp;\n\n<!--more-->\n\n&emsp;&emsp;我今年20岁，站在年月的隔层上，脚下是慢慢消逝的过去，眼前是雾里看花的青春。我20岁的人生还算幸福，有的吃有的拉有人疼有人爱，可不知怎的我这心里老是不痛快。听说是终日无事犯的错可我不知道明天的路怎么走。偶尔看过几本书几部电影仿佛找到自己的影子仿佛青春从此有了盼头。可是丫的这酒劲不到三天就缓了过来And the life back track，昨天我在日光下骑了一个多小时的车晚上我看着夜空还是睡得很香。早上我依旧被电话叫醒勉强起床刷牙洗脸去学车，路上我照例买了瓶矿泉水一路喝了个干净。\n\n&emsp;&emsp;前天在新华书店看到王小波的黄金时代和白银时代，这家伙说话老不正经可就是这段话我觉得挺好：\n\n&emsp;&emsp;那一年我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。\n\n&emsp;&emsp;老实说这话没什么出众的地方就一个特点：真实。可是他是他我是我，这二十一二岁的顿悟还是有很大不同的。首先这其实只是他老人家日后回首不堪往事惭愧不已写的。其次我不想变成什么明什么暗的云，老实说我觉得这一句纯属凑字数。我也想来凑点字数但首先我得弄清楚我到底想要什么。至于什么奢望受锤倒不像是骗人，因为我也有些体会。不同的是我今年就预见到了这一点，我觉得自己不可能永远生猛下去因为我这辈子还未生猛过。不公平的是我照样要受锤。\n\n&emsp;&emsp;其实我就是身在福中不知福吃饱了撑着没事找刺激。想爹娘爷奶那会儿，那日子可真叫日子，天天有刺激。特别是毛主席领导人民吃番薯叶那阵子，要多刺激有多刺激。自从邓爷爷在南海画了一个圈后，刺激们都逃走了。自从手机荣获最佳密友之后，日子们也不见了。今天我坐在电脑前，憋了十泡尿的劲儿，总算和我的最佳密友分离了一个钟头。草，我真伟大。\n\n\n&emsp;&emsp;写于2014年7月20号。\n","source":"_posts/风是月.md","raw":"---\ntitle: 风是月\ndate: 2022-02-18 22:14:08\ncategories: 心情\n---\n\n&emsp;&emsp;\n\n<!--more-->\n\n&emsp;&emsp;我今年20岁，站在年月的隔层上，脚下是慢慢消逝的过去，眼前是雾里看花的青春。我20岁的人生还算幸福，有的吃有的拉有人疼有人爱，可不知怎的我这心里老是不痛快。听说是终日无事犯的错可我不知道明天的路怎么走。偶尔看过几本书几部电影仿佛找到自己的影子仿佛青春从此有了盼头。可是丫的这酒劲不到三天就缓了过来And the life back track，昨天我在日光下骑了一个多小时的车晚上我看着夜空还是睡得很香。早上我依旧被电话叫醒勉强起床刷牙洗脸去学车，路上我照例买了瓶矿泉水一路喝了个干净。\n\n&emsp;&emsp;前天在新华书店看到王小波的黄金时代和白银时代，这家伙说话老不正经可就是这段话我觉得挺好：\n\n&emsp;&emsp;那一年我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。\n\n&emsp;&emsp;老实说这话没什么出众的地方就一个特点：真实。可是他是他我是我，这二十一二岁的顿悟还是有很大不同的。首先这其实只是他老人家日后回首不堪往事惭愧不已写的。其次我不想变成什么明什么暗的云，老实说我觉得这一句纯属凑字数。我也想来凑点字数但首先我得弄清楚我到底想要什么。至于什么奢望受锤倒不像是骗人，因为我也有些体会。不同的是我今年就预见到了这一点，我觉得自己不可能永远生猛下去因为我这辈子还未生猛过。不公平的是我照样要受锤。\n\n&emsp;&emsp;其实我就是身在福中不知福吃饱了撑着没事找刺激。想爹娘爷奶那会儿，那日子可真叫日子，天天有刺激。特别是毛主席领导人民吃番薯叶那阵子，要多刺激有多刺激。自从邓爷爷在南海画了一个圈后，刺激们都逃走了。自从手机荣获最佳密友之后，日子们也不见了。今天我坐在电脑前，憋了十泡尿的劲儿，总算和我的最佳密友分离了一个钟头。草，我真伟大。\n\n\n&emsp;&emsp;写于2014年7月20号。\n","slug":"风是月","published":1,"updated":"2022-02-18T14:21:15.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm64j001x8hspoz5v8r6m","content":"<p>&emsp;&emsp;</p>\n<a id=\"more\"></a>\n<p>&emsp;&emsp;我今年20岁，站在年月的隔层上，脚下是慢慢消逝的过去，眼前是雾里看花的青春。我20岁的人生还算幸福，有的吃有的拉有人疼有人爱，可不知怎的我这心里老是不痛快。听说是终日无事犯的错可我不知道明天的路怎么走。偶尔看过几本书几部电影仿佛找到自己的影子仿佛青春从此有了盼头。可是丫的这酒劲不到三天就缓了过来And the life back track，昨天我在日光下骑了一个多小时的车晚上我看着夜空还是睡得很香。早上我依旧被电话叫醒勉强起床刷牙洗脸去学车，路上我照例买了瓶矿泉水一路喝了个干净。</p>\n<p>&emsp;&emsp;前天在新华书店看到王小波的黄金时代和白银时代，这家伙说话老不正经可就是这段话我觉得挺好：</p>\n<p>&emsp;&emsp;那一年我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。</p>\n<p>&emsp;&emsp;老实说这话没什么出众的地方就一个特点：真实。可是他是他我是我，这二十一二岁的顿悟还是有很大不同的。首先这其实只是他老人家日后回首不堪往事惭愧不已写的。其次我不想变成什么明什么暗的云，老实说我觉得这一句纯属凑字数。我也想来凑点字数但首先我得弄清楚我到底想要什么。至于什么奢望受锤倒不像是骗人，因为我也有些体会。不同的是我今年就预见到了这一点，我觉得自己不可能永远生猛下去因为我这辈子还未生猛过。不公平的是我照样要受锤。</p>\n<p>&emsp;&emsp;其实我就是身在福中不知福吃饱了撑着没事找刺激。想爹娘爷奶那会儿，那日子可真叫日子，天天有刺激。特别是毛主席领导人民吃番薯叶那阵子，要多刺激有多刺激。自从邓爷爷在南海画了一个圈后，刺激们都逃走了。自从手机荣获最佳密友之后，日子们也不见了。今天我坐在电脑前，憋了十泡尿的劲儿，总算和我的最佳密友分离了一个钟头。草，我真伟大。</p>\n<p>&emsp;&emsp;写于2014年7月20号。</p>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;</p>","more":"<p>&emsp;&emsp;我今年20岁，站在年月的隔层上，脚下是慢慢消逝的过去，眼前是雾里看花的青春。我20岁的人生还算幸福，有的吃有的拉有人疼有人爱，可不知怎的我这心里老是不痛快。听说是终日无事犯的错可我不知道明天的路怎么走。偶尔看过几本书几部电影仿佛找到自己的影子仿佛青春从此有了盼头。可是丫的这酒劲不到三天就缓了过来And the life back track，昨天我在日光下骑了一个多小时的车晚上我看着夜空还是睡得很香。早上我依旧被电话叫醒勉强起床刷牙洗脸去学车，路上我照例买了瓶矿泉水一路喝了个干净。</p>\n<p>&emsp;&emsp;前天在新华书店看到王小波的黄金时代和白银时代，这家伙说话老不正经可就是这段话我觉得挺好：</p>\n<p>&emsp;&emsp;那一年我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。</p>\n<p>&emsp;&emsp;老实说这话没什么出众的地方就一个特点：真实。可是他是他我是我，这二十一二岁的顿悟还是有很大不同的。首先这其实只是他老人家日后回首不堪往事惭愧不已写的。其次我不想变成什么明什么暗的云，老实说我觉得这一句纯属凑字数。我也想来凑点字数但首先我得弄清楚我到底想要什么。至于什么奢望受锤倒不像是骗人，因为我也有些体会。不同的是我今年就预见到了这一点，我觉得自己不可能永远生猛下去因为我这辈子还未生猛过。不公平的是我照样要受锤。</p>\n<p>&emsp;&emsp;其实我就是身在福中不知福吃饱了撑着没事找刺激。想爹娘爷奶那会儿，那日子可真叫日子，天天有刺激。特别是毛主席领导人民吃番薯叶那阵子，要多刺激有多刺激。自从邓爷爷在南海画了一个圈后，刺激们都逃走了。自从手机荣获最佳密友之后，日子们也不见了。今天我坐在电脑前，憋了十泡尿的劲儿，总算和我的最佳密友分离了一个钟头。草，我真伟大。</p>\n<p>&emsp;&emsp;写于2014年7月20号。</p>"},{"title":"基本的排序和查找算法","date":"2018-08-18T10:51:49.000Z","_content":"\n虽然前端工程师用到算法的时候不是很多，但最基本的几种方法还是记录下来，以备不时之需。\n话不多说，直接上代码吧。\n\n### 最简单的排序法\n\n<!--more-->\n\n```javascript\nfunction sorts(array){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    for( var i=0; i < array.length; i++){\n      for( var j=i+1; j < array.length; j++ ){\n        if( array[i] > array[j] ){\n          var v = array[i]\n          array[i] = array[j]\n          array[j] = v\n        }\n      }\n    }\n  }\n  return array\n}\nvar oldArr = [4,6,2,7,12,34,46,3,55]\nvar newArr = sorts(a)\nconsole.log(newArr)  //[2, 3, 4, 6, 7, 12, 34, 46, 55]\n```\n\n### 冒泡排序法(平均时间复杂度O(n^2))\n\n方法 1：\n\n```javascript\nfunction sorts(array,way){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    //降序\n    if(way == 'a'){\n      for( var x=0; x < array.length; x++){\n        for( var y=0; y < array.length-x; y++ ){\n          if( array[y] < array[y+1] ){\n            var g = array[y]\n            array[y] = array[y+1]\n            array[y+1] = g\n          }\n        }\n      }\n    }\n    //升序\n    else{\n      for( var i=0; i < array.length; i++){\n        for( var j=array.length-1; j >=i; j-- ){\n          if( array[j] < array[j-1] ){\n            var v = array[j]\n            array[j] = array[j-1]\n            array[j-1] = v\n          }\n        }\n      }\n    }\n  }\n  return array;\n}\nvar oldArr1 = [4,6,2,7,12,34,46,3,55]\nvar oldArr2 = [4,6,2,7,12,34,46,3,55]\nvar newArr1 = sorts(oldArr1)\nvar newArr2 = sorts(oldArr2, 'a')\nconsole.log(newArr1)  //[2, 3, 4, 6, 7, 12, 34, 46, 55]\nconsole.log(newArr2)  //[55, 46, 34, 12, 7, 6, 4, 3, 2]\n```\n\n方法 2：\n\n上面的冒泡排序法还可以优化一下，不过只优化升序，降序的类似。\n\n```javascript\nfunction sorts(array){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    //设置一个标记，若没有执行交换，说明后面待排的数字顺序已经排好了，则退出循环，不用再比较\n    var flag = true\n    for( var i=0; i < array.length && flag; i++){\n      flag = false\n      for( var j=array.length-1; j >=i; j-- ){\n        if( array[j] < array[j-1] ){\n          var v = array[j];\n          array[j] = array[j-1]\n          array[j-1] = v\n          flag = true\n        }\n      }\n    }\n  }\n  return array\n}\nvar oldArr = [4,6,2,7,12,34,46,3,55]\nvar newArr = sorts(oldArr)\nconsole.log(newArr) //[2, 3, 4, 6, 7, 12, 34, 46, 55]\n```\n\n### 简单选择排序法(平均时间复杂度O(n^2))\n\n(1)从待排序序列中，找到关键字最小的元素；\n(2)如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换；\n(3)从余下的 N - 1 个元素中，找出关键字最小的元素，重复(1)、(2)步，直到排序结束。\n\n```javascript\nfunction sorts(array){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    for( var i=0; i < array.length; i++){\n      //设置一个最小的关键字\n      var min = i\n      for( var j=i+1; j < array.length; j++ ){\n        if( array[min] > array[j] ){\n          min = j\n        }\n      }\n      if( i != min){\n        var v = array[min];\n        array[min] = array[i]\n        array[i] = v\n      }\n    }\n  }\n  return array\n}\nvar oldArr = [4,6,2,7,12,34,46,3,55]\nvar newArr = sorts(a)\nconsole.log(newArr) //[2, 3, 4, 6, 7, 12, 34, 46, 55]\n```\n\n### 直接插入排序法(平均时间复杂度O(n^2))\n\n每一步将一个待排序的记录，插入到前面已经排好序的有序序列中去，直到插完所有元素为止。\n\n方法 1：\n\n```javascript\nfunction sorts(array){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    for( var i=1; i < array.length; i++){\n      for( var j=i-1; array[j] > array[j+1]; j-- ){\n        var v = array[j];\n        array[j] = array[j+1]\n        array[j+1] = v\n      }\n    }\n  }\n  return array\n}\n\nvar oldArr = [4,6,2,7,12,34,46,3,55,0];\nvar newArr = sorts(oldArr)\nconsole.log(newArr) //[0, 2, 3, 4, 6, 7, 12, 34, 46, 55]\n```\n\n方法 2：\n\n```javascript\nfunction sorts(array){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    for( var i=1; i < array.length; i++){\n      var temp = array[i]\n      for( var j=i-1; temp < array[j]; j-- ){\n        array[j+1] = array[j]\n      }\n      array[j+1] = temp\n    }\n  }\n  return array\n}\nvar oldArr = [4,6,2,7,12,34,46,3,55,0];\nvar newArr = sorts(oldArr)\nconsole.log(newArr) //[0, 2, 3, 4, 6, 7, 12, 34, 46, 55]\n```\n\n### 快速排序（平均情况下快速排序的时间复杂度是O(nlogn)，最坏情况是O(n^2)）\n\n(1)从数列中挑出一个元素，称为 “基准”（pivot）；\n(2)重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这次操作后退出之后，该基准就处于数列的中间位置；\n(3)递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。\n\n```javascript\nfunction quickSort(arr) {\n    if(arr.length < 2) return arr\n\n    const leftArr = []\n    const rightArr = []\n    // 每次选择最左边的数作为基数，或者也可以Math.floor(Math.random() * list.length)选择一个随机的数\n    const pivotIndex = 0 \n    const pivot = arr[pivotIndex]\n\n    for(let i = pivotIndex + 1, len = arr.length; i < len; i++) {\n\n        if(arr[i] <= pivot) {\n            leftArr.push(arr[i])\n        }else if(arr[i] > pivot) {\n            rightArr.push(arr[i])\n        }\n    }\n\n    return quickSort(leftArr).concat([pivot]).concat(quickSort(rightArr))\n}\n\n\nfunction quickSort2(arr){\n  if (arr.length<2) { return arr; }\n  // 定义左指针, 每次选择最左边的数作为基数\n  var left=0; \n  // 定义右指针\n  var right=arr.length-1;\n  //开启每一轮的排序\n  while(left<right){\n    // 寻找右边比arr[0]小的数的下标\n    while(arr[right]>=arr[0] && left<right){\n      right=right-1;\n    }\n    // 寻找左边比arr[0]大的数的下标\n    while(arr[left]<=arr[0] && left<right){\n      left++;\n    }\n    //当左边指针与右边指针相遇后，交换arr[0]与当前两个指针所在的元素\n    if (right==left) {\n      let mid=arr[right];\n      arr[right]=arr[0];\n      arr[0]=mid;\n      break;\n    }\n    // 当左指针小于右指针的位置，交换两个指针当前位置的元素\n    let tem=arr[right];\n    arr[right]=arr[left];\n    arr[left]=tem;\n  }\n  //递归实现\n  return quickSort(arr.slice(0,left)).concat(arr.slice(left,right+1)).concat(quickSort(arr.slice(right+1)));\n}\n\nconsole.log('result: ', quickSort([2, 10, 3, 1, 1, 5, 2]))\n// [1, 1, 2, 2, 3, 5, 10]\nconsole.log('result2: ', quickSort2([2, 10, 3, 1, 1, 5, 2]))\n// [1, 1, 2, 2, 3, 5, 10]\n```\n\n### 顺序表查找\n\n```javascript\n//查找数组中有没有某个值，有返回其位置，否则返回-1\nfunction searchValue(array,value){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    for (var i = 0; i < array.length; i++) {\n      if( array[i] == value ){\n        return i\n      }\n    }\n    return -1;\n  }\n}\nvar arr = [1,'f','g',5,8]\nvar index = searchValue(arr, 8)\nconsole.log(index)  //4\n```\n\n### 二分查找\n\n```javascript\n//查找数组中有没有某个值，有返回其位置，否则返回-1\nfunction searchValue(array,value){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    var hign = array.length-1,\n      low = 0,\n      mid\n      while(low <= hign){\n        mid =Math.floor((low+hign)/2);\n        if( value < array[mid] ){\n          hign = mid-1\n        }else if( value > array[mid] ){\n          low = mid+1\n        }else{\n          return mid\n        }\n\n      }\n  }\n  return -1\n}\nvar arr = [1,2,3,4,5,6,7,8,9]\nvar index = searchValue(arr, 5)\nconsole.log(index) //4\n```\n","source":"_posts/基本的排序算法.md","raw":"---\ntitle: 基本的排序和查找算法\ndate: 2018-08-18 18:51:49\ncategories: 技术\ntags: [算法]\n---\n\n虽然前端工程师用到算法的时候不是很多，但最基本的几种方法还是记录下来，以备不时之需。\n话不多说，直接上代码吧。\n\n### 最简单的排序法\n\n<!--more-->\n\n```javascript\nfunction sorts(array){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    for( var i=0; i < array.length; i++){\n      for( var j=i+1; j < array.length; j++ ){\n        if( array[i] > array[j] ){\n          var v = array[i]\n          array[i] = array[j]\n          array[j] = v\n        }\n      }\n    }\n  }\n  return array\n}\nvar oldArr = [4,6,2,7,12,34,46,3,55]\nvar newArr = sorts(a)\nconsole.log(newArr)  //[2, 3, 4, 6, 7, 12, 34, 46, 55]\n```\n\n### 冒泡排序法(平均时间复杂度O(n^2))\n\n方法 1：\n\n```javascript\nfunction sorts(array,way){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    //降序\n    if(way == 'a'){\n      for( var x=0; x < array.length; x++){\n        for( var y=0; y < array.length-x; y++ ){\n          if( array[y] < array[y+1] ){\n            var g = array[y]\n            array[y] = array[y+1]\n            array[y+1] = g\n          }\n        }\n      }\n    }\n    //升序\n    else{\n      for( var i=0; i < array.length; i++){\n        for( var j=array.length-1; j >=i; j-- ){\n          if( array[j] < array[j-1] ){\n            var v = array[j]\n            array[j] = array[j-1]\n            array[j-1] = v\n          }\n        }\n      }\n    }\n  }\n  return array;\n}\nvar oldArr1 = [4,6,2,7,12,34,46,3,55]\nvar oldArr2 = [4,6,2,7,12,34,46,3,55]\nvar newArr1 = sorts(oldArr1)\nvar newArr2 = sorts(oldArr2, 'a')\nconsole.log(newArr1)  //[2, 3, 4, 6, 7, 12, 34, 46, 55]\nconsole.log(newArr2)  //[55, 46, 34, 12, 7, 6, 4, 3, 2]\n```\n\n方法 2：\n\n上面的冒泡排序法还可以优化一下，不过只优化升序，降序的类似。\n\n```javascript\nfunction sorts(array){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    //设置一个标记，若没有执行交换，说明后面待排的数字顺序已经排好了，则退出循环，不用再比较\n    var flag = true\n    for( var i=0; i < array.length && flag; i++){\n      flag = false\n      for( var j=array.length-1; j >=i; j-- ){\n        if( array[j] < array[j-1] ){\n          var v = array[j];\n          array[j] = array[j-1]\n          array[j-1] = v\n          flag = true\n        }\n      }\n    }\n  }\n  return array\n}\nvar oldArr = [4,6,2,7,12,34,46,3,55]\nvar newArr = sorts(oldArr)\nconsole.log(newArr) //[2, 3, 4, 6, 7, 12, 34, 46, 55]\n```\n\n### 简单选择排序法(平均时间复杂度O(n^2))\n\n(1)从待排序序列中，找到关键字最小的元素；\n(2)如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换；\n(3)从余下的 N - 1 个元素中，找出关键字最小的元素，重复(1)、(2)步，直到排序结束。\n\n```javascript\nfunction sorts(array){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    for( var i=0; i < array.length; i++){\n      //设置一个最小的关键字\n      var min = i\n      for( var j=i+1; j < array.length; j++ ){\n        if( array[min] > array[j] ){\n          min = j\n        }\n      }\n      if( i != min){\n        var v = array[min];\n        array[min] = array[i]\n        array[i] = v\n      }\n    }\n  }\n  return array\n}\nvar oldArr = [4,6,2,7,12,34,46,3,55]\nvar newArr = sorts(a)\nconsole.log(newArr) //[2, 3, 4, 6, 7, 12, 34, 46, 55]\n```\n\n### 直接插入排序法(平均时间复杂度O(n^2))\n\n每一步将一个待排序的记录，插入到前面已经排好序的有序序列中去，直到插完所有元素为止。\n\n方法 1：\n\n```javascript\nfunction sorts(array){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    for( var i=1; i < array.length; i++){\n      for( var j=i-1; array[j] > array[j+1]; j-- ){\n        var v = array[j];\n        array[j] = array[j+1]\n        array[j+1] = v\n      }\n    }\n  }\n  return array\n}\n\nvar oldArr = [4,6,2,7,12,34,46,3,55,0];\nvar newArr = sorts(oldArr)\nconsole.log(newArr) //[0, 2, 3, 4, 6, 7, 12, 34, 46, 55]\n```\n\n方法 2：\n\n```javascript\nfunction sorts(array){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    for( var i=1; i < array.length; i++){\n      var temp = array[i]\n      for( var j=i-1; temp < array[j]; j-- ){\n        array[j+1] = array[j]\n      }\n      array[j+1] = temp\n    }\n  }\n  return array\n}\nvar oldArr = [4,6,2,7,12,34,46,3,55,0];\nvar newArr = sorts(oldArr)\nconsole.log(newArr) //[0, 2, 3, 4, 6, 7, 12, 34, 46, 55]\n```\n\n### 快速排序（平均情况下快速排序的时间复杂度是O(nlogn)，最坏情况是O(n^2)）\n\n(1)从数列中挑出一个元素，称为 “基准”（pivot）；\n(2)重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这次操作后退出之后，该基准就处于数列的中间位置；\n(3)递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。\n\n```javascript\nfunction quickSort(arr) {\n    if(arr.length < 2) return arr\n\n    const leftArr = []\n    const rightArr = []\n    // 每次选择最左边的数作为基数，或者也可以Math.floor(Math.random() * list.length)选择一个随机的数\n    const pivotIndex = 0 \n    const pivot = arr[pivotIndex]\n\n    for(let i = pivotIndex + 1, len = arr.length; i < len; i++) {\n\n        if(arr[i] <= pivot) {\n            leftArr.push(arr[i])\n        }else if(arr[i] > pivot) {\n            rightArr.push(arr[i])\n        }\n    }\n\n    return quickSort(leftArr).concat([pivot]).concat(quickSort(rightArr))\n}\n\n\nfunction quickSort2(arr){\n  if (arr.length<2) { return arr; }\n  // 定义左指针, 每次选择最左边的数作为基数\n  var left=0; \n  // 定义右指针\n  var right=arr.length-1;\n  //开启每一轮的排序\n  while(left<right){\n    // 寻找右边比arr[0]小的数的下标\n    while(arr[right]>=arr[0] && left<right){\n      right=right-1;\n    }\n    // 寻找左边比arr[0]大的数的下标\n    while(arr[left]<=arr[0] && left<right){\n      left++;\n    }\n    //当左边指针与右边指针相遇后，交换arr[0]与当前两个指针所在的元素\n    if (right==left) {\n      let mid=arr[right];\n      arr[right]=arr[0];\n      arr[0]=mid;\n      break;\n    }\n    // 当左指针小于右指针的位置，交换两个指针当前位置的元素\n    let tem=arr[right];\n    arr[right]=arr[left];\n    arr[left]=tem;\n  }\n  //递归实现\n  return quickSort(arr.slice(0,left)).concat(arr.slice(left,right+1)).concat(quickSort(arr.slice(right+1)));\n}\n\nconsole.log('result: ', quickSort([2, 10, 3, 1, 1, 5, 2]))\n// [1, 1, 2, 2, 3, 5, 10]\nconsole.log('result2: ', quickSort2([2, 10, 3, 1, 1, 5, 2]))\n// [1, 1, 2, 2, 3, 5, 10]\n```\n\n### 顺序表查找\n\n```javascript\n//查找数组中有没有某个值，有返回其位置，否则返回-1\nfunction searchValue(array,value){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    for (var i = 0; i < array.length; i++) {\n      if( array[i] == value ){\n        return i\n      }\n    }\n    return -1;\n  }\n}\nvar arr = [1,'f','g',5,8]\nvar index = searchValue(arr, 8)\nconsole.log(index)  //4\n```\n\n### 二分查找\n\n```javascript\n//查找数组中有没有某个值，有返回其位置，否则返回-1\nfunction searchValue(array,value){\n  if(!array instanceof Array){\n    console.log('您输入的不是数组')\n  }else{\n    var hign = array.length-1,\n      low = 0,\n      mid\n      while(low <= hign){\n        mid =Math.floor((low+hign)/2);\n        if( value < array[mid] ){\n          hign = mid-1\n        }else if( value > array[mid] ){\n          low = mid+1\n        }else{\n          return mid\n        }\n\n      }\n  }\n  return -1\n}\nvar arr = [1,2,3,4,5,6,7,8,9]\nvar index = searchValue(arr, 5)\nconsole.log(index) //4\n```\n","slug":"基本的排序算法","published":1,"updated":"2020-02-20T08:52:36.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm21wm64l001z8hsptojksz56","content":"<p>虽然前端工程师用到算法的时候不是很多，但最基本的几种方法还是记录下来，以备不时之需。<br>话不多说，直接上代码吧。</p>\n<h3 id=\"最简单的排序法\"><a href=\"#最简单的排序法\" class=\"headerlink\" title=\"最简单的排序法\"></a>最简单的排序法</h3><a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sorts</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> j=i+<span class=\"number\">1</span>; j &lt; array.length; j++ )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( array[i] &gt; array[j] )&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> v = array[i]</span><br><span class=\"line\">          array[i] = array[j]</span><br><span class=\"line\">          array[j] = v</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArr = [<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">46</span>,<span class=\"number\">3</span>,<span class=\"number\">55</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = sorts(a)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr)  <span class=\"comment\">//[2, 3, 4, 6, 7, 12, 34, 46, 55]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"冒泡排序法-平均时间复杂度O-n-2\"><a href=\"#冒泡排序法-平均时间复杂度O-n-2\" class=\"headerlink\" title=\"冒泡排序法(平均时间复杂度O(n^2))\"></a>冒泡排序法(平均时间复杂度O(n^2))</h3><p>方法 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sorts</span>(<span class=\"params\">array,way</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//降序</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(way == <span class=\"string\">'a'</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> x=<span class=\"number\">0</span>; x &lt; array.length; x++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> y=<span class=\"number\">0</span>; y &lt; array.length-x; y++ )&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>( array[y] &lt; array[y+<span class=\"number\">1</span>] )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> g = array[y]</span><br><span class=\"line\">            array[y] = array[y+<span class=\"number\">1</span>]</span><br><span class=\"line\">            array[y+<span class=\"number\">1</span>] = g</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//升序</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> j=array.length<span class=\"number\">-1</span>; j &gt;=i; j-- )&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>( array[j] &lt; array[j<span class=\"number\">-1</span>] )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> v = array[j]</span><br><span class=\"line\">            array[j] = array[j<span class=\"number\">-1</span>]</span><br><span class=\"line\">            array[j<span class=\"number\">-1</span>] = v</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArr1 = [<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">46</span>,<span class=\"number\">3</span>,<span class=\"number\">55</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArr2 = [<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">46</span>,<span class=\"number\">3</span>,<span class=\"number\">55</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr1 = sorts(oldArr1)</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr2 = sorts(oldArr2, <span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr1)  <span class=\"comment\">//[2, 3, 4, 6, 7, 12, 34, 46, 55]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr2)  <span class=\"comment\">//[55, 46, 34, 12, 7, 6, 4, 3, 2]</span></span><br></pre></td></tr></table></figure>\n<p>方法 2：</p>\n<p>上面的冒泡排序法还可以优化一下，不过只优化升序，降序的类似。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sorts</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置一个标记，若没有执行交换，说明后面待排的数字顺序已经排好了，则退出循环，不用再比较</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; array.length &amp;&amp; flag; i++)&#123;</span><br><span class=\"line\">      flag = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> j=array.length<span class=\"number\">-1</span>; j &gt;=i; j-- )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( array[j] &lt; array[j<span class=\"number\">-1</span>] )&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> v = array[j];</span><br><span class=\"line\">          array[j] = array[j<span class=\"number\">-1</span>]</span><br><span class=\"line\">          array[j<span class=\"number\">-1</span>] = v</span><br><span class=\"line\">          flag = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArr = [<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">46</span>,<span class=\"number\">3</span>,<span class=\"number\">55</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = sorts(oldArr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr) <span class=\"comment\">//[2, 3, 4, 6, 7, 12, 34, 46, 55]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"简单选择排序法-平均时间复杂度O-n-2\"><a href=\"#简单选择排序法-平均时间复杂度O-n-2\" class=\"headerlink\" title=\"简单选择排序法(平均时间复杂度O(n^2))\"></a>简单选择排序法(平均时间复杂度O(n^2))</h3><p>(1)从待排序序列中，找到关键字最小的元素；<br>(2)如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换；<br>(3)从余下的 N - 1 个元素中，找出关键字最小的元素，重复(1)、(2)步，直到排序结束。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sorts</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">      <span class=\"comment\">//设置一个最小的关键字</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> min = i</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> j=i+<span class=\"number\">1</span>; j &lt; array.length; j++ )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( array[min] &gt; array[j] )&#123;</span><br><span class=\"line\">          min = j</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>( i != min)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> v = array[min];</span><br><span class=\"line\">        array[min] = array[i]</span><br><span class=\"line\">        array[i] = v</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArr = [<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">46</span>,<span class=\"number\">3</span>,<span class=\"number\">55</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = sorts(a)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr) <span class=\"comment\">//[2, 3, 4, 6, 7, 12, 34, 46, 55]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"直接插入排序法-平均时间复杂度O-n-2\"><a href=\"#直接插入排序法-平均时间复杂度O-n-2\" class=\"headerlink\" title=\"直接插入排序法(平均时间复杂度O(n^2))\"></a>直接插入排序法(平均时间复杂度O(n^2))</h3><p>每一步将一个待排序的记录，插入到前面已经排好序的有序序列中去，直到插完所有元素为止。</p>\n<p>方法 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sorts</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> j=i<span class=\"number\">-1</span>; array[j] &gt; array[j+<span class=\"number\">1</span>]; j-- )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> v = array[j];</span><br><span class=\"line\">        array[j] = array[j+<span class=\"number\">1</span>]</span><br><span class=\"line\">        array[j+<span class=\"number\">1</span>] = v</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArr = [<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">46</span>,<span class=\"number\">3</span>,<span class=\"number\">55</span>,<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = sorts(oldArr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr) <span class=\"comment\">//[0, 2, 3, 4, 6, 7, 12, 34, 46, 55]</span></span><br></pre></td></tr></table></figure>\n<p>方法 2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sorts</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> temp = array[i]</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> j=i<span class=\"number\">-1</span>; temp &lt; array[j]; j-- )&#123;</span><br><span class=\"line\">        array[j+<span class=\"number\">1</span>] = array[j]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      array[j+<span class=\"number\">1</span>] = temp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArr = [<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">46</span>,<span class=\"number\">3</span>,<span class=\"number\">55</span>,<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = sorts(oldArr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr) <span class=\"comment\">//[0, 2, 3, 4, 6, 7, 12, 34, 46, 55]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"快速排序（平均情况下快速排序的时间复杂度是O-nlogn-，最坏情况是O-n-2-）\"><a href=\"#快速排序（平均情况下快速排序的时间复杂度是O-nlogn-，最坏情况是O-n-2-）\" class=\"headerlink\" title=\"快速排序（平均情况下快速排序的时间复杂度是O(nlogn)，最坏情况是O(n^2)）\"></a>快速排序（平均情况下快速排序的时间复杂度是O(nlogn)，最坏情况是O(n^2)）</h3><p>(1)从数列中挑出一个元素，称为 “基准”（pivot）；<br>(2)重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这次操作后退出之后，该基准就处于数列的中间位置；<br>(3)递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftArr = []</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightArr = []</span><br><span class=\"line\">    <span class=\"comment\">// 每次选择最左边的数作为基数，或者也可以Math.floor(Math.random() * list.length)选择一个随机的数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> pivotIndex = <span class=\"number\">0</span> </span><br><span class=\"line\">    <span class=\"keyword\">const</span> pivot = arr[pivotIndex]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = pivotIndex + <span class=\"number\">1</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] &lt;= pivot) &#123;</span><br><span class=\"line\">            leftArr.push(arr[i])</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[i] &gt; pivot) &#123;</span><br><span class=\"line\">            rightArr.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort(leftArr).concat([pivot]).concat(quickSort(rightArr))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort2</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.length&lt;<span class=\"number\">2</span>) &#123; <span class=\"keyword\">return</span> arr; &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 定义左指针, 每次选择最左边的数作为基数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> left=<span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"comment\">// 定义右指针</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> right=arr.length<span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"comment\">//开启每一轮的排序</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 寻找右边比arr[0]小的数的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(arr[right]&gt;=arr[<span class=\"number\">0</span>] &amp;&amp; left&lt;right)&#123;</span><br><span class=\"line\">      right=right<span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 寻找左边比arr[0]大的数的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(arr[left]&lt;=arr[<span class=\"number\">0</span>] &amp;&amp; left&lt;right)&#123;</span><br><span class=\"line\">      left++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//当左边指针与右边指针相遇后，交换arr[0]与当前两个指针所在的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right==left) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> mid=arr[right];</span><br><span class=\"line\">      arr[right]=arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">      arr[<span class=\"number\">0</span>]=mid;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当左指针小于右指针的位置，交换两个指针当前位置的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tem=arr[right];</span><br><span class=\"line\">    arr[right]=arr[left];</span><br><span class=\"line\">    arr[left]=tem;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//递归实现</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> quickSort(arr.slice(<span class=\"number\">0</span>,left)).concat(arr.slice(left,right+<span class=\"number\">1</span>)).concat(quickSort(arr.slice(right+<span class=\"number\">1</span>)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'result: '</span>, quickSort([<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"comment\">// [1, 1, 2, 2, 3, 5, 10]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'result2: '</span>, quickSort2([<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"comment\">// [1, 1, 2, 2, 3, 5, 10]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"顺序表查找\"><a href=\"#顺序表查找\" class=\"headerlink\" title=\"顺序表查找\"></a>顺序表查找</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查找数组中有没有某个值，有返回其位置，否则返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">searchValue</span>(<span class=\"params\">array,value</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>( array[i] == value )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"string\">'f'</span>,<span class=\"string\">'g'</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = searchValue(arr, <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(index)  <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查找数组中有没有某个值，有返回其位置，否则返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">searchValue</span>(<span class=\"params\">array,value</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hign = array.length<span class=\"number\">-1</span>,</span><br><span class=\"line\">      low = <span class=\"number\">0</span>,</span><br><span class=\"line\">      mid</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(low &lt;= hign)&#123;</span><br><span class=\"line\">        mid =<span class=\"built_in\">Math</span>.floor((low+hign)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( value &lt; array[mid] )&#123;</span><br><span class=\"line\">          hign = mid<span class=\"number\">-1</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( value &gt; array[mid] )&#123;</span><br><span class=\"line\">          low = mid+<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = searchValue(arr, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(index) <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>虽然前端工程师用到算法的时候不是很多，但最基本的几种方法还是记录下来，以备不时之需。<br>话不多说，直接上代码吧。</p>\n<h3 id=\"最简单的排序法\"><a href=\"#最简单的排序法\" class=\"headerlink\" title=\"最简单的排序法\"></a>最简单的排序法</h3>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sorts</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> j=i+<span class=\"number\">1</span>; j &lt; array.length; j++ )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( array[i] &gt; array[j] )&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> v = array[i]</span><br><span class=\"line\">          array[i] = array[j]</span><br><span class=\"line\">          array[j] = v</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArr = [<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">46</span>,<span class=\"number\">3</span>,<span class=\"number\">55</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = sorts(a)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr)  <span class=\"comment\">//[2, 3, 4, 6, 7, 12, 34, 46, 55]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"冒泡排序法-平均时间复杂度O-n-2\"><a href=\"#冒泡排序法-平均时间复杂度O-n-2\" class=\"headerlink\" title=\"冒泡排序法(平均时间复杂度O(n^2))\"></a>冒泡排序法(平均时间复杂度O(n^2))</h3><p>方法 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sorts</span>(<span class=\"params\">array,way</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//降序</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(way == <span class=\"string\">'a'</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> x=<span class=\"number\">0</span>; x &lt; array.length; x++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> y=<span class=\"number\">0</span>; y &lt; array.length-x; y++ )&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>( array[y] &lt; array[y+<span class=\"number\">1</span>] )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> g = array[y]</span><br><span class=\"line\">            array[y] = array[y+<span class=\"number\">1</span>]</span><br><span class=\"line\">            array[y+<span class=\"number\">1</span>] = g</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//升序</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> j=array.length<span class=\"number\">-1</span>; j &gt;=i; j-- )&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>( array[j] &lt; array[j<span class=\"number\">-1</span>] )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> v = array[j]</span><br><span class=\"line\">            array[j] = array[j<span class=\"number\">-1</span>]</span><br><span class=\"line\">            array[j<span class=\"number\">-1</span>] = v</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArr1 = [<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">46</span>,<span class=\"number\">3</span>,<span class=\"number\">55</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArr2 = [<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">46</span>,<span class=\"number\">3</span>,<span class=\"number\">55</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr1 = sorts(oldArr1)</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr2 = sorts(oldArr2, <span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr1)  <span class=\"comment\">//[2, 3, 4, 6, 7, 12, 34, 46, 55]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr2)  <span class=\"comment\">//[55, 46, 34, 12, 7, 6, 4, 3, 2]</span></span><br></pre></td></tr></table></figure>\n<p>方法 2：</p>\n<p>上面的冒泡排序法还可以优化一下，不过只优化升序，降序的类似。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sorts</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置一个标记，若没有执行交换，说明后面待排的数字顺序已经排好了，则退出循环，不用再比较</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; array.length &amp;&amp; flag; i++)&#123;</span><br><span class=\"line\">      flag = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> j=array.length<span class=\"number\">-1</span>; j &gt;=i; j-- )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( array[j] &lt; array[j<span class=\"number\">-1</span>] )&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> v = array[j];</span><br><span class=\"line\">          array[j] = array[j<span class=\"number\">-1</span>]</span><br><span class=\"line\">          array[j<span class=\"number\">-1</span>] = v</span><br><span class=\"line\">          flag = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArr = [<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">46</span>,<span class=\"number\">3</span>,<span class=\"number\">55</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = sorts(oldArr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr) <span class=\"comment\">//[2, 3, 4, 6, 7, 12, 34, 46, 55]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"简单选择排序法-平均时间复杂度O-n-2\"><a href=\"#简单选择排序法-平均时间复杂度O-n-2\" class=\"headerlink\" title=\"简单选择排序法(平均时间复杂度O(n^2))\"></a>简单选择排序法(平均时间复杂度O(n^2))</h3><p>(1)从待排序序列中，找到关键字最小的元素；<br>(2)如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换；<br>(3)从余下的 N - 1 个元素中，找出关键字最小的元素，重复(1)、(2)步，直到排序结束。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sorts</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">      <span class=\"comment\">//设置一个最小的关键字</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> min = i</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> j=i+<span class=\"number\">1</span>; j &lt; array.length; j++ )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( array[min] &gt; array[j] )&#123;</span><br><span class=\"line\">          min = j</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>( i != min)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> v = array[min];</span><br><span class=\"line\">        array[min] = array[i]</span><br><span class=\"line\">        array[i] = v</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArr = [<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">46</span>,<span class=\"number\">3</span>,<span class=\"number\">55</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = sorts(a)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr) <span class=\"comment\">//[2, 3, 4, 6, 7, 12, 34, 46, 55]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"直接插入排序法-平均时间复杂度O-n-2\"><a href=\"#直接插入排序法-平均时间复杂度O-n-2\" class=\"headerlink\" title=\"直接插入排序法(平均时间复杂度O(n^2))\"></a>直接插入排序法(平均时间复杂度O(n^2))</h3><p>每一步将一个待排序的记录，插入到前面已经排好序的有序序列中去，直到插完所有元素为止。</p>\n<p>方法 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sorts</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> j=i<span class=\"number\">-1</span>; array[j] &gt; array[j+<span class=\"number\">1</span>]; j-- )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> v = array[j];</span><br><span class=\"line\">        array[j] = array[j+<span class=\"number\">1</span>]</span><br><span class=\"line\">        array[j+<span class=\"number\">1</span>] = v</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArr = [<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">46</span>,<span class=\"number\">3</span>,<span class=\"number\">55</span>,<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = sorts(oldArr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr) <span class=\"comment\">//[0, 2, 3, 4, 6, 7, 12, 34, 46, 55]</span></span><br></pre></td></tr></table></figure>\n<p>方法 2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sorts</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> temp = array[i]</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> j=i<span class=\"number\">-1</span>; temp &lt; array[j]; j-- )&#123;</span><br><span class=\"line\">        array[j+<span class=\"number\">1</span>] = array[j]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      array[j+<span class=\"number\">1</span>] = temp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArr = [<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">46</span>,<span class=\"number\">3</span>,<span class=\"number\">55</span>,<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = sorts(oldArr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr) <span class=\"comment\">//[0, 2, 3, 4, 6, 7, 12, 34, 46, 55]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"快速排序（平均情况下快速排序的时间复杂度是O-nlogn-，最坏情况是O-n-2-）\"><a href=\"#快速排序（平均情况下快速排序的时间复杂度是O-nlogn-，最坏情况是O-n-2-）\" class=\"headerlink\" title=\"快速排序（平均情况下快速排序的时间复杂度是O(nlogn)，最坏情况是O(n^2)）\"></a>快速排序（平均情况下快速排序的时间复杂度是O(nlogn)，最坏情况是O(n^2)）</h3><p>(1)从数列中挑出一个元素，称为 “基准”（pivot）；<br>(2)重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这次操作后退出之后，该基准就处于数列的中间位置；<br>(3)递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftArr = []</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightArr = []</span><br><span class=\"line\">    <span class=\"comment\">// 每次选择最左边的数作为基数，或者也可以Math.floor(Math.random() * list.length)选择一个随机的数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> pivotIndex = <span class=\"number\">0</span> </span><br><span class=\"line\">    <span class=\"keyword\">const</span> pivot = arr[pivotIndex]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = pivotIndex + <span class=\"number\">1</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] &lt;= pivot) &#123;</span><br><span class=\"line\">            leftArr.push(arr[i])</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[i] &gt; pivot) &#123;</span><br><span class=\"line\">            rightArr.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort(leftArr).concat([pivot]).concat(quickSort(rightArr))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort2</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.length&lt;<span class=\"number\">2</span>) &#123; <span class=\"keyword\">return</span> arr; &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 定义左指针, 每次选择最左边的数作为基数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> left=<span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"comment\">// 定义右指针</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> right=arr.length<span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"comment\">//开启每一轮的排序</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 寻找右边比arr[0]小的数的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(arr[right]&gt;=arr[<span class=\"number\">0</span>] &amp;&amp; left&lt;right)&#123;</span><br><span class=\"line\">      right=right<span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 寻找左边比arr[0]大的数的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(arr[left]&lt;=arr[<span class=\"number\">0</span>] &amp;&amp; left&lt;right)&#123;</span><br><span class=\"line\">      left++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//当左边指针与右边指针相遇后，交换arr[0]与当前两个指针所在的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right==left) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> mid=arr[right];</span><br><span class=\"line\">      arr[right]=arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">      arr[<span class=\"number\">0</span>]=mid;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当左指针小于右指针的位置，交换两个指针当前位置的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tem=arr[right];</span><br><span class=\"line\">    arr[right]=arr[left];</span><br><span class=\"line\">    arr[left]=tem;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//递归实现</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> quickSort(arr.slice(<span class=\"number\">0</span>,left)).concat(arr.slice(left,right+<span class=\"number\">1</span>)).concat(quickSort(arr.slice(right+<span class=\"number\">1</span>)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'result: '</span>, quickSort([<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"comment\">// [1, 1, 2, 2, 3, 5, 10]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'result2: '</span>, quickSort2([<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"comment\">// [1, 1, 2, 2, 3, 5, 10]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"顺序表查找\"><a href=\"#顺序表查找\" class=\"headerlink\" title=\"顺序表查找\"></a>顺序表查找</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查找数组中有没有某个值，有返回其位置，否则返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">searchValue</span>(<span class=\"params\">array,value</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>( array[i] == value )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"string\">'f'</span>,<span class=\"string\">'g'</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = searchValue(arr, <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(index)  <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查找数组中有没有某个值，有返回其位置，否则返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">searchValue</span>(<span class=\"params\">array,value</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'您输入的不是数组'</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hign = array.length<span class=\"number\">-1</span>,</span><br><span class=\"line\">      low = <span class=\"number\">0</span>,</span><br><span class=\"line\">      mid</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(low &lt;= hign)&#123;</span><br><span class=\"line\">        mid =<span class=\"built_in\">Math</span>.floor((low+hign)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( value &lt; array[mid] )&#123;</span><br><span class=\"line\">          hign = mid<span class=\"number\">-1</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( value &gt; array[mid] )&#123;</span><br><span class=\"line\">          low = mid+<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = searchValue(arr, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(index) <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cm21wm62k00078hspgychuskb","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm631000f8hspl0g20hys"},{"post_id":"cm21wm61q00018hspo796gj2b","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm636000j8hsp62oz4053"},{"post_id":"cm21wm62n00088hspqrjs3csm","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm63b000m8hspu03k7nhq"},{"post_id":"cm21wm62u000c8hspcw06xby3","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm63e000q8hspf91x2p50"},{"post_id":"cm21wm62000038hspc4wnk73n","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm63i000t8hsp6w3564dp"},{"post_id":"cm21wm62x000e8hspx74oelly","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm63l000x8hsp9xpwngwu"},{"post_id":"cm21wm633000i8hsp8vlklvb6","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm63o00108hspopb6owl1"},{"post_id":"cm21wm637000l8hsp5wm0x5ft","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm63s00138hspw2ajc4j9"},{"post_id":"cm21wm63d000p8hsp22mgprxw","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm63v00168hspg4gt659j"},{"post_id":"cm21wm63j000v8hsp79fteyrj","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm63y001a8hspf9b4u4la"},{"post_id":"cm21wm63m000z8hspe75b840u","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm640001c8hsppnxcijj0"},{"post_id":"cm21wm63w00198hsp0vt2bm41","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm645001i8hsp5jompeu8"},{"post_id":"cm21wm63y001b8hsp2qrfv8s8","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm648001l8hspf6pn0nu7"},{"post_id":"cm21wm63q00128hsptd3pny7c","category_id":"cm21wm63w00178hspf9i4pgwh","_id":"cm21wm64b001o8hspgsttq1s3"},{"post_id":"cm21wm641001e8hspgn5p3pkb","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm64f001r8hsplsywidol"},{"post_id":"cm21wm644001h8hspjuq3ysb1","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm64i001u8hspd579xzvn"},{"post_id":"cm21wm63t00158hspg69rwjw0","category_id":"cm21wm63w00178hspf9i4pgwh","_id":"cm21wm64l001y8hspjck3cqj7"},{"post_id":"cm21wm647001k8hsp5xjb4vy0","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm64n00208hsp91hjodfh"},{"post_id":"cm21wm649001n8hspun9docfq","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm64o00228hspb9pp4ed2"},{"post_id":"cm21wm64l001z8hsptojksz56","category_id":"cm21wm62500048hsp5ij6yfcy","_id":"cm21wm64q00258hspihus7w3k"},{"post_id":"cm21wm64c001q8hspni7tu9rj","category_id":"cm21wm64i001v8hsp8458rzmj","_id":"cm21wm64r00278hspk4wubxt2"},{"post_id":"cm21wm64g001t8hspv96w0lfh","category_id":"cm21wm64n00218hsputkuc8l7","_id":"cm21wm64s00298hspwr3b1hwb"},{"post_id":"cm21wm64j001x8hspoz5v8r6m","category_id":"cm21wm64n00218hsputkuc8l7","_id":"cm21wm64t002a8hsphpykfkm2"}],"PostTag":[{"post_id":"cm21wm62k00078hspgychuskb","tag_id":"cm21wm62800058hspu88ofitd","_id":"cm21wm62t000b8hspcd7z5exu"},{"post_id":"cm21wm61q00018hspo796gj2b","tag_id":"cm21wm62800058hspu88ofitd","_id":"cm21wm62x000d8hspexbdmvxt"},{"post_id":"cm21wm62u000c8hspcw06xby3","tag_id":"cm21wm62800058hspu88ofitd","_id":"cm21wm633000h8hsp2s1apl1y"},{"post_id":"cm21wm62000038hspc4wnk73n","tag_id":"cm21wm62800058hspu88ofitd","_id":"cm21wm637000k8hsprg4447hr"},{"post_id":"cm21wm62x000e8hspx74oelly","tag_id":"cm21wm62800058hspu88ofitd","_id":"cm21wm63d000o8hspor39qowv"},{"post_id":"cm21wm62n00088hspqrjs3csm","tag_id":"cm21wm631000g8hsprdah0jku","_id":"cm21wm63g000r8hspgmnf2llc"},{"post_id":"cm21wm637000l8hsp5wm0x5ft","tag_id":"cm21wm62800058hspu88ofitd","_id":"cm21wm63j000u8hsppqake00t"},{"post_id":"cm21wm633000i8hsp8vlklvb6","tag_id":"cm21wm63c000n8hsp4xeamtjg","_id":"cm21wm63m000y8hspzho72pmo"},{"post_id":"cm21wm63j000v8hsp79fteyrj","tag_id":"cm21wm62800058hspu88ofitd","_id":"cm21wm63q00118hsp9016ihra"},{"post_id":"cm21wm63m000z8hspe75b840u","tag_id":"cm21wm62800058hspu88ofitd","_id":"cm21wm63t00148hsprdgmijoq"},{"post_id":"cm21wm63d000p8hsp22mgprxw","tag_id":"cm21wm63l000w8hsp9wosl45m","_id":"cm21wm63w00188hspnybjelg6"},{"post_id":"cm21wm63w00198hsp0vt2bm41","tag_id":"cm21wm62800058hspu88ofitd","_id":"cm21wm641001d8hspft46fso1"},{"post_id":"cm21wm63y001b8hsp2qrfv8s8","tag_id":"cm21wm62800058hspu88ofitd","_id":"cm21wm644001g8hsprf6phuqs"},{"post_id":"cm21wm641001e8hspgn5p3pkb","tag_id":"cm21wm62800058hspu88ofitd","_id":"cm21wm646001j8hspqziddez9"},{"post_id":"cm21wm644001h8hspjuq3ysb1","tag_id":"cm21wm62800058hspu88ofitd","_id":"cm21wm649001m8hspcmkoqpz4"},{"post_id":"cm21wm647001k8hsp5xjb4vy0","tag_id":"cm21wm62800058hspu88ofitd","_id":"cm21wm64c001p8hsp64xpdeui"},{"post_id":"cm21wm649001n8hspun9docfq","tag_id":"cm21wm62800058hspu88ofitd","_id":"cm21wm64f001s8hspt5ww7e56"},{"post_id":"cm21wm64c001q8hspni7tu9rj","tag_id":"cm21wm64j001w8hsph3vioyla","_id":"cm21wm64p00248hspodkloavf"},{"post_id":"cm21wm64l001z8hsptojksz56","tag_id":"cm21wm64o00238hsp44pjfk2i","_id":"cm21wm64s00288hspawd3jcmw"}],"Tag":[{"name":"前端","_id":"cm21wm62800058hspu88ofitd"},{"name":"git","_id":"cm21wm631000g8hsprdah0jku"},{"name":"node","_id":"cm21wm63c000n8hsp4xeamtjg"},{"name":"工具","_id":"cm21wm63l000w8hsp9wosl45m"},{"name":"技术","_id":"cm21wm64j001w8hsph3vioyla"},{"name":"算法","_id":"cm21wm64o00238hsp44pjfk2i"}]}}